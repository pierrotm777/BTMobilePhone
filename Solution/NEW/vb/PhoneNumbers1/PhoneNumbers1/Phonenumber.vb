
' Generated by ProtoGen, Version=2.3.0.277, Culture=neutral, PublicKeyToken=17b3b1f090c3ea48.  DO NOT EDIT!

Imports System.Collections.Generic

Namespace PhoneNumbers

	<System.Diagnostics.DebuggerNonUserCodeAttribute> _
	<System.Runtime.CompilerServices.CompilerGeneratedAttribute> _
	<System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.3.0.277")> _
	Public NotInheritable Partial Class Phonenumber
		Private Sub New()
		End Sub


		#Region "Static variables"
		#End Region
		#Region "Extensions"
		Friend Shared ReadOnly Descriptor As Object
		Shared Sub New()
			Descriptor = Nothing
		End Sub
		#End Region

	End Class
	#Region "Messages"
	<System.Diagnostics.DebuggerNonUserCodeAttribute> _
	<System.Runtime.CompilerServices.CompilerGeneratedAttribute> _
	<System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.3.0.277")> _
	Public Partial Class PhoneNumber
		Private Shared ReadOnly m_defaultInstance As PhoneNumber = New Builder().BuildPartial()
		Public Shared ReadOnly Property DefaultInstance() As PhoneNumber
			Get
				Return m_defaultInstance
			End Get
		End Property

		Public ReadOnly Property DefaultInstanceForType() As PhoneNumber
			Get
				Return m_defaultInstance
			End Get
		End Property

		Protected ReadOnly Property ThisMessage() As PhoneNumber
			Get
				Return Me
			End Get
		End Property

		#Region "Nested types"
		<System.Diagnostics.DebuggerNonUserCodeAttribute> _
		<System.Runtime.CompilerServices.CompilerGeneratedAttribute> _
		<System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.3.0.277")> _
		Public NotInheritable Class Types
			Private Sub New()
			End Sub
			<System.Runtime.CompilerServices.CompilerGeneratedAttribute> _
			<System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.3.0.277")> _
			Public Enum CountryCodeSource
				FROM_NUMBER_WITH_PLUS_SIGN = 1
				FROM_NUMBER_WITH_IDD = 5
				FROM_NUMBER_WITHOUT_PLUS_SIGN = 10
				FROM_DEFAULT_COUNTRY = 20
			End Enum

		End Class
		#End Region

		Public Const CountryCodeFieldNumber As Integer = 1
		Private m_hasCountryCode As Boolean
		Private countryCode_ As Integer = 0
		Public ReadOnly Property HasCountryCode() As Boolean
			Get
				Return m_hasCountryCode
			End Get
		End Property
		Public ReadOnly Property CountryCode() As Integer
			Get
				Return countryCode_
			End Get
		End Property

		Public Const NationalNumberFieldNumber As Integer = 2
		Private m_hasNationalNumber As Boolean
		Private nationalNumber_ As ULong = 0UL
		Public ReadOnly Property HasNationalNumber() As Boolean
			Get
				Return m_hasNationalNumber
			End Get
		End Property
		Public ReadOnly Property NationalNumber() As ULong
			Get
				Return nationalNumber_
			End Get
		End Property

		Public Const ExtensionFieldNumber As Integer = 3
		Private m_hasExtension As Boolean
		Private extension_ As String = ""
		Public ReadOnly Property HasExtension() As Boolean
			Get
				Return m_hasExtension
			End Get
		End Property
		Public ReadOnly Property Extension() As String
			Get
				Return extension_
			End Get
		End Property

		Public Const ItalianLeadingZeroFieldNumber As Integer = 4
		Private m_hasItalianLeadingZero As Boolean
		Private italianLeadingZero_ As Boolean = False
		Public ReadOnly Property HasItalianLeadingZero() As Boolean
			Get
				Return m_hasItalianLeadingZero
			End Get
		End Property
		Public ReadOnly Property ItalianLeadingZero() As Boolean
			Get
				Return italianLeadingZero_
			End Get
		End Property

		Public Const RawInputFieldNumber As Integer = 5
		Private m_hasRawInput As Boolean
		Private rawInput_ As String = ""
		Public ReadOnly Property HasRawInput() As Boolean
			Get
				Return m_hasRawInput
			End Get
		End Property
		Public ReadOnly Property RawInput() As String
			Get
				Return rawInput_
			End Get
		End Property

		Public Const CountryCodeSourceFieldNumber As Integer = 6
		Private m_hasCountryCodeSource As Boolean
        Private countryCodeSource_ As Phonenumber.Types.CountryCodeSource = Phonenumber.Types.CountryCodeSource.FROM_NUMBER_WITH_PLUS_SIGN
		Public ReadOnly Property HasCountryCodeSource() As Boolean
			Get
				Return m_hasCountryCodeSource
			End Get
		End Property
        Public ReadOnly Property CountryCodeSource() As Phonenumber.Types.CountryCodeSource
            Get
                Return countryCodeSource_
            End Get
        End Property

		Public Const PreferredDomesticCarrierCodeFieldNumber As Integer = 7
		Private m_hasPreferredDomesticCarrierCode As Boolean
		Private preferredDomesticCarrierCode_ As String = ""
		Public ReadOnly Property HasPreferredDomesticCarrierCode() As Boolean
			Get
				Return m_hasPreferredDomesticCarrierCode
			End Get
		End Property
		Public ReadOnly Property PreferredDomesticCarrierCode() As String
			Get
				Return preferredDomesticCarrierCode_
			End Get
		End Property

		Public ReadOnly Property IsInitialized() As Boolean
			Get
				If Not m_hasCountryCode Then
					Return False
				End If
				If Not m_hasNationalNumber Then
					Return False
				End If
				Return True
			End Get
		End Property




		#Region "Lite runtime methods"
		Public Overrides Function GetHashCode() As Integer
			Dim hash As Integer = [GetType]().GetHashCode()
			If m_hasCountryCode Then
				hash = hash Xor countryCode_.GetHashCode()
			End If
			If m_hasNationalNumber Then
				hash = hash Xor nationalNumber_.GetHashCode()
			End If
			If m_hasExtension Then
				hash = hash Xor extension_.GetHashCode()
			End If
			' Manual fix to behave like the Java version which ignores the hasItalianLeadingZero fields
			hash = hash Xor italianLeadingZero_.GetHashCode()
			If m_hasRawInput Then
				hash = hash Xor rawInput_.GetHashCode()
			End If
			If m_hasCountryCodeSource Then
				hash = hash Xor countryCodeSource_.GetHashCode()
			End If
			If m_hasPreferredDomesticCarrierCode Then
				hash = hash Xor preferredDomesticCarrierCode_.GetHashCode()
			End If
			Return hash
		End Function

		Public Overrides Function Equals(obj As Object) As Boolean
			Dim other As PhoneNumber = TryCast(obj, PhoneNumber)
			If other Is Nothing Then
				Return False
			End If
			If m_hasCountryCode <> other.hasCountryCode OrElse (m_hasCountryCode AndAlso Not countryCode_.Equals(other.countryCode_)) Then
				Return False
			End If
			If m_hasNationalNumber <> other.hasNationalNumber OrElse (m_hasNationalNumber AndAlso Not nationalNumber_.Equals(other.nationalNumber_)) Then
				Return False
			End If
			If m_hasExtension <> other.hasExtension OrElse (m_hasExtension AndAlso Not extension_.Equals(other.extension_)) Then
				Return False
			End If
			' Manual fix to behave like the Java version which ignores the hasItalianLeadingZero fields
			If Not italianLeadingZero_.Equals(other.italianLeadingZero_) Then
				Return False
			End If
			If m_hasRawInput <> other.hasRawInput OrElse (m_hasRawInput AndAlso Not rawInput_.Equals(other.rawInput_)) Then
				Return False
			End If
			If m_hasCountryCodeSource <> other.hasCountryCodeSource OrElse (m_hasCountryCodeSource AndAlso Not countryCodeSource_.Equals(other.countryCodeSource_)) Then
				Return False
			End If
			If m_hasPreferredDomesticCarrierCode <> other.hasPreferredDomesticCarrierCode OrElse (m_hasPreferredDomesticCarrierCode AndAlso Not preferredDomesticCarrierCode_.Equals(other.preferredDomesticCarrierCode_)) Then
				Return False
			End If
			Return True
		End Function

		#End Region

		Public Shared Function CreateBuilder() As Builder
			Return New Builder()
		End Function
		Public Function ToBuilder() As Builder
			Return CreateBuilder(Me)
		End Function
		Public Function CreateBuilderForType() As Builder
			Return New Builder()
		End Function
		Public Shared Function CreateBuilder(prototype As PhoneNumber) As Builder
			Return DirectCast(New Builder().MergeFrom(prototype), Builder)
		End Function

		<System.Diagnostics.DebuggerNonUserCodeAttribute> _
		<System.Runtime.CompilerServices.CompilerGeneratedAttribute> _
		<System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.3.0.277")> _
		Public Partial Class Builder
			Protected ReadOnly Property ThisBuilder() As Builder
				Get
					Return Me
				End Get
			End Property
			Public Sub New()
			End Sub

			Private result As New PhoneNumber()

			Protected ReadOnly Property MessageBeingBuilt() As PhoneNumber
				Get
					Return result
				End Get
			End Property

			Public Function Clear() As Builder
				result = New PhoneNumber()
				Return Me
			End Function

			Public Function Clone() As Builder
				Return New Builder().MergeFrom(result)
			End Function

			Public ReadOnly Property DefaultInstanceForType() As PhoneNumber
				Get
					Return Global.PhoneNumbers.PhoneNumber.DefaultInstance
				End Get
			End Property

			Public Function Build() As PhoneNumber
				Return BuildPartial()
			End Function

			Public Function BuildPartial() As PhoneNumber
				If result Is Nothing Then
					Throw New Global.System.InvalidOperationException("build() has already been called on this Builder")
				End If
				Dim returnMe As PhoneNumber = result
				result = Nothing
				Return returnMe
			End Function


			Public Function MergeFrom(other As PhoneNumber) As Builder
				If other Is Global.PhoneNumbers.PhoneNumber.DefaultInstance Then
					Return Me
				End If
				If other.HasCountryCode Then
					CountryCode = other.CountryCode
				End If
				If other.HasNationalNumber Then
					NationalNumber = other.NationalNumber
				End If
				If other.HasExtension Then
					Extension = other.Extension
				End If
				If other.HasItalianLeadingZero Then
					ItalianLeadingZero = other.ItalianLeadingZero
				End If
				If other.HasRawInput Then
					RawInput = other.RawInput
				End If
				If other.HasCountryCodeSource Then
					CountryCodeSource = other.CountryCodeSource
				End If
				If other.HasPreferredDomesticCarrierCode Then
					PreferredDomesticCarrierCode = other.PreferredDomesticCarrierCode
				End If
				Return Me
			End Function




			Public ReadOnly Property HasCountryCode() As Boolean
				Get
					Return result.HasCountryCode
				End Get
			End Property
			Public Property CountryCode() As Integer
				Get
					Return result.CountryCode
				End Get
				Set
					SetCountryCode(value)
				End Set
			End Property
			Public Function SetCountryCode(value As Integer) As Builder
				result.hasCountryCode = True
				result.countryCode_ = value
				Return Me
			End Function
			Public Function ClearCountryCode() As Builder
				result.hasCountryCode = False
				result.countryCode_ = 0
				Return Me
			End Function

			Public ReadOnly Property HasNationalNumber() As Boolean
				Get
					Return result.HasNationalNumber
				End Get
			End Property
			Public Property NationalNumber() As ULong
				Get
					Return result.NationalNumber
				End Get
				Set
					SetNationalNumber(value)
				End Set
			End Property
			Public Function SetNationalNumber(value As ULong) As Builder
				result.hasNationalNumber = True
				result.nationalNumber_ = value
				Return Me
			End Function
			Public Function ClearNationalNumber() As Builder
				result.hasNationalNumber = False
				result.nationalNumber_ = 0UL
				Return Me
			End Function

			Public ReadOnly Property HasExtension() As Boolean
				Get
					Return result.HasExtension
				End Get
			End Property
			Public Property Extension() As String
				Get
					Return result.Extension
				End Get
				Set
					SetExtension(value)
				End Set
			End Property
			Public Function SetExtension(value As String) As Builder
				If value Is Nothing Then
					Throw New Global.System.ArgumentNullException("value")
				End If
				result.hasExtension = True
				result.extension_ = value
				Return Me
			End Function
			Public Function ClearExtension() As Builder
				result.hasExtension = False
				result.extension_ = ""
				Return Me
			End Function

			Public ReadOnly Property HasItalianLeadingZero() As Boolean
				Get
					Return result.HasItalianLeadingZero
				End Get
			End Property
			Public Property ItalianLeadingZero() As Boolean
				Get
					Return result.ItalianLeadingZero
				End Get
				Set
					SetItalianLeadingZero(value)
				End Set
			End Property
			Public Function SetItalianLeadingZero(value As Boolean) As Builder
				result.hasItalianLeadingZero = True
				result.italianLeadingZero_ = value
				Return Me
			End Function
			Public Function ClearItalianLeadingZero() As Builder
				result.hasItalianLeadingZero = False
				result.italianLeadingZero_ = False
				Return Me
			End Function

			Public ReadOnly Property HasRawInput() As Boolean
				Get
					Return result.HasRawInput
				End Get
			End Property
			Public Property RawInput() As String
				Get
					Return result.RawInput
				End Get
				Set
					SetRawInput(value)
				End Set
			End Property
			Public Function SetRawInput(value As String) As Builder
				If value Is Nothing Then
					Throw New Global.System.ArgumentNullException("value")
				End If
				result.hasRawInput = True
				result.rawInput_ = value
				Return Me
			End Function
			Public Function ClearRawInput() As Builder
				result.hasRawInput = False
				result.rawInput_ = ""
				Return Me
			End Function

			Public ReadOnly Property HasCountryCodeSource() As Boolean
				Get
					Return result.HasCountryCodeSource
				End Get
			End Property
            Public Property CountryCodeSource() As Phonenumber.Types.CountryCodeSource
                Get
                    Return result.CountryCodeSource
                End Get
                Set(value As Phonenumber.Types.CountryCodeSource)
                    SetCountryCodeSource(Value)
                End Set
            End Property
            Public Function SetCountryCodeSource(value As Phonenumber.Types.CountryCodeSource) As Builder
                result.HasCountryCodeSource = True
                result.countryCodeSource_ = value
                Return Me
            End Function
			Public Function ClearCountryCodeSource() As Builder
				result.hasCountryCodeSource = False
                result.countryCodeSource_ = Phonenumber.Types.CountryCodeSource.FROM_NUMBER_WITH_PLUS_SIGN
				Return Me
			End Function

			Public ReadOnly Property HasPreferredDomesticCarrierCode() As Boolean
				Get
					Return result.HasPreferredDomesticCarrierCode
				End Get
			End Property
			Public Property PreferredDomesticCarrierCode() As String
				Get
					Return result.PreferredDomesticCarrierCode
				End Get
				Set
					SetPreferredDomesticCarrierCode(value)
				End Set
			End Property
			Public Function SetPreferredDomesticCarrierCode(value As String) As Builder
				If value Is Nothing Then
					Throw New Global.System.ArgumentNullException("value")
				End If
				result.hasPreferredDomesticCarrierCode = True
				result.preferredDomesticCarrierCode_ = value
				Return Me
			End Function
			Public Function ClearPreferredDomesticCarrierCode() As Builder
				result.hasPreferredDomesticCarrierCode = False
				result.preferredDomesticCarrierCode_ = ""
				Return Me
			End Function
		End Class
		Shared Sub New()
            Object.ReferenceEquals(Phonenumber.Descriptor, Nothing)
		End Sub
	End Class

	#End Region

End Namespace

'=======================================================
'Service provided by Telerik (www.telerik.com)
'Conversion powered by NRefactory.
'Twitter: @telerik
'Facebook: facebook.com/telerik
'=======================================================
