
' Generated by ProtoGen, Version=2.3.0.277, Culture=neutral, PublicKeyToken=17b3b1f090c3ea48.  DO NOT EDIT!

Imports scg = Global.System.Collections.Generic
Namespace PhoneNumbers

	<System.Diagnostics.DebuggerNonUserCodeAttribute> _
	<System.Runtime.CompilerServices.CompilerGeneratedAttribute> _
	<System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.3.0.277")> _
	Public NotInheritable Partial Class Phonemetadata
		Private Sub New()
		End Sub


		#Region "Static variables"
		#End Region
		#Region "Extensions"
		Friend Shared ReadOnly Descriptor As Object
		Shared Sub New()
			Descriptor = Nothing
		End Sub
		#End Region

	End Class
	#Region "Messages"
	<System.Diagnostics.DebuggerNonUserCodeAttribute> _
	<System.Runtime.CompilerServices.CompilerGeneratedAttribute> _
	<System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.3.0.277")> _
	Public Partial Class NumberFormat
		Private Shared ReadOnly m_defaultInstance As NumberFormat = New Builder().BuildPartial()
		Public Shared ReadOnly Property DefaultInstance() As NumberFormat
			Get
				Return m_defaultInstance
			End Get
		End Property

		Public ReadOnly Property DefaultInstanceForType() As NumberFormat
			Get
				Return m_defaultInstance
			End Get
		End Property

		Protected ReadOnly Property ThisMessage() As NumberFormat
			Get
				Return Me
			End Get
		End Property

		Public Const PatternFieldNumber As Integer = 1
		Private m_hasPattern As Boolean
		Private pattern_ As String = ""
		Public ReadOnly Property HasPattern() As Boolean
			Get
				Return m_hasPattern
			End Get
		End Property
		Public ReadOnly Property Pattern() As String
			Get
				Return pattern_
			End Get
		End Property

		Public Const FormatFieldNumber As Integer = 2
		Private m_hasFormat As Boolean
		Private format_ As String = ""
		Public ReadOnly Property HasFormat() As Boolean
			Get
				Return m_hasFormat
			End Get
		End Property
		Public ReadOnly Property Format() As String
			Get
				Return format_
			End Get
		End Property

		Public Const LeadingDigitsPatternFieldNumber As Integer = 3
		Private leadingDigitsPattern_ As New scg.List(Of String)()
		Public ReadOnly Property LeadingDigitsPatternList() As scg.IList(Of String)
			Get
				Return leadingDigitsPattern_
			End Get
		End Property
		Public ReadOnly Property LeadingDigitsPatternCount() As Integer
			Get
				Return leadingDigitsPattern_.Count
			End Get
		End Property
		Public Function GetLeadingDigitsPattern(index As Integer) As String
			Return leadingDigitsPattern_(index)
		End Function

		Public Const NationalPrefixFormattingRuleFieldNumber As Integer = 4
		Private m_hasNationalPrefixFormattingRule As Boolean
		Private nationalPrefixFormattingRule_ As String = ""
		Public ReadOnly Property HasNationalPrefixFormattingRule() As Boolean
			Get
				Return m_hasNationalPrefixFormattingRule
			End Get
		End Property
		Public ReadOnly Property NationalPrefixFormattingRule() As String
			Get
				Return nationalPrefixFormattingRule_
			End Get
		End Property

		Public Const NationalPrefixOptionalWhenFormattingFieldNumber As Integer = 6
		Private m_hasNationalPrefixOptionalWhenFormatting As Boolean
		Private nationalPrefixOptionalWhenFormatting_ As Boolean = False
		Public ReadOnly Property HasNationalPrefixOptionalWhenFormatting() As Boolean
			Get
				Return m_hasNationalPrefixOptionalWhenFormatting
			End Get
		End Property
		Public ReadOnly Property NationalPrefixOptionalWhenFormatting() As Boolean
			Get
				Return nationalPrefixOptionalWhenFormatting_
			End Get
		End Property

		Public Const DomesticCarrierCodeFormattingRuleFieldNumber As Integer = 5
		Private m_hasDomesticCarrierCodeFormattingRule As Boolean
		Private domesticCarrierCodeFormattingRule_ As String = ""
		Public ReadOnly Property HasDomesticCarrierCodeFormattingRule() As Boolean
			Get
				Return m_hasDomesticCarrierCodeFormattingRule
			End Get
		End Property
		Public ReadOnly Property DomesticCarrierCodeFormattingRule() As String
			Get
				Return domesticCarrierCodeFormattingRule_
			End Get
		End Property

		Public ReadOnly Property IsInitialized() As Boolean
			Get
				If Not m_hasPattern Then
					Return False
				End If
				If Not m_hasFormat Then
					Return False
				End If
				Return True
			End Get
		End Property




		#Region "Lite runtime methods"
		Public Overrides Function GetHashCode() As Integer
			Dim hash As Integer = [GetType]().GetHashCode()
			If m_hasPattern Then
				hash = hash Xor pattern_.GetHashCode()
			End If
			If m_hasFormat Then
				hash = hash Xor format_.GetHashCode()
			End If
			For Each i As String In leadingDigitsPattern_
				hash = hash Xor i.GetHashCode()
			Next
			If m_hasNationalPrefixFormattingRule Then
				hash = hash Xor nationalPrefixFormattingRule_.GetHashCode()
			End If
			If m_hasNationalPrefixOptionalWhenFormatting Then
				hash = hash Xor nationalPrefixOptionalWhenFormatting_.GetHashCode()
			End If
			If m_hasDomesticCarrierCodeFormattingRule Then
				hash = hash Xor domesticCarrierCodeFormattingRule_.GetHashCode()
			End If
			Return hash
		End Function

		Public Overrides Function Equals(obj As Object) As Boolean
			Dim other As NumberFormat = TryCast(obj, NumberFormat)
			If other Is Nothing Then
				Return False
			End If
			If m_hasPattern <> other.hasPattern OrElse (m_hasPattern AndAlso Not pattern_.Equals(other.pattern_)) Then
				Return False
			End If
			If m_hasFormat <> other.hasFormat OrElse (m_hasFormat AndAlso Not format_.Equals(other.format_)) Then
				Return False
			End If
			If leadingDigitsPattern_.Count <> other.leadingDigitsPattern_.Count Then
				Return False
			End If
			For ix As Integer = 0 To leadingDigitsPattern_.Count - 1
				If Not leadingDigitsPattern_(ix).Equals(other.leadingDigitsPattern_(ix)) Then
					Return False
				End If
			Next
			If m_hasNationalPrefixFormattingRule <> other.hasNationalPrefixFormattingRule OrElse (m_hasNationalPrefixFormattingRule AndAlso Not nationalPrefixFormattingRule_.Equals(other.nationalPrefixFormattingRule_)) Then
				Return False
			End If
			If m_hasNationalPrefixOptionalWhenFormatting <> other.hasNationalPrefixOptionalWhenFormatting OrElse (m_hasNationalPrefixOptionalWhenFormatting AndAlso Not nationalPrefixOptionalWhenFormatting_.Equals(other.nationalPrefixOptionalWhenFormatting_)) Then
				Return False
			End If
			If m_hasDomesticCarrierCodeFormattingRule <> other.hasDomesticCarrierCodeFormattingRule OrElse (m_hasDomesticCarrierCodeFormattingRule AndAlso Not domesticCarrierCodeFormattingRule_.Equals(other.domesticCarrierCodeFormattingRule_)) Then
				Return False
			End If
			Return True
		End Function

		#End Region

		Public Shared Function CreateBuilder() As Builder
			Return New Builder()
		End Function
		Public Function ToBuilder() As Builder
			Return CreateBuilder(Me)
		End Function
		Public Function CreateBuilderForType() As Builder
			Return New Builder()
		End Function
		Public Shared Function CreateBuilder(prototype As NumberFormat) As Builder
			Return DirectCast(New Builder().MergeFrom(prototype), Builder)
		End Function

		<System.Diagnostics.DebuggerNonUserCodeAttribute> _
		<System.Runtime.CompilerServices.CompilerGeneratedAttribute> _
		<System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.3.0.277")> _
		Public Partial Class Builder
			Protected ReadOnly Property ThisBuilder() As Builder
				Get
					Return Me
				End Get
			End Property
			Public Sub New()
			End Sub

			Private result As New NumberFormat()

			Protected ReadOnly Property MessageBeingBuilt() As NumberFormat
				Get
					Return result
				End Get
			End Property

			Public Function Clear() As Builder
				result = New NumberFormat()
				Return Me
			End Function

			Public Function Clone() As Builder
				Return New Builder().MergeFrom(result)
			End Function

			Public ReadOnly Property DefaultInstanceForType() As NumberFormat
				Get
					Return Global.PhoneNumbers.NumberFormat.DefaultInstance
				End Get
			End Property

			Public Function Build() As NumberFormat
				Return BuildPartial()
			End Function

			Public Function BuildPartial() As NumberFormat
				If result Is Nothing Then
					Throw New Global.System.InvalidOperationException("build() has already been called on this Builder")
				End If

				Dim returnMe As NumberFormat = result
				result = Nothing
				Return returnMe
			End Function


			Public Function MergeFrom(other As NumberFormat) As Builder
				If other Is Global.PhoneNumbers.NumberFormat.DefaultInstance Then
					Return Me
				End If
				If other.HasPattern Then
					Pattern = other.Pattern
				End If
				If other.HasFormat Then
					Format = other.Format
				End If
				If other.leadingDigitsPattern_.Count <> 0 Then
					result.leadingDigitsPattern_.AddRange(other.leadingDigitsPattern_)
				End If
				If other.HasNationalPrefixFormattingRule Then
					NationalPrefixFormattingRule = other.NationalPrefixFormattingRule
				End If
				If other.HasNationalPrefixOptionalWhenFormatting Then
					NationalPrefixOptionalWhenFormatting = other.NationalPrefixOptionalWhenFormatting
				End If
				If other.HasDomesticCarrierCodeFormattingRule Then
					DomesticCarrierCodeFormattingRule = other.DomesticCarrierCodeFormattingRule
				End If
				Return Me
			End Function




			Public ReadOnly Property HasPattern() As Boolean
				Get
					Return result.HasPattern
				End Get
			End Property
			Public Property Pattern() As String
				Get
					Return result.Pattern
				End Get
				Set
					SetPattern(value)
				End Set
			End Property
			Public Function SetPattern(value As String) As Builder
				If value Is Nothing Then
					Throw New Global.System.ArgumentNullException("value")
				End If
				result.hasPattern = True
				result.pattern_ = value
				Return Me
			End Function
			Public Function ClearPattern() As Builder
				result.hasPattern = False
				result.pattern_ = ""
				Return Me
			End Function

			Public ReadOnly Property HasFormat() As Boolean
				Get
					Return result.HasFormat
				End Get
			End Property
			Public Property Format() As String
				Get
					Return result.Format
				End Get
				Set
					SetFormat(value)
				End Set
			End Property
			Public Function SetFormat(value As String) As Builder
				If value Is Nothing Then
					Throw New Global.System.ArgumentNullException("value")
				End If
				result.hasFormat = True
				result.format_ = value
				Return Me
			End Function
			Public Function ClearFormat() As Builder
				result.hasFormat = False
				result.format_ = ""
				Return Me
			End Function

			Public ReadOnly Property LeadingDigitsPatternList() As scg.IList(Of String)
				Get
					Return result.leadingDigitsPattern_
				End Get
			End Property
			Public ReadOnly Property LeadingDigitsPatternCount() As Integer
				Get
					Return result.LeadingDigitsPatternCount
				End Get
			End Property
			Public Function GetLeadingDigitsPattern(index As Integer) As String
				Return result.GetLeadingDigitsPattern(index)
			End Function
			Public Function SetLeadingDigitsPattern(index As Integer, value As String) As Builder
				If value Is Nothing Then
					Throw New Global.System.ArgumentNullException("value")
				End If
				result.leadingDigitsPattern_(index) = value
				Return Me
			End Function
			Public Function AddLeadingDigitsPattern(value As String) As Builder
				If value Is Nothing Then
					Throw New Global.System.ArgumentNullException("value")
				End If
				result.leadingDigitsPattern_.Add(value)
				Return Me
			End Function
			Public Function AddRangeLeadingDigitsPattern(values As scg.IEnumerable(Of String)) As Builder
				result.leadingDigitsPattern_.AddRange(values)
				Return Me
			End Function
			Public Function ClearLeadingDigitsPattern() As Builder
				result.leadingDigitsPattern_.Clear()
				Return Me
			End Function

			Public ReadOnly Property HasNationalPrefixFormattingRule() As Boolean
				Get
					Return result.HasNationalPrefixFormattingRule
				End Get
			End Property
			Public Property NationalPrefixFormattingRule() As String
				Get
					Return result.NationalPrefixFormattingRule
				End Get
				Set
					SetNationalPrefixFormattingRule(value)
				End Set
			End Property
			Public Function SetNationalPrefixFormattingRule(value As String) As Builder
				If value Is Nothing Then
					Throw New Global.System.ArgumentNullException("value")
				End If
				result.hasNationalPrefixFormattingRule = True
				result.nationalPrefixFormattingRule_ = value
				Return Me
			End Function
			Public Function ClearNationalPrefixFormattingRule() As Builder
				result.hasNationalPrefixFormattingRule = False
				result.nationalPrefixFormattingRule_ = ""
				Return Me
			End Function

			Public ReadOnly Property HasNationalPrefixOptionalWhenFormatting() As Boolean
				Get
					Return result.HasNationalPrefixOptionalWhenFormatting
				End Get
			End Property
			Public Property NationalPrefixOptionalWhenFormatting() As Boolean
				Get
					Return result.NationalPrefixOptionalWhenFormatting
				End Get
				Set
					SetNationalPrefixOptionalWhenFormatting(value)
				End Set
			End Property
			Public Function SetNationalPrefixOptionalWhenFormatting(value As Boolean) As Builder
				result.hasNationalPrefixOptionalWhenFormatting = True
				result.nationalPrefixOptionalWhenFormatting_ = value
				Return Me
			End Function
			Public Function ClearNationalPrefixOptionalWhenFormatting() As Builder
				result.hasNationalPrefixOptionalWhenFormatting = False
				result.nationalPrefixOptionalWhenFormatting_ = False
				Return Me
			End Function

			Public ReadOnly Property HasDomesticCarrierCodeFormattingRule() As Boolean
				Get
					Return result.HasDomesticCarrierCodeFormattingRule
				End Get
			End Property
			Public Property DomesticCarrierCodeFormattingRule() As String
				Get
					Return result.DomesticCarrierCodeFormattingRule
				End Get
				Set
					SetDomesticCarrierCodeFormattingRule(value)
				End Set
			End Property
			Public Function SetDomesticCarrierCodeFormattingRule(value As String) As Builder
				If value Is Nothing Then
					Throw New Global.System.ArgumentNullException("value")
				End If
				result.hasDomesticCarrierCodeFormattingRule = True
				result.domesticCarrierCodeFormattingRule_ = value
				Return Me
			End Function
			Public Function ClearDomesticCarrierCodeFormattingRule() As Builder
				result.hasDomesticCarrierCodeFormattingRule = False
				result.domesticCarrierCodeFormattingRule_ = ""
				Return Me
			End Function
		End Class
		Shared Sub New()
			Object.ReferenceEquals(Global.PhoneNumbers.Phonemetadata.Descriptor, Nothing)
		End Sub
	End Class

	<System.Diagnostics.DebuggerNonUserCodeAttribute> _
	<System.Runtime.CompilerServices.CompilerGeneratedAttribute> _
	<System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.3.0.277")> _
	Public Partial Class PhoneNumberDesc
		Private Shared ReadOnly m_defaultInstance As PhoneNumberDesc = New Builder().BuildPartial()
		Public Shared ReadOnly Property DefaultInstance() As PhoneNumberDesc
			Get
				Return m_defaultInstance
			End Get
		End Property

		Public ReadOnly Property DefaultInstanceForType() As PhoneNumberDesc
			Get
				Return m_defaultInstance
			End Get
		End Property

		Protected ReadOnly Property ThisMessage() As PhoneNumberDesc
			Get
				Return Me
			End Get
		End Property

		Public Const NationalNumberPatternFieldNumber As Integer = 2
		Private m_hasNationalNumberPattern As Boolean
		Private nationalNumberPattern_ As String = ""
		Public ReadOnly Property HasNationalNumberPattern() As Boolean
			Get
				Return m_hasNationalNumberPattern
			End Get
		End Property
		Public ReadOnly Property NationalNumberPattern() As String
			Get
				Return nationalNumberPattern_
			End Get
		End Property

		Public Const PossibleNumberPatternFieldNumber As Integer = 3
		Private m_hasPossibleNumberPattern As Boolean
		Private possibleNumberPattern_ As String = ""
		Public ReadOnly Property HasPossibleNumberPattern() As Boolean
			Get
				Return m_hasPossibleNumberPattern
			End Get
		End Property
		Public ReadOnly Property PossibleNumberPattern() As String
			Get
				Return possibleNumberPattern_
			End Get
		End Property

		Public Const ExampleNumberFieldNumber As Integer = 6
		Private m_hasExampleNumber As Boolean
		Private exampleNumber_ As String = ""
		Public ReadOnly Property HasExampleNumber() As Boolean
			Get
				Return m_hasExampleNumber
			End Get
		End Property
		Public ReadOnly Property ExampleNumber() As String
			Get
				Return exampleNumber_
			End Get
		End Property

		Public ReadOnly Property IsInitialized() As Boolean
			Get
				Return True
			End Get
		End Property




		#Region "Lite runtime methods"
		Public Overrides Function GetHashCode() As Integer
			Dim hash As Integer = [GetType]().GetHashCode()
			If m_hasNationalNumberPattern Then
				hash = hash Xor nationalNumberPattern_.GetHashCode()
			End If
			If m_hasPossibleNumberPattern Then
				hash = hash Xor possibleNumberPattern_.GetHashCode()
			End If
			If m_hasExampleNumber Then
				hash = hash Xor exampleNumber_.GetHashCode()
			End If
			Return hash
		End Function

		Public Overrides Function Equals(obj As Object) As Boolean
			Dim other As PhoneNumberDesc = TryCast(obj, PhoneNumberDesc)
			If other Is Nothing Then
				Return False
			End If
			If m_hasNationalNumberPattern <> other.hasNationalNumberPattern OrElse (m_hasNationalNumberPattern AndAlso Not nationalNumberPattern_.Equals(other.nationalNumberPattern_)) Then
				Return False
			End If
			If m_hasPossibleNumberPattern <> other.hasPossibleNumberPattern OrElse (m_hasPossibleNumberPattern AndAlso Not possibleNumberPattern_.Equals(other.possibleNumberPattern_)) Then
				Return False
			End If
			If m_hasExampleNumber <> other.hasExampleNumber OrElse (m_hasExampleNumber AndAlso Not exampleNumber_.Equals(other.exampleNumber_)) Then
				Return False
			End If
			Return True
		End Function

		#End Region

		Public Shared Function CreateBuilder() As Builder
			Return New Builder()
		End Function
		Public Function ToBuilder() As Builder
			Return CreateBuilder(Me)
		End Function
		Public Function CreateBuilderForType() As Builder
			Return New Builder()
		End Function
		Public Shared Function CreateBuilder(prototype As PhoneNumberDesc) As Builder
			Return DirectCast(New Builder().MergeFrom(prototype), Builder)
		End Function

		<System.Diagnostics.DebuggerNonUserCodeAttribute> _
		<System.Runtime.CompilerServices.CompilerGeneratedAttribute> _
		<System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.3.0.277")> _
		Public Partial Class Builder
			Protected ReadOnly Property ThisBuilder() As Builder
				Get
					Return Me
				End Get
			End Property
			Public Sub New()
			End Sub

			Private result As New PhoneNumberDesc()

			Protected ReadOnly Property MessageBeingBuilt() As PhoneNumberDesc
				Get
					Return result
				End Get
			End Property

			Public Function Clear() As Builder
				result = New PhoneNumberDesc()
				Return Me
			End Function

			Public Function Clone() As Builder
				Return New Builder().MergeFrom(result)
			End Function

			Public ReadOnly Property DefaultInstanceForType() As PhoneNumberDesc
				Get
					Return Global.PhoneNumbers.PhoneNumberDesc.DefaultInstance
				End Get
			End Property

			Public Function Build() As PhoneNumberDesc
				Return BuildPartial()
			End Function

			Public Function BuildPartial() As PhoneNumberDesc
				If result Is Nothing Then
					Throw New Global.System.InvalidOperationException("build() has already been called on this Builder")
				End If
				Dim returnMe As PhoneNumberDesc = result
				result = Nothing
				Return returnMe
			End Function


			Public Function MergeFrom(other As PhoneNumberDesc) As Builder
				If other Is Global.PhoneNumbers.PhoneNumberDesc.DefaultInstance Then
					Return Me
				End If
				If other.HasNationalNumberPattern Then
					NationalNumberPattern = other.NationalNumberPattern
				End If
				If other.HasPossibleNumberPattern Then
					PossibleNumberPattern = other.PossibleNumberPattern
				End If
				If other.HasExampleNumber Then
					ExampleNumber = other.ExampleNumber
				End If
				Return Me
			End Function




			Public ReadOnly Property HasNationalNumberPattern() As Boolean
				Get
					Return result.HasNationalNumberPattern
				End Get
			End Property
			Public Property NationalNumberPattern() As String
				Get
					Return result.NationalNumberPattern
				End Get
				Set
					SetNationalNumberPattern(value)
				End Set
			End Property
			Public Function SetNationalNumberPattern(value As String) As Builder
				If value Is Nothing Then
					Throw New Global.System.ArgumentNullException("value")
				End If
				result.hasNationalNumberPattern = True
				result.nationalNumberPattern_ = value
				Return Me
			End Function
			Public Function ClearNationalNumberPattern() As Builder
				result.hasNationalNumberPattern = False
				result.nationalNumberPattern_ = ""
				Return Me
			End Function

			Public ReadOnly Property HasPossibleNumberPattern() As Boolean
				Get
					Return result.HasPossibleNumberPattern
				End Get
			End Property
			Public Property PossibleNumberPattern() As String
				Get
					Return result.PossibleNumberPattern
				End Get
				Set
					SetPossibleNumberPattern(value)
				End Set
			End Property
			Public Function SetPossibleNumberPattern(value As String) As Builder
				If value Is Nothing Then
					Throw New Global.System.ArgumentNullException("value")
				End If
				result.hasPossibleNumberPattern = True
				result.possibleNumberPattern_ = value
				Return Me
			End Function
			Public Function ClearPossibleNumberPattern() As Builder
				result.hasPossibleNumberPattern = False
				result.possibleNumberPattern_ = ""
				Return Me
			End Function

			Public ReadOnly Property HasExampleNumber() As Boolean
				Get
					Return result.HasExampleNumber
				End Get
			End Property
			Public Property ExampleNumber() As String
				Get
					Return result.ExampleNumber
				End Get
				Set
					SetExampleNumber(value)
				End Set
			End Property
			Public Function SetExampleNumber(value As String) As Builder
				If value Is Nothing Then
					Throw New Global.System.ArgumentNullException("value")
				End If
				result.hasExampleNumber = True
				result.exampleNumber_ = value
				Return Me
			End Function
			Public Function ClearExampleNumber() As Builder
				result.hasExampleNumber = False
				result.exampleNumber_ = ""
				Return Me
			End Function
		End Class
		Shared Sub New()
			Object.ReferenceEquals(Global.PhoneNumbers.Phonemetadata.Descriptor, Nothing)
		End Sub
	End Class

	<System.Diagnostics.DebuggerNonUserCodeAttribute> _
	<System.Runtime.CompilerServices.CompilerGeneratedAttribute> _
	<System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.3.0.277")> _
	Public Partial Class PhoneMetadata
		Private Shared ReadOnly m_defaultInstance As PhoneMetadata = New Builder().BuildPartial()
		Public Shared ReadOnly Property DefaultInstance() As PhoneMetadata
			Get
				Return m_defaultInstance
			End Get
		End Property

		Public ReadOnly Property DefaultInstanceForType() As PhoneMetadata
			Get
				Return m_defaultInstance
			End Get
		End Property

		Protected ReadOnly Property ThisMessage() As PhoneMetadata
			Get
				Return Me
			End Get
		End Property

		Public Const GeneralDescFieldNumber As Integer = 1
		Private m_hasGeneralDesc As Boolean
		Private generalDesc_ As Global.PhoneNumbers.PhoneNumberDesc = Global.PhoneNumbers.PhoneNumberDesc.DefaultInstance
		Public ReadOnly Property HasGeneralDesc() As Boolean
			Get
				Return m_hasGeneralDesc
			End Get
		End Property
		Public ReadOnly Property GeneralDesc() As Global.PhoneNumbers.PhoneNumberDesc
			Get
				Return generalDesc_
			End Get
		End Property

		Public Const FixedLineFieldNumber As Integer = 2
		Private m_hasFixedLine As Boolean
		Private fixedLine_ As Global.PhoneNumbers.PhoneNumberDesc = Global.PhoneNumbers.PhoneNumberDesc.DefaultInstance
		Public ReadOnly Property HasFixedLine() As Boolean
			Get
				Return m_hasFixedLine
			End Get
		End Property
		Public ReadOnly Property FixedLine() As Global.PhoneNumbers.PhoneNumberDesc
			Get
				Return fixedLine_
			End Get
		End Property

		Public Const MobileFieldNumber As Integer = 3
		Private m_hasMobile As Boolean
		Private mobile_ As Global.PhoneNumbers.PhoneNumberDesc = Global.PhoneNumbers.PhoneNumberDesc.DefaultInstance
		Public ReadOnly Property HasMobile() As Boolean
			Get
				Return m_hasMobile
			End Get
		End Property
		Public ReadOnly Property Mobile() As Global.PhoneNumbers.PhoneNumberDesc
			Get
				Return mobile_
			End Get
		End Property

		Public Const TollFreeFieldNumber As Integer = 4
		Private m_hasTollFree As Boolean
		Private tollFree_ As Global.PhoneNumbers.PhoneNumberDesc = Global.PhoneNumbers.PhoneNumberDesc.DefaultInstance
		Public ReadOnly Property HasTollFree() As Boolean
			Get
				Return m_hasTollFree
			End Get
		End Property
		Public ReadOnly Property TollFree() As Global.PhoneNumbers.PhoneNumberDesc
			Get
				Return tollFree_
			End Get
		End Property

		Public Const PremiumRateFieldNumber As Integer = 5
		Private m_hasPremiumRate As Boolean
		Private premiumRate_ As Global.PhoneNumbers.PhoneNumberDesc = Global.PhoneNumbers.PhoneNumberDesc.DefaultInstance
		Public ReadOnly Property HasPremiumRate() As Boolean
			Get
				Return m_hasPremiumRate
			End Get
		End Property
		Public ReadOnly Property PremiumRate() As Global.PhoneNumbers.PhoneNumberDesc
			Get
				Return premiumRate_
			End Get
		End Property

		Public Const SharedCostFieldNumber As Integer = 6
		Private m_hasSharedCost As Boolean
		Private sharedCost_ As Global.PhoneNumbers.PhoneNumberDesc = Global.PhoneNumbers.PhoneNumberDesc.DefaultInstance
		Public ReadOnly Property HasSharedCost() As Boolean
			Get
				Return m_hasSharedCost
			End Get
		End Property
		Public ReadOnly Property SharedCost() As Global.PhoneNumbers.PhoneNumberDesc
			Get
				Return sharedCost_
			End Get
		End Property

		Public Const PersonalNumberFieldNumber As Integer = 7
		Private m_hasPersonalNumber As Boolean
		Private personalNumber_ As Global.PhoneNumbers.PhoneNumberDesc = Global.PhoneNumbers.PhoneNumberDesc.DefaultInstance
		Public ReadOnly Property HasPersonalNumber() As Boolean
			Get
				Return m_hasPersonalNumber
			End Get
		End Property
		Public ReadOnly Property PersonalNumber() As Global.PhoneNumbers.PhoneNumberDesc
			Get
				Return personalNumber_
			End Get
		End Property

		Public Const VoipFieldNumber As Integer = 8
		Private m_hasVoip As Boolean
		Private voip_ As Global.PhoneNumbers.PhoneNumberDesc = Global.PhoneNumbers.PhoneNumberDesc.DefaultInstance
		Public ReadOnly Property HasVoip() As Boolean
			Get
				Return m_hasVoip
			End Get
		End Property
		Public ReadOnly Property Voip() As Global.PhoneNumbers.PhoneNumberDesc
			Get
				Return voip_
			End Get
		End Property

		Public Const PagerFieldNumber As Integer = 21
		Private m_hasPager As Boolean
		Private pager_ As Global.PhoneNumbers.PhoneNumberDesc = Global.PhoneNumbers.PhoneNumberDesc.DefaultInstance
		Public ReadOnly Property HasPager() As Boolean
			Get
				Return m_hasPager
			End Get
		End Property
		Public ReadOnly Property Pager() As Global.PhoneNumbers.PhoneNumberDesc
			Get
				Return pager_
			End Get
		End Property

		Public Const UanFieldNumber As Integer = 25
		Private m_hasUan As Boolean
		Private uan_ As Global.PhoneNumbers.PhoneNumberDesc = Global.PhoneNumbers.PhoneNumberDesc.DefaultInstance
		Public ReadOnly Property HasUan() As Boolean
			Get
				Return m_hasUan
			End Get
		End Property
		Public ReadOnly Property Uan() As Global.PhoneNumbers.PhoneNumberDesc
			Get
				Return uan_
			End Get
		End Property

		Public Const EmergencyFieldNumber As Integer = 27
		Private m_hasEmergency As Boolean
		Private emergency_ As Global.PhoneNumbers.PhoneNumberDesc = Global.PhoneNumbers.PhoneNumberDesc.DefaultInstance
		Public ReadOnly Property HasEmergency() As Boolean
			Get
				Return m_hasEmergency
			End Get
		End Property
		Public ReadOnly Property Emergency() As Global.PhoneNumbers.PhoneNumberDesc
			Get
				Return emergency_
			End Get
		End Property

		Public Const VoicemailFieldNumber As Integer = 28
		Private m_hasVoicemail As Boolean
		Private voicemail_ As Global.PhoneNumbers.PhoneNumberDesc = Global.PhoneNumbers.PhoneNumberDesc.DefaultInstance
		Public ReadOnly Property HasVoicemail() As Boolean
			Get
				Return m_hasVoicemail
			End Get
		End Property
		Public ReadOnly Property Voicemail() As Global.PhoneNumbers.PhoneNumberDesc
			Get
				Return voicemail_
			End Get
		End Property

		Public Const NoInternationalDiallingFieldNumber As Integer = 24
		Private m_hasNoInternationalDialling As Boolean
		Private noInternationalDialling_ As Global.PhoneNumbers.PhoneNumberDesc = Global.PhoneNumbers.PhoneNumberDesc.DefaultInstance
		Public ReadOnly Property HasNoInternationalDialling() As Boolean
			Get
				Return m_hasNoInternationalDialling
			End Get
		End Property
		Public ReadOnly Property NoInternationalDialling() As Global.PhoneNumbers.PhoneNumberDesc
			Get
				Return noInternationalDialling_
			End Get
		End Property

		Public Const IdFieldNumber As Integer = 9
		Private m_hasId As Boolean
		Private id_ As String = ""
		Public ReadOnly Property HasId() As Boolean
			Get
				Return m_hasId
			End Get
		End Property
		Public ReadOnly Property Id() As String
			Get
				Return id_
			End Get
		End Property

		Public Const CountryCodeFieldNumber As Integer = 10
		Private m_hasCountryCode As Boolean
		Private countryCode_ As Integer = 0
		Public ReadOnly Property HasCountryCode() As Boolean
			Get
				Return m_hasCountryCode
			End Get
		End Property
		Public ReadOnly Property CountryCode() As Integer
			Get
				Return countryCode_
			End Get
		End Property

		Public Const InternationalPrefixFieldNumber As Integer = 11
		Private m_hasInternationalPrefix As Boolean
		Private internationalPrefix_ As String = ""
		Public ReadOnly Property HasInternationalPrefix() As Boolean
			Get
				Return m_hasInternationalPrefix
			End Get
		End Property
		Public ReadOnly Property InternationalPrefix() As String
			Get
				Return internationalPrefix_
			End Get
		End Property

		Public Const PreferredInternationalPrefixFieldNumber As Integer = 17
		Private m_hasPreferredInternationalPrefix As Boolean
		Private preferredInternationalPrefix_ As String = ""
		Public ReadOnly Property HasPreferredInternationalPrefix() As Boolean
			Get
				Return m_hasPreferredInternationalPrefix
			End Get
		End Property
		Public ReadOnly Property PreferredInternationalPrefix() As String
			Get
				Return preferredInternationalPrefix_
			End Get
		End Property

		Public Const NationalPrefixFieldNumber As Integer = 12
		Private m_hasNationalPrefix As Boolean
		Private nationalPrefix_ As String = ""
		Public ReadOnly Property HasNationalPrefix() As Boolean
			Get
				Return m_hasNationalPrefix
			End Get
		End Property
		Public ReadOnly Property NationalPrefix() As String
			Get
				Return nationalPrefix_
			End Get
		End Property

		Public Const PreferredExtnPrefixFieldNumber As Integer = 13
		Private m_hasPreferredExtnPrefix As Boolean
		Private preferredExtnPrefix_ As String = ""
		Public ReadOnly Property HasPreferredExtnPrefix() As Boolean
			Get
				Return m_hasPreferredExtnPrefix
			End Get
		End Property
		Public ReadOnly Property PreferredExtnPrefix() As String
			Get
				Return preferredExtnPrefix_
			End Get
		End Property

		Public Const NationalPrefixForParsingFieldNumber As Integer = 15
		Private m_hasNationalPrefixForParsing As Boolean
		Private nationalPrefixForParsing_ As String = ""
		Public ReadOnly Property HasNationalPrefixForParsing() As Boolean
			Get
				Return m_hasNationalPrefixForParsing
			End Get
		End Property
		Public ReadOnly Property NationalPrefixForParsing() As String
			Get
				Return nationalPrefixForParsing_
			End Get
		End Property

		Public Const NationalPrefixTransformRuleFieldNumber As Integer = 16
		Private m_hasNationalPrefixTransformRule As Boolean
		Private nationalPrefixTransformRule_ As String = ""
		Public ReadOnly Property HasNationalPrefixTransformRule() As Boolean
			Get
				Return m_hasNationalPrefixTransformRule
			End Get
		End Property
		Public ReadOnly Property NationalPrefixTransformRule() As String
			Get
				Return nationalPrefixTransformRule_
			End Get
		End Property

		Public Const SameMobileAndFixedLinePatternFieldNumber As Integer = 18
		Private m_hasSameMobileAndFixedLinePattern As Boolean
		Private sameMobileAndFixedLinePattern_ As Boolean = False
		Public ReadOnly Property HasSameMobileAndFixedLinePattern() As Boolean
			Get
				Return m_hasSameMobileAndFixedLinePattern
			End Get
		End Property
		Public ReadOnly Property SameMobileAndFixedLinePattern() As Boolean
			Get
				Return sameMobileAndFixedLinePattern_
			End Get
		End Property

		Public Const NumberFormatFieldNumber As Integer = 19
		Private numberFormat_ As New scg.List(Of Global.PhoneNumbers.NumberFormat)()
		Public ReadOnly Property NumberFormatList() As scg.IList(Of Global.PhoneNumbers.NumberFormat)
			Get
				Return numberFormat_
			End Get
		End Property
		Public ReadOnly Property NumberFormatCount() As Integer
			Get
				Return numberFormat_.Count
			End Get
		End Property
		Public Function GetNumberFormat(index As Integer) As Global.PhoneNumbers.NumberFormat
			Return numberFormat_(index)
		End Function

		Public Const IntlNumberFormatFieldNumber As Integer = 20
		Private intlNumberFormat_ As New scg.List(Of Global.PhoneNumbers.NumberFormat)()
		Public ReadOnly Property IntlNumberFormatList() As scg.IList(Of Global.PhoneNumbers.NumberFormat)
			Get
				Return intlNumberFormat_
			End Get
		End Property
		Public ReadOnly Property IntlNumberFormatCount() As Integer
			Get
				Return intlNumberFormat_.Count
			End Get
		End Property
		Public Function GetIntlNumberFormat(index As Integer) As Global.PhoneNumbers.NumberFormat
			Return intlNumberFormat_(index)
		End Function

		Public Const MainCountryForCodeFieldNumber As Integer = 22
		Private m_hasMainCountryForCode As Boolean
		Private mainCountryForCode_ As Boolean = False
		Public ReadOnly Property HasMainCountryForCode() As Boolean
			Get
				Return m_hasMainCountryForCode
			End Get
		End Property
		Public ReadOnly Property MainCountryForCode() As Boolean
			Get
				Return mainCountryForCode_
			End Get
		End Property

		Public Const LeadingDigitsFieldNumber As Integer = 23
		Private m_hasLeadingDigits As Boolean
		Private leadingDigits_ As String = ""
		Public ReadOnly Property HasLeadingDigits() As Boolean
			Get
				Return m_hasLeadingDigits
			End Get
		End Property
		Public ReadOnly Property LeadingDigits() As String
			Get
				Return leadingDigits_
			End Get
		End Property

		Public Const LeadingZeroPossibleFieldNumber As Integer = 26
		Private m_hasLeadingZeroPossible As Boolean
		Private leadingZeroPossible_ As Boolean = False
		Public ReadOnly Property HasLeadingZeroPossible() As Boolean
			Get
				Return m_hasLeadingZeroPossible
			End Get
		End Property
		Public ReadOnly Property LeadingZeroPossible() As Boolean
			Get
				Return leadingZeroPossible_
			End Get
		End Property

		Public ReadOnly Property IsInitialized() As Boolean
			Get
				If Not m_hasGeneralDesc Then
					Return False
				End If
				If Not m_hasFixedLine Then
					Return False
				End If
				If Not m_hasMobile Then
					Return False
				End If
				If Not m_hasTollFree Then
					Return False
				End If
				If Not m_hasPremiumRate Then
					Return False
				End If
				If Not m_hasSharedCost Then
					Return False
				End If
				If Not m_hasPersonalNumber Then
					Return False
				End If
				If Not m_hasVoip Then
					Return False
				End If
				If Not m_hasPager Then
					Return False
				End If
				If Not m_hasUan Then
					Return False
				End If
				If Not m_hasEmergency Then
					Return False
				End If
				If Not m_hasVoicemail Then
					Return False
				End If
				If Not m_hasNoInternationalDialling Then
					Return False
				End If
				If Not m_hasId Then
					Return False
				End If
				If Not m_hasCountryCode Then
					Return False
				End If
				If Not m_hasInternationalPrefix Then
					Return False
				End If
				For Each element As Global.PhoneNumbers.NumberFormat In NumberFormatList
					If Not element.IsInitialized Then
						Return False
					End If
				Next
				For Each element As Global.PhoneNumbers.NumberFormat In IntlNumberFormatList
					If Not element.IsInitialized Then
						Return False
					End If
				Next
				Return True
			End Get
		End Property




		#Region "Lite runtime methods"
		Public Overrides Function GetHashCode() As Integer
			Dim hash As Integer = [GetType]().GetHashCode()
			If m_hasGeneralDesc Then
				hash = hash Xor generalDesc_.GetHashCode()
			End If
			If m_hasFixedLine Then
				hash = hash Xor fixedLine_.GetHashCode()
			End If
			If m_hasMobile Then
				hash = hash Xor mobile_.GetHashCode()
			End If
			If m_hasTollFree Then
				hash = hash Xor tollFree_.GetHashCode()
			End If
			If m_hasPremiumRate Then
				hash = hash Xor premiumRate_.GetHashCode()
			End If
			If m_hasSharedCost Then
				hash = hash Xor sharedCost_.GetHashCode()
			End If
			If m_hasPersonalNumber Then
				hash = hash Xor personalNumber_.GetHashCode()
			End If
			If m_hasVoip Then
				hash = hash Xor voip_.GetHashCode()
			End If
			If m_hasPager Then
				hash = hash Xor pager_.GetHashCode()
			End If
			If m_hasUan Then
				hash = hash Xor uan_.GetHashCode()
			End If
			If m_hasEmergency Then
				hash = hash Xor emergency_.GetHashCode()
			End If
			If m_hasVoicemail Then
				hash = hash Xor voicemail_.GetHashCode()
			End If
			If m_hasNoInternationalDialling Then
				hash = hash Xor noInternationalDialling_.GetHashCode()
			End If
			If m_hasId Then
				hash = hash Xor id_.GetHashCode()
			End If
			If m_hasCountryCode Then
				hash = hash Xor countryCode_.GetHashCode()
			End If
			If m_hasInternationalPrefix Then
				hash = hash Xor internationalPrefix_.GetHashCode()
			End If
			If m_hasPreferredInternationalPrefix Then
				hash = hash Xor preferredInternationalPrefix_.GetHashCode()
			End If
			If m_hasNationalPrefix Then
				hash = hash Xor nationalPrefix_.GetHashCode()
			End If
			If m_hasPreferredExtnPrefix Then
				hash = hash Xor preferredExtnPrefix_.GetHashCode()
			End If
			If m_hasNationalPrefixForParsing Then
				hash = hash Xor nationalPrefixForParsing_.GetHashCode()
			End If
			If m_hasNationalPrefixTransformRule Then
				hash = hash Xor nationalPrefixTransformRule_.GetHashCode()
			End If
			If m_hasSameMobileAndFixedLinePattern Then
				hash = hash Xor sameMobileAndFixedLinePattern_.GetHashCode()
			End If
			For Each i As Global.PhoneNumbers.NumberFormat In numberFormat_
				hash = hash Xor i.GetHashCode()
			Next
			For Each i As Global.PhoneNumbers.NumberFormat In intlNumberFormat_
				hash = hash Xor i.GetHashCode()
			Next
			If m_hasMainCountryForCode Then
				hash = hash Xor mainCountryForCode_.GetHashCode()
			End If
			If m_hasLeadingDigits Then
				hash = hash Xor leadingDigits_.GetHashCode()
			End If
			If m_hasLeadingZeroPossible Then
				hash = hash Xor leadingZeroPossible_.GetHashCode()
			End If
			Return hash
		End Function

		Public Overrides Function Equals(obj As Object) As Boolean
			Dim other As PhoneMetadata = TryCast(obj, PhoneMetadata)
			If other Is Nothing Then
				Return False
			End If
			If m_hasGeneralDesc <> other.hasGeneralDesc OrElse (m_hasGeneralDesc AndAlso Not generalDesc_.Equals(other.generalDesc_)) Then
				Return False
			End If
			If m_hasFixedLine <> other.hasFixedLine OrElse (m_hasFixedLine AndAlso Not fixedLine_.Equals(other.fixedLine_)) Then
				Return False
			End If
			If m_hasMobile <> other.hasMobile OrElse (m_hasMobile AndAlso Not mobile_.Equals(other.mobile_)) Then
				Return False
			End If
			If m_hasTollFree <> other.hasTollFree OrElse (m_hasTollFree AndAlso Not tollFree_.Equals(other.tollFree_)) Then
				Return False
			End If
			If m_hasPremiumRate <> other.hasPremiumRate OrElse (m_hasPremiumRate AndAlso Not premiumRate_.Equals(other.premiumRate_)) Then
				Return False
			End If
			If m_hasSharedCost <> other.hasSharedCost OrElse (m_hasSharedCost AndAlso Not sharedCost_.Equals(other.sharedCost_)) Then
				Return False
			End If
			If m_hasPersonalNumber <> other.hasPersonalNumber OrElse (m_hasPersonalNumber AndAlso Not personalNumber_.Equals(other.personalNumber_)) Then
				Return False
			End If
			If m_hasVoip <> other.hasVoip OrElse (m_hasVoip AndAlso Not voip_.Equals(other.voip_)) Then
				Return False
			End If
			If m_hasPager <> other.hasPager OrElse (m_hasPager AndAlso Not pager_.Equals(other.pager_)) Then
				Return False
			End If
			If m_hasUan <> other.hasUan OrElse (m_hasUan AndAlso Not uan_.Equals(other.uan_)) Then
				Return False
			End If
			If m_hasEmergency <> other.hasEmergency OrElse (m_hasEmergency AndAlso Not emergency_.Equals(other.emergency_)) Then
				Return False
			End If
			If m_hasVoicemail <> other.hasVoicemail OrElse (m_hasVoicemail AndAlso Not voicemail_.Equals(other.voicemail_)) Then
				Return False
			End If
			If m_hasNoInternationalDialling <> other.hasNoInternationalDialling OrElse (m_hasNoInternationalDialling AndAlso Not noInternationalDialling_.Equals(other.noInternationalDialling_)) Then
				Return False
			End If
			If m_hasId <> other.hasId OrElse (m_hasId AndAlso Not id_.Equals(other.id_)) Then
				Return False
			End If
			If m_hasCountryCode <> other.hasCountryCode OrElse (m_hasCountryCode AndAlso Not countryCode_.Equals(other.countryCode_)) Then
				Return False
			End If
			If m_hasInternationalPrefix <> other.hasInternationalPrefix OrElse (m_hasInternationalPrefix AndAlso Not internationalPrefix_.Equals(other.internationalPrefix_)) Then
				Return False
			End If
			If m_hasPreferredInternationalPrefix <> other.hasPreferredInternationalPrefix OrElse (m_hasPreferredInternationalPrefix AndAlso Not preferredInternationalPrefix_.Equals(other.preferredInternationalPrefix_)) Then
				Return False
			End If
			If m_hasNationalPrefix <> other.hasNationalPrefix OrElse (m_hasNationalPrefix AndAlso Not nationalPrefix_.Equals(other.nationalPrefix_)) Then
				Return False
			End If
			If m_hasPreferredExtnPrefix <> other.hasPreferredExtnPrefix OrElse (m_hasPreferredExtnPrefix AndAlso Not preferredExtnPrefix_.Equals(other.preferredExtnPrefix_)) Then
				Return False
			End If
			If m_hasNationalPrefixForParsing <> other.hasNationalPrefixForParsing OrElse (m_hasNationalPrefixForParsing AndAlso Not nationalPrefixForParsing_.Equals(other.nationalPrefixForParsing_)) Then
				Return False
			End If
			If m_hasNationalPrefixTransformRule <> other.hasNationalPrefixTransformRule OrElse (m_hasNationalPrefixTransformRule AndAlso Not nationalPrefixTransformRule_.Equals(other.nationalPrefixTransformRule_)) Then
				Return False
			End If
			If m_hasSameMobileAndFixedLinePattern <> other.hasSameMobileAndFixedLinePattern OrElse (m_hasSameMobileAndFixedLinePattern AndAlso Not sameMobileAndFixedLinePattern_.Equals(other.sameMobileAndFixedLinePattern_)) Then
				Return False
			End If
			If numberFormat_.Count <> other.numberFormat_.Count Then
				Return False
			End If
			For ix As Integer = 0 To numberFormat_.Count - 1
				If Not numberFormat_(ix).Equals(other.numberFormat_(ix)) Then
					Return False
				End If
			Next
			If intlNumberFormat_.Count <> other.intlNumberFormat_.Count Then
				Return False
			End If
			For ix As Integer = 0 To intlNumberFormat_.Count - 1
				If Not intlNumberFormat_(ix).Equals(other.intlNumberFormat_(ix)) Then
					Return False
				End If
			Next
			If m_hasMainCountryForCode <> other.hasMainCountryForCode OrElse (m_hasMainCountryForCode AndAlso Not mainCountryForCode_.Equals(other.mainCountryForCode_)) Then
				Return False
			End If
			If m_hasLeadingDigits <> other.hasLeadingDigits OrElse (m_hasLeadingDigits AndAlso Not leadingDigits_.Equals(other.leadingDigits_)) Then
				Return False
			End If
			If m_hasLeadingZeroPossible <> other.hasLeadingZeroPossible OrElse (m_hasLeadingZeroPossible AndAlso Not leadingZeroPossible_.Equals(other.leadingZeroPossible_)) Then
				Return False
			End If
			Return True
		End Function

		#End Region

		Public Shared Function CreateBuilder() As Builder
			Return New Builder()
		End Function
		Public Function ToBuilder() As Builder
			Return CreateBuilder(Me)
		End Function
		Public Function CreateBuilderForType() As Builder
			Return New Builder()
		End Function
		Public Shared Function CreateBuilder(prototype As PhoneMetadata) As Builder
			Return DirectCast(New Builder().MergeFrom(prototype), Builder)
		End Function

		<System.Diagnostics.DebuggerNonUserCodeAttribute> _
		<System.Runtime.CompilerServices.CompilerGeneratedAttribute> _
		<System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.3.0.277")> _
		Public Partial Class Builder
			Protected ReadOnly Property ThisBuilder() As Builder
				Get
					Return Me
				End Get
			End Property
			Public Sub New()
			End Sub

			Private result As New PhoneMetadata()

			Protected ReadOnly Property MessageBeingBuilt() As PhoneMetadata
				Get
					Return result
				End Get
			End Property

			Public Function Clear() As Builder
				result = New PhoneMetadata()
				Return Me
			End Function

			Public Function Clone() As Builder
				Return New Builder().MergeFrom(result)
			End Function

			Public ReadOnly Property DefaultInstanceForType() As PhoneMetadata
				Get
					Return Global.PhoneNumbers.PhoneMetadata.DefaultInstance
				End Get
			End Property

			Public Function Build() As PhoneMetadata
				Return BuildPartial()
			End Function

			Public Function BuildPartial() As PhoneMetadata
				If result Is Nothing Then
					Throw New Global.System.InvalidOperationException("build() has already been called on this Builder")
				End If


				Dim returnMe As PhoneMetadata = result
				result = Nothing
				Return returnMe
			End Function


			Public Function MergeFrom(other As PhoneMetadata) As Builder
				If other Is Global.PhoneNumbers.PhoneMetadata.DefaultInstance Then
					Return Me
				End If
				If other.HasGeneralDesc Then
					MergeGeneralDesc(other.GeneralDesc)
				End If
				If other.HasFixedLine Then
					MergeFixedLine(other.FixedLine)
				End If
				If other.HasMobile Then
					MergeMobile(other.Mobile)
				End If
				If other.HasTollFree Then
					MergeTollFree(other.TollFree)
				End If
				If other.HasPremiumRate Then
					MergePremiumRate(other.PremiumRate)
				End If
				If other.HasSharedCost Then
					MergeSharedCost(other.SharedCost)
				End If
				If other.HasPersonalNumber Then
					MergePersonalNumber(other.PersonalNumber)
				End If
				If other.HasVoip Then
					MergeVoip(other.Voip)
				End If
				If other.HasPager Then
					MergePager(other.Pager)
				End If
				If other.HasUan Then
					MergeUan(other.Uan)
				End If
				If other.HasEmergency Then
					MergeEmergency(other.Emergency)
				End If
				If other.HasVoicemail Then
					MergeVoicemail(other.Voicemail)
				End If
				If other.HasNoInternationalDialling Then
					MergeNoInternationalDialling(other.NoInternationalDialling)
				End If
				If other.HasId Then
					Id = other.Id
				End If
				If other.HasCountryCode Then
					CountryCode = other.CountryCode
				End If
				If other.HasInternationalPrefix Then
					InternationalPrefix = other.InternationalPrefix
				End If
				If other.HasPreferredInternationalPrefix Then
					PreferredInternationalPrefix = other.PreferredInternationalPrefix
				End If
				If other.HasNationalPrefix Then
					NationalPrefix = other.NationalPrefix
				End If
				If other.HasPreferredExtnPrefix Then
					PreferredExtnPrefix = other.PreferredExtnPrefix
				End If
				If other.HasNationalPrefixForParsing Then
					NationalPrefixForParsing = other.NationalPrefixForParsing
				End If
				If other.HasNationalPrefixTransformRule Then
					NationalPrefixTransformRule = other.NationalPrefixTransformRule
				End If
				If other.HasSameMobileAndFixedLinePattern Then
					SameMobileAndFixedLinePattern = other.SameMobileAndFixedLinePattern
				End If
				If other.numberFormat_.Count <> 0 Then
					result.numberFormat_.AddRange(other.numberFormat_)
				End If
				If other.intlNumberFormat_.Count <> 0 Then
					result.intlNumberFormat_.AddRange(other.intlNumberFormat_)
				End If
				If other.HasMainCountryForCode Then
					MainCountryForCode = other.MainCountryForCode
				End If
				If other.HasLeadingDigits Then
					LeadingDigits = other.LeadingDigits
				End If
				If other.HasLeadingZeroPossible Then
					LeadingZeroPossible = other.LeadingZeroPossible
				End If
				Return Me
			End Function




			Public ReadOnly Property HasGeneralDesc() As Boolean
				Get
					Return result.HasGeneralDesc
				End Get
			End Property
			Public Property GeneralDesc() As Global.PhoneNumbers.PhoneNumberDesc
				Get
					Return result.GeneralDesc
				End Get
				Set
					SetGeneralDesc(value)
				End Set
			End Property
			Public Function SetGeneralDesc(value As Global.PhoneNumbers.PhoneNumberDesc) As Builder
				If value Is Nothing Then
					Throw New Global.System.ArgumentNullException("value")
				End If
				result.hasGeneralDesc = True
				result.generalDesc_ = value
				Return Me
			End Function
			Public Function SetGeneralDesc(builderForValue As Global.PhoneNumbers.PhoneNumberDesc.Builder) As Builder
				If builderForValue Is Nothing Then
					Throw New Global.System.ArgumentNullException("builderForValue")
				End If
				result.hasGeneralDesc = True
				result.generalDesc_ = builderForValue.Build()
				Return Me
			End Function
			Public Function MergeGeneralDesc(value As Global.PhoneNumbers.PhoneNumberDesc) As Builder
				If value Is Nothing Then
					Throw New Global.System.ArgumentNullException("value")
				End If
				If result.HasGeneralDesc AndAlso result.generalDesc_ IsNot Global.PhoneNumbers.PhoneNumberDesc.DefaultInstance Then
					result.generalDesc_ = Global.PhoneNumbers.PhoneNumberDesc.CreateBuilder(result.generalDesc_).MergeFrom(value).BuildPartial()
				Else
					result.generalDesc_ = value
				End If
				result.hasGeneralDesc = True
				Return Me
			End Function
			Public Function ClearGeneralDesc() As Builder
				result.hasGeneralDesc = False
				result.generalDesc_ = Global.PhoneNumbers.PhoneNumberDesc.DefaultInstance
				Return Me
			End Function

			Public ReadOnly Property HasFixedLine() As Boolean
				Get
					Return result.HasFixedLine
				End Get
			End Property
			Public Property FixedLine() As Global.PhoneNumbers.PhoneNumberDesc
				Get
					Return result.FixedLine
				End Get
				Set
					SetFixedLine(value)
				End Set
			End Property
			Public Function SetFixedLine(value As Global.PhoneNumbers.PhoneNumberDesc) As Builder
				If value Is Nothing Then
					Throw New Global.System.ArgumentNullException("value")
				End If
				result.hasFixedLine = True
				result.fixedLine_ = value
				Return Me
			End Function
			Public Function SetFixedLine(builderForValue As Global.PhoneNumbers.PhoneNumberDesc.Builder) As Builder
				If builderForValue Is Nothing Then
					Throw New Global.System.ArgumentNullException("builderForValue")
				End If
				result.hasFixedLine = True
				result.fixedLine_ = builderForValue.Build()
				Return Me
			End Function
			Public Function MergeFixedLine(value As Global.PhoneNumbers.PhoneNumberDesc) As Builder
				If value Is Nothing Then
					Throw New Global.System.ArgumentNullException("value")
				End If
				If result.HasFixedLine AndAlso result.fixedLine_ IsNot Global.PhoneNumbers.PhoneNumberDesc.DefaultInstance Then
					result.fixedLine_ = Global.PhoneNumbers.PhoneNumberDesc.CreateBuilder(result.fixedLine_).MergeFrom(value).BuildPartial()
				Else
					result.fixedLine_ = value
				End If
				result.hasFixedLine = True
				Return Me
			End Function
			Public Function ClearFixedLine() As Builder
				result.hasFixedLine = False
				result.fixedLine_ = Global.PhoneNumbers.PhoneNumberDesc.DefaultInstance
				Return Me
			End Function

			Public ReadOnly Property HasMobile() As Boolean
				Get
					Return result.HasMobile
				End Get
			End Property
			Public Property Mobile() As Global.PhoneNumbers.PhoneNumberDesc
				Get
					Return result.Mobile
				End Get
				Set
					SetMobile(value)
				End Set
			End Property
			Public Function SetMobile(value As Global.PhoneNumbers.PhoneNumberDesc) As Builder
				If value Is Nothing Then
					Throw New Global.System.ArgumentNullException("value")
				End If
				result.hasMobile = True
				result.mobile_ = value
				Return Me
			End Function
			Public Function SetMobile(builderForValue As Global.PhoneNumbers.PhoneNumberDesc.Builder) As Builder
				If builderForValue Is Nothing Then
					Throw New Global.System.ArgumentNullException("builderForValue")
				End If
				result.hasMobile = True
				result.mobile_ = builderForValue.Build()
				Return Me
			End Function
			Public Function MergeMobile(value As Global.PhoneNumbers.PhoneNumberDesc) As Builder
				If value Is Nothing Then
					Throw New Global.System.ArgumentNullException("value")
				End If
				If result.HasMobile AndAlso result.mobile_ IsNot Global.PhoneNumbers.PhoneNumberDesc.DefaultInstance Then
					result.mobile_ = Global.PhoneNumbers.PhoneNumberDesc.CreateBuilder(result.mobile_).MergeFrom(value).BuildPartial()
				Else
					result.mobile_ = value
				End If
				result.hasMobile = True
				Return Me
			End Function
			Public Function ClearMobile() As Builder
				result.hasMobile = False
				result.mobile_ = Global.PhoneNumbers.PhoneNumberDesc.DefaultInstance
				Return Me
			End Function

			Public ReadOnly Property HasTollFree() As Boolean
				Get
					Return result.HasTollFree
				End Get
			End Property
			Public Property TollFree() As Global.PhoneNumbers.PhoneNumberDesc
				Get
					Return result.TollFree
				End Get
				Set
					SetTollFree(value)
				End Set
			End Property
			Public Function SetTollFree(value As Global.PhoneNumbers.PhoneNumberDesc) As Builder
				If value Is Nothing Then
					Throw New Global.System.ArgumentNullException("value")
				End If
				result.hasTollFree = True
				result.tollFree_ = value
				Return Me
			End Function
			Public Function SetTollFree(builderForValue As Global.PhoneNumbers.PhoneNumberDesc.Builder) As Builder
				If builderForValue Is Nothing Then
					Throw New Global.System.ArgumentNullException("builderForValue")
				End If
				result.hasTollFree = True
				result.tollFree_ = builderForValue.Build()
				Return Me
			End Function
			Public Function MergeTollFree(value As Global.PhoneNumbers.PhoneNumberDesc) As Builder
				If value Is Nothing Then
					Throw New Global.System.ArgumentNullException("value")
				End If
				If result.HasTollFree AndAlso result.tollFree_ IsNot Global.PhoneNumbers.PhoneNumberDesc.DefaultInstance Then
					result.tollFree_ = Global.PhoneNumbers.PhoneNumberDesc.CreateBuilder(result.tollFree_).MergeFrom(value).BuildPartial()
				Else
					result.tollFree_ = value
				End If
				result.hasTollFree = True
				Return Me
			End Function
			Public Function ClearTollFree() As Builder
				result.hasTollFree = False
				result.tollFree_ = Global.PhoneNumbers.PhoneNumberDesc.DefaultInstance
				Return Me
			End Function

			Public ReadOnly Property HasPremiumRate() As Boolean
				Get
					Return result.HasPremiumRate
				End Get
			End Property
			Public Property PremiumRate() As Global.PhoneNumbers.PhoneNumberDesc
				Get
					Return result.PremiumRate
				End Get
				Set
					SetPremiumRate(value)
				End Set
			End Property
			Public Function SetPremiumRate(value As Global.PhoneNumbers.PhoneNumberDesc) As Builder
				If value Is Nothing Then
					Throw New Global.System.ArgumentNullException("value")
				End If
				result.hasPremiumRate = True
				result.premiumRate_ = value
				Return Me
			End Function
			Public Function SetPremiumRate(builderForValue As Global.PhoneNumbers.PhoneNumberDesc.Builder) As Builder
				If builderForValue Is Nothing Then
					Throw New Global.System.ArgumentNullException("builderForValue")
				End If
				result.hasPremiumRate = True
				result.premiumRate_ = builderForValue.Build()
				Return Me
			End Function
			Public Function MergePremiumRate(value As Global.PhoneNumbers.PhoneNumberDesc) As Builder
				If value Is Nothing Then
					Throw New Global.System.ArgumentNullException("value")
				End If
				If result.HasPremiumRate AndAlso result.premiumRate_ IsNot Global.PhoneNumbers.PhoneNumberDesc.DefaultInstance Then
					result.premiumRate_ = Global.PhoneNumbers.PhoneNumberDesc.CreateBuilder(result.premiumRate_).MergeFrom(value).BuildPartial()
				Else
					result.premiumRate_ = value
				End If
				result.hasPremiumRate = True
				Return Me
			End Function
			Public Function ClearPremiumRate() As Builder
				result.hasPremiumRate = False
				result.premiumRate_ = Global.PhoneNumbers.PhoneNumberDesc.DefaultInstance
				Return Me
			End Function

			Public ReadOnly Property HasSharedCost() As Boolean
				Get
					Return result.HasSharedCost
				End Get
			End Property
			Public Property SharedCost() As Global.PhoneNumbers.PhoneNumberDesc
				Get
					Return result.SharedCost
				End Get
				Set
					SetSharedCost(value)
				End Set
			End Property
			Public Function SetSharedCost(value As Global.PhoneNumbers.PhoneNumberDesc) As Builder
				If value Is Nothing Then
					Throw New Global.System.ArgumentNullException("value")
				End If
				result.hasSharedCost = True
				result.sharedCost_ = value
				Return Me
			End Function
			Public Function SetSharedCost(builderForValue As Global.PhoneNumbers.PhoneNumberDesc.Builder) As Builder
				If builderForValue Is Nothing Then
					Throw New Global.System.ArgumentNullException("builderForValue")
				End If
				result.hasSharedCost = True
				result.sharedCost_ = builderForValue.Build()
				Return Me
			End Function
			Public Function MergeSharedCost(value As Global.PhoneNumbers.PhoneNumberDesc) As Builder
				If value Is Nothing Then
					Throw New Global.System.ArgumentNullException("value")
				End If
				If result.HasSharedCost AndAlso result.sharedCost_ IsNot Global.PhoneNumbers.PhoneNumberDesc.DefaultInstance Then
					result.sharedCost_ = Global.PhoneNumbers.PhoneNumberDesc.CreateBuilder(result.sharedCost_).MergeFrom(value).BuildPartial()
				Else
					result.sharedCost_ = value
				End If
				result.hasSharedCost = True
				Return Me
			End Function
			Public Function ClearSharedCost() As Builder
				result.hasSharedCost = False
				result.sharedCost_ = Global.PhoneNumbers.PhoneNumberDesc.DefaultInstance
				Return Me
			End Function

			Public ReadOnly Property HasPersonalNumber() As Boolean
				Get
					Return result.HasPersonalNumber
				End Get
			End Property
			Public Property PersonalNumber() As Global.PhoneNumbers.PhoneNumberDesc
				Get
					Return result.PersonalNumber
				End Get
				Set
					SetPersonalNumber(value)
				End Set
			End Property
			Public Function SetPersonalNumber(value As Global.PhoneNumbers.PhoneNumberDesc) As Builder
				If value Is Nothing Then
					Throw New Global.System.ArgumentNullException("value")
				End If
				result.hasPersonalNumber = True
				result.personalNumber_ = value
				Return Me
			End Function
			Public Function SetPersonalNumber(builderForValue As Global.PhoneNumbers.PhoneNumberDesc.Builder) As Builder
				If builderForValue Is Nothing Then
					Throw New Global.System.ArgumentNullException("builderForValue")
				End If
				result.hasPersonalNumber = True
				result.personalNumber_ = builderForValue.Build()
				Return Me
			End Function
			Public Function MergePersonalNumber(value As Global.PhoneNumbers.PhoneNumberDesc) As Builder
				If value Is Nothing Then
					Throw New Global.System.ArgumentNullException("value")
				End If
				If result.HasPersonalNumber AndAlso result.personalNumber_ IsNot Global.PhoneNumbers.PhoneNumberDesc.DefaultInstance Then
					result.personalNumber_ = Global.PhoneNumbers.PhoneNumberDesc.CreateBuilder(result.personalNumber_).MergeFrom(value).BuildPartial()
				Else
					result.personalNumber_ = value
				End If
				result.hasPersonalNumber = True
				Return Me
			End Function
			Public Function ClearPersonalNumber() As Builder
				result.hasPersonalNumber = False
				result.personalNumber_ = Global.PhoneNumbers.PhoneNumberDesc.DefaultInstance
				Return Me
			End Function

			Public ReadOnly Property HasVoip() As Boolean
				Get
					Return result.HasVoip
				End Get
			End Property
			Public Property Voip() As Global.PhoneNumbers.PhoneNumberDesc
				Get
					Return result.Voip
				End Get
				Set
					SetVoip(value)
				End Set
			End Property
			Public Function SetVoip(value As Global.PhoneNumbers.PhoneNumberDesc) As Builder
				If value Is Nothing Then
					Throw New Global.System.ArgumentNullException("value")
				End If
				result.hasVoip = True
				result.voip_ = value
				Return Me
			End Function
			Public Function SetVoip(builderForValue As Global.PhoneNumbers.PhoneNumberDesc.Builder) As Builder
				If builderForValue Is Nothing Then
					Throw New Global.System.ArgumentNullException("builderForValue")
				End If
				result.hasVoip = True
				result.voip_ = builderForValue.Build()
				Return Me
			End Function
			Public Function MergeVoip(value As Global.PhoneNumbers.PhoneNumberDesc) As Builder
				If value Is Nothing Then
					Throw New Global.System.ArgumentNullException("value")
				End If
				If result.HasVoip AndAlso result.voip_ IsNot Global.PhoneNumbers.PhoneNumberDesc.DefaultInstance Then
					result.voip_ = Global.PhoneNumbers.PhoneNumberDesc.CreateBuilder(result.voip_).MergeFrom(value).BuildPartial()
				Else
					result.voip_ = value
				End If
				result.hasVoip = True
				Return Me
			End Function
			Public Function ClearVoip() As Builder
				result.hasVoip = False
				result.voip_ = Global.PhoneNumbers.PhoneNumberDesc.DefaultInstance
				Return Me
			End Function

			Public ReadOnly Property HasPager() As Boolean
				Get
					Return result.HasPager
				End Get
			End Property
			Public Property Pager() As Global.PhoneNumbers.PhoneNumberDesc
				Get
					Return result.Pager
				End Get
				Set
					SetPager(value)
				End Set
			End Property
			Public Function SetPager(value As Global.PhoneNumbers.PhoneNumberDesc) As Builder
				If value Is Nothing Then
					Throw New Global.System.ArgumentNullException("value")
				End If
				result.hasPager = True
				result.pager_ = value
				Return Me
			End Function
			Public Function SetPager(builderForValue As Global.PhoneNumbers.PhoneNumberDesc.Builder) As Builder
				If builderForValue Is Nothing Then
					Throw New Global.System.ArgumentNullException("builderForValue")
				End If
				result.hasPager = True
				result.pager_ = builderForValue.Build()
				Return Me
			End Function
			Public Function MergePager(value As Global.PhoneNumbers.PhoneNumberDesc) As Builder
				If value Is Nothing Then
					Throw New Global.System.ArgumentNullException("value")
				End If
				If result.HasPager AndAlso result.pager_ IsNot Global.PhoneNumbers.PhoneNumberDesc.DefaultInstance Then
					result.pager_ = Global.PhoneNumbers.PhoneNumberDesc.CreateBuilder(result.pager_).MergeFrom(value).BuildPartial()
				Else
					result.pager_ = value
				End If
				result.hasPager = True
				Return Me
			End Function
			Public Function ClearPager() As Builder
				result.hasPager = False
				result.pager_ = Global.PhoneNumbers.PhoneNumberDesc.DefaultInstance
				Return Me
			End Function

			Public ReadOnly Property HasUan() As Boolean
				Get
					Return result.HasUan
				End Get
			End Property
			Public Property Uan() As Global.PhoneNumbers.PhoneNumberDesc
				Get
					Return result.Uan
				End Get
				Set
					SetUan(value)
				End Set
			End Property
			Public Function SetUan(value As Global.PhoneNumbers.PhoneNumberDesc) As Builder
				If value Is Nothing Then
					Throw New Global.System.ArgumentNullException("value")
				End If
				result.hasUan = True
				result.uan_ = value
				Return Me
			End Function
			Public Function SetUan(builderForValue As Global.PhoneNumbers.PhoneNumberDesc.Builder) As Builder
				If builderForValue Is Nothing Then
					Throw New Global.System.ArgumentNullException("builderForValue")
				End If
				result.hasUan = True
				result.uan_ = builderForValue.Build()
				Return Me
			End Function
			Public Function MergeUan(value As Global.PhoneNumbers.PhoneNumberDesc) As Builder
				If value Is Nothing Then
					Throw New Global.System.ArgumentNullException("value")
				End If
				If result.HasUan AndAlso result.uan_ IsNot Global.PhoneNumbers.PhoneNumberDesc.DefaultInstance Then
					result.uan_ = Global.PhoneNumbers.PhoneNumberDesc.CreateBuilder(result.uan_).MergeFrom(value).BuildPartial()
				Else
					result.uan_ = value
				End If
				result.hasUan = True
				Return Me
			End Function
			Public Function ClearUan() As Builder
				result.hasUan = False
				result.uan_ = Global.PhoneNumbers.PhoneNumberDesc.DefaultInstance
				Return Me
			End Function

			Public ReadOnly Property HasEmergency() As Boolean
				Get
					Return result.HasEmergency
				End Get
			End Property
			Public Property Emergency() As Global.PhoneNumbers.PhoneNumberDesc
				Get
					Return result.Emergency
				End Get
				Set
					SetEmergency(value)
				End Set
			End Property
			Public Function SetEmergency(value As Global.PhoneNumbers.PhoneNumberDesc) As Builder
				If value Is Nothing Then
					Throw New Global.System.ArgumentNullException("value")
				End If
				result.hasEmergency = True
				result.emergency_ = value
				Return Me
			End Function
			Public Function SetEmergency(builderForValue As Global.PhoneNumbers.PhoneNumberDesc.Builder) As Builder
				If builderForValue Is Nothing Then
					Throw New Global.System.ArgumentNullException("builderForValue")
				End If
				result.hasEmergency = True
				result.emergency_ = builderForValue.Build()
				Return Me
			End Function
			Public Function MergeEmergency(value As Global.PhoneNumbers.PhoneNumberDesc) As Builder
				If value Is Nothing Then
					Throw New Global.System.ArgumentNullException("value")
				End If
				If result.HasEmergency AndAlso result.emergency_ IsNot Global.PhoneNumbers.PhoneNumberDesc.DefaultInstance Then
					result.emergency_ = Global.PhoneNumbers.PhoneNumberDesc.CreateBuilder(result.emergency_).MergeFrom(value).BuildPartial()
				Else
					result.emergency_ = value
				End If
				result.hasEmergency = True
				Return Me
			End Function
			Public Function ClearEmergency() As Builder
				result.hasEmergency = False
				result.emergency_ = Global.PhoneNumbers.PhoneNumberDesc.DefaultInstance
				Return Me
			End Function

			Public ReadOnly Property HasVoicemail() As Boolean
				Get
					Return result.HasVoicemail
				End Get
			End Property
			Public Property Voicemail() As Global.PhoneNumbers.PhoneNumberDesc
				Get
					Return result.Voicemail
				End Get
				Set
					SetVoicemail(value)
				End Set
			End Property
			Public Function SetVoicemail(value As Global.PhoneNumbers.PhoneNumberDesc) As Builder
				If value Is Nothing Then
					Throw New Global.System.ArgumentNullException("value")
				End If
				result.hasVoicemail = True
				result.voicemail_ = value
				Return Me
			End Function
			Public Function SetVoicemail(builderForValue As Global.PhoneNumbers.PhoneNumberDesc.Builder) As Builder
				If builderForValue Is Nothing Then
					Throw New Global.System.ArgumentNullException("builderForValue")
				End If
				result.hasVoicemail = True
				result.voicemail_ = builderForValue.Build()
				Return Me
			End Function
			Public Function MergeVoicemail(value As Global.PhoneNumbers.PhoneNumberDesc) As Builder
				If value Is Nothing Then
					Throw New Global.System.ArgumentNullException("value")
				End If
				If result.HasVoicemail AndAlso result.voicemail_ IsNot Global.PhoneNumbers.PhoneNumberDesc.DefaultInstance Then
					result.voicemail_ = Global.PhoneNumbers.PhoneNumberDesc.CreateBuilder(result.voicemail_).MergeFrom(value).BuildPartial()
				Else
					result.voicemail_ = value
				End If
				result.hasVoicemail = True
				Return Me
			End Function
			Public Function ClearVoicemail() As Builder
				result.hasVoicemail = False
				result.voicemail_ = Global.PhoneNumbers.PhoneNumberDesc.DefaultInstance
				Return Me
			End Function

			Public ReadOnly Property HasNoInternationalDialling() As Boolean
				Get
					Return result.HasNoInternationalDialling
				End Get
			End Property
			Public Property NoInternationalDialling() As Global.PhoneNumbers.PhoneNumberDesc
				Get
					Return result.NoInternationalDialling
				End Get
				Set
					SetNoInternationalDialling(value)
				End Set
			End Property
			Public Function SetNoInternationalDialling(value As Global.PhoneNumbers.PhoneNumberDesc) As Builder
				If value Is Nothing Then
					Throw New Global.System.ArgumentNullException("value")
				End If
				result.hasNoInternationalDialling = True
				result.noInternationalDialling_ = value
				Return Me
			End Function
			Public Function SetNoInternationalDialling(builderForValue As Global.PhoneNumbers.PhoneNumberDesc.Builder) As Builder
				If builderForValue Is Nothing Then
					Throw New Global.System.ArgumentNullException("builderForValue")
				End If
				result.hasNoInternationalDialling = True
				result.noInternationalDialling_ = builderForValue.Build()
				Return Me
			End Function
			Public Function MergeNoInternationalDialling(value As Global.PhoneNumbers.PhoneNumberDesc) As Builder
				If value Is Nothing Then
					Throw New Global.System.ArgumentNullException("value")
				End If
				If result.HasNoInternationalDialling AndAlso result.noInternationalDialling_ IsNot Global.PhoneNumbers.PhoneNumberDesc.DefaultInstance Then
					result.noInternationalDialling_ = Global.PhoneNumbers.PhoneNumberDesc.CreateBuilder(result.noInternationalDialling_).MergeFrom(value).BuildPartial()
				Else
					result.noInternationalDialling_ = value
				End If
				result.hasNoInternationalDialling = True
				Return Me
			End Function
			Public Function ClearNoInternationalDialling() As Builder
				result.hasNoInternationalDialling = False
				result.noInternationalDialling_ = Global.PhoneNumbers.PhoneNumberDesc.DefaultInstance
				Return Me
			End Function

			Public ReadOnly Property HasId() As Boolean
				Get
					Return result.HasId
				End Get
			End Property
			Public Property Id() As String
				Get
					Return result.Id
				End Get
				Set
					SetId(value)
				End Set
			End Property
			Public Function SetId(value As String) As Builder
				If value Is Nothing Then
					Throw New Global.System.ArgumentNullException("value")
				End If
				result.hasId = True
				result.id_ = value
				Return Me
			End Function
			Public Function ClearId() As Builder
				result.hasId = False
				result.id_ = ""
				Return Me
			End Function

			Public ReadOnly Property HasCountryCode() As Boolean
				Get
					Return result.HasCountryCode
				End Get
			End Property
			Public Property CountryCode() As Integer
				Get
					Return result.CountryCode
				End Get
				Set
					SetCountryCode(value)
				End Set
			End Property
			Public Function SetCountryCode(value As Integer) As Builder
				result.hasCountryCode = True
				result.countryCode_ = value
				Return Me
			End Function
			Public Function ClearCountryCode() As Builder
				result.hasCountryCode = False
				result.countryCode_ = 0
				Return Me
			End Function

			Public ReadOnly Property HasInternationalPrefix() As Boolean
				Get
					Return result.HasInternationalPrefix
				End Get
			End Property
			Public Property InternationalPrefix() As String
				Get
					Return result.InternationalPrefix
				End Get
				Set
					SetInternationalPrefix(value)
				End Set
			End Property
			Public Function SetInternationalPrefix(value As String) As Builder
				If value Is Nothing Then
					Throw New Global.System.ArgumentNullException("value")
				End If
				result.hasInternationalPrefix = True
				result.internationalPrefix_ = value
				Return Me
			End Function
			Public Function ClearInternationalPrefix() As Builder
				result.hasInternationalPrefix = False
				result.internationalPrefix_ = ""
				Return Me
			End Function

			Public ReadOnly Property HasPreferredInternationalPrefix() As Boolean
				Get
					Return result.HasPreferredInternationalPrefix
				End Get
			End Property
			Public Property PreferredInternationalPrefix() As String
				Get
					Return result.PreferredInternationalPrefix
				End Get
				Set
					SetPreferredInternationalPrefix(value)
				End Set
			End Property
			Public Function SetPreferredInternationalPrefix(value As String) As Builder
				If value Is Nothing Then
					Throw New Global.System.ArgumentNullException("value")
				End If
				result.hasPreferredInternationalPrefix = True
				result.preferredInternationalPrefix_ = value
				Return Me
			End Function
			Public Function ClearPreferredInternationalPrefix() As Builder
				result.hasPreferredInternationalPrefix = False
				result.preferredInternationalPrefix_ = ""
				Return Me
			End Function

			Public ReadOnly Property HasNationalPrefix() As Boolean
				Get
					Return result.HasNationalPrefix
				End Get
			End Property
			Public Property NationalPrefix() As String
				Get
					Return result.NationalPrefix
				End Get
				Set
					SetNationalPrefix(value)
				End Set
			End Property
			Public Function SetNationalPrefix(value As String) As Builder
				If value Is Nothing Then
					Throw New Global.System.ArgumentNullException("value")
				End If
				result.hasNationalPrefix = True
				result.nationalPrefix_ = value
				Return Me
			End Function
			Public Function ClearNationalPrefix() As Builder
				result.hasNationalPrefix = False
				result.nationalPrefix_ = ""
				Return Me
			End Function

			Public ReadOnly Property HasPreferredExtnPrefix() As Boolean
				Get
					Return result.HasPreferredExtnPrefix
				End Get
			End Property
			Public Property PreferredExtnPrefix() As String
				Get
					Return result.PreferredExtnPrefix
				End Get
				Set
					SetPreferredExtnPrefix(value)
				End Set
			End Property
			Public Function SetPreferredExtnPrefix(value As String) As Builder
				If value Is Nothing Then
					Throw New Global.System.ArgumentNullException("value")
				End If
				result.hasPreferredExtnPrefix = True
				result.preferredExtnPrefix_ = value
				Return Me
			End Function
			Public Function ClearPreferredExtnPrefix() As Builder
				result.hasPreferredExtnPrefix = False
				result.preferredExtnPrefix_ = ""
				Return Me
			End Function

			Public ReadOnly Property HasNationalPrefixForParsing() As Boolean
				Get
					Return result.HasNationalPrefixForParsing
				End Get
			End Property
			Public Property NationalPrefixForParsing() As String
				Get
					Return result.NationalPrefixForParsing
				End Get
				Set
					SetNationalPrefixForParsing(value)
				End Set
			End Property
			Public Function SetNationalPrefixForParsing(value As String) As Builder
				If value Is Nothing Then
					Throw New Global.System.ArgumentNullException("value")
				End If
				result.hasNationalPrefixForParsing = True
				result.nationalPrefixForParsing_ = value
				Return Me
			End Function
			Public Function ClearNationalPrefixForParsing() As Builder
				result.hasNationalPrefixForParsing = False
				result.nationalPrefixForParsing_ = ""
				Return Me
			End Function

			Public ReadOnly Property HasNationalPrefixTransformRule() As Boolean
				Get
					Return result.HasNationalPrefixTransformRule
				End Get
			End Property
			Public Property NationalPrefixTransformRule() As String
				Get
					Return result.NationalPrefixTransformRule
				End Get
				Set
					SetNationalPrefixTransformRule(value)
				End Set
			End Property
			Public Function SetNationalPrefixTransformRule(value As String) As Builder
				If value Is Nothing Then
					Throw New Global.System.ArgumentNullException("value")
				End If
				result.hasNationalPrefixTransformRule = True
				result.nationalPrefixTransformRule_ = value
				Return Me
			End Function
			Public Function ClearNationalPrefixTransformRule() As Builder
				result.hasNationalPrefixTransformRule = False
				result.nationalPrefixTransformRule_ = ""
				Return Me
			End Function

			Public ReadOnly Property HasSameMobileAndFixedLinePattern() As Boolean
				Get
					Return result.HasSameMobileAndFixedLinePattern
				End Get
			End Property
			Public Property SameMobileAndFixedLinePattern() As Boolean
				Get
					Return result.SameMobileAndFixedLinePattern
				End Get
				Set
					SetSameMobileAndFixedLinePattern(value)
				End Set
			End Property
			Public Function SetSameMobileAndFixedLinePattern(value As Boolean) As Builder
				result.hasSameMobileAndFixedLinePattern = True
				result.sameMobileAndFixedLinePattern_ = value
				Return Me
			End Function
			Public Function ClearSameMobileAndFixedLinePattern() As Builder
				result.hasSameMobileAndFixedLinePattern = False
				result.sameMobileAndFixedLinePattern_ = False
				Return Me
			End Function

			Public ReadOnly Property NumberFormatList() As scg.IList(Of Global.PhoneNumbers.NumberFormat)
				Get
					Return result.numberFormat_
				End Get
			End Property
			Public ReadOnly Property NumberFormatCount() As Integer
				Get
					Return result.NumberFormatCount
				End Get
			End Property
			Public Function GetNumberFormat(index As Integer) As Global.PhoneNumbers.NumberFormat
				Return result.GetNumberFormat(index)
			End Function
			Public Function SetNumberFormat(index As Integer, value As Global.PhoneNumbers.NumberFormat) As Builder
				If value Is Nothing Then
					Throw New Global.System.ArgumentNullException("value")
				End If
				result.numberFormat_(index) = value
				Return Me
			End Function
			Public Function SetNumberFormat(index As Integer, builderForValue As Global.PhoneNumbers.NumberFormat.Builder) As Builder
				If builderForValue Is Nothing Then
					Throw New Global.System.ArgumentNullException("builderForValue")
				End If
				result.numberFormat_(index) = builderForValue.Build()
				Return Me
			End Function
			Public Function AddNumberFormat(value As Global.PhoneNumbers.NumberFormat) As Builder
				If value Is Nothing Then
					Throw New Global.System.ArgumentNullException("value")
				End If
				result.numberFormat_.Add(value)
				Return Me
			End Function
			Public Function AddNumberFormat(builderForValue As Global.PhoneNumbers.NumberFormat.Builder) As Builder
				If builderForValue Is Nothing Then
					Throw New Global.System.ArgumentNullException("builderForValue")
				End If
				result.numberFormat_.Add(builderForValue.Build())
				Return Me
			End Function
			Public Function AddRangeNumberFormat(values As scg.IEnumerable(Of Global.PhoneNumbers.NumberFormat)) As Builder
				result.numberFormat_.AddRange(values)
				Return Me
			End Function
			Public Function ClearNumberFormat() As Builder
				result.numberFormat_.Clear()
				Return Me
			End Function

			Public ReadOnly Property IntlNumberFormatList() As scg.IList(Of Global.PhoneNumbers.NumberFormat)
				Get
					Return result.intlNumberFormat_
				End Get
			End Property
			Public ReadOnly Property IntlNumberFormatCount() As Integer
				Get
					Return result.IntlNumberFormatCount
				End Get
			End Property
			Public Function GetIntlNumberFormat(index As Integer) As Global.PhoneNumbers.NumberFormat
				Return result.GetIntlNumberFormat(index)
			End Function
			Public Function SetIntlNumberFormat(index As Integer, value As Global.PhoneNumbers.NumberFormat) As Builder
				If value Is Nothing Then
					Throw New Global.System.ArgumentNullException("value")
				End If
				result.intlNumberFormat_(index) = value
				Return Me
			End Function
			Public Function SetIntlNumberFormat(index As Integer, builderForValue As Global.PhoneNumbers.NumberFormat.Builder) As Builder
				If builderForValue Is Nothing Then
					Throw New Global.System.ArgumentNullException("builderForValue")
				End If
				result.intlNumberFormat_(index) = builderForValue.Build()
				Return Me
			End Function
			Public Function AddIntlNumberFormat(value As Global.PhoneNumbers.NumberFormat) As Builder
				If value Is Nothing Then
					Throw New Global.System.ArgumentNullException("value")
				End If
				result.intlNumberFormat_.Add(value)
				Return Me
			End Function
			Public Function AddIntlNumberFormat(builderForValue As Global.PhoneNumbers.NumberFormat.Builder) As Builder
				If builderForValue Is Nothing Then
					Throw New Global.System.ArgumentNullException("builderForValue")
				End If
				result.intlNumberFormat_.Add(builderForValue.Build())
				Return Me
			End Function
			Public Function AddRangeIntlNumberFormat(values As scg.IEnumerable(Of Global.PhoneNumbers.NumberFormat)) As Builder
				result.intlNumberFormat_.AddRange(values)
				Return Me
			End Function
			Public Function ClearIntlNumberFormat() As Builder
				result.intlNumberFormat_.Clear()
				Return Me
			End Function

			Public ReadOnly Property HasMainCountryForCode() As Boolean
				Get
					Return result.HasMainCountryForCode
				End Get
			End Property
			Public Property MainCountryForCode() As Boolean
				Get
					Return result.MainCountryForCode
				End Get
				Set
					SetMainCountryForCode(value)
				End Set
			End Property
			Public Function SetMainCountryForCode(value As Boolean) As Builder
				result.hasMainCountryForCode = True
				result.mainCountryForCode_ = value
				Return Me
			End Function
			Public Function ClearMainCountryForCode() As Builder
				result.hasMainCountryForCode = False
				result.mainCountryForCode_ = False
				Return Me
			End Function

			Public ReadOnly Property HasLeadingDigits() As Boolean
				Get
					Return result.HasLeadingDigits
				End Get
			End Property
			Public Property LeadingDigits() As String
				Get
					Return result.LeadingDigits
				End Get
				Set
					SetLeadingDigits(value)
				End Set
			End Property
			Public Function SetLeadingDigits(value As String) As Builder
				If value Is Nothing Then
					Throw New Global.System.ArgumentNullException("value")
				End If
				result.hasLeadingDigits = True
				result.leadingDigits_ = value
				Return Me
			End Function
			Public Function ClearLeadingDigits() As Builder
				result.hasLeadingDigits = False
				result.leadingDigits_ = ""
				Return Me
			End Function

			Public ReadOnly Property HasLeadingZeroPossible() As Boolean
				Get
					Return result.HasLeadingZeroPossible
				End Get
			End Property
			Public Property LeadingZeroPossible() As Boolean
				Get
					Return result.LeadingZeroPossible
				End Get
				Set
					SetLeadingZeroPossible(value)
				End Set
			End Property
			Public Function SetLeadingZeroPossible(value As Boolean) As Builder
				result.hasLeadingZeroPossible = True
				result.leadingZeroPossible_ = value
				Return Me
			End Function
			Public Function ClearLeadingZeroPossible() As Builder
				result.hasLeadingZeroPossible = False
				result.leadingZeroPossible_ = False
				Return Me
			End Function
		End Class
		Shared Sub New()
			Object.ReferenceEquals(Global.PhoneNumbers.Phonemetadata.Descriptor, Nothing)
		End Sub
	End Class

	<System.Diagnostics.DebuggerNonUserCodeAttribute> _
	<System.Runtime.CompilerServices.CompilerGeneratedAttribute> _
	<System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.3.0.277")> _
	Public Partial Class PhoneMetadataCollection
		Private Shared ReadOnly m_defaultInstance As PhoneMetadataCollection = New Builder().BuildPartial()
		Public Shared ReadOnly Property DefaultInstance() As PhoneMetadataCollection
			Get
				Return m_defaultInstance
			End Get
		End Property

		Public ReadOnly Property DefaultInstanceForType() As PhoneMetadataCollection
			Get
				Return m_defaultInstance
			End Get
		End Property

		Protected ReadOnly Property ThisMessage() As PhoneMetadataCollection
			Get
				Return Me
			End Get
		End Property

		Public Const MetadataFieldNumber As Integer = 1
		Private metadata_ As New scg.List(Of Global.PhoneNumbers.PhoneMetadata)()
		Public ReadOnly Property MetadataList() As scg.IList(Of Global.PhoneNumbers.PhoneMetadata)
			Get
				Return metadata_
			End Get
		End Property
		Public ReadOnly Property MetadataCount() As Integer
			Get
				Return metadata_.Count
			End Get
		End Property
		Public Function GetMetadata(index As Integer) As Global.PhoneNumbers.PhoneMetadata
			Return metadata_(index)
		End Function

		Public ReadOnly Property IsInitialized() As Boolean
			Get
				For Each element As Global.PhoneNumbers.PhoneMetadata In MetadataList
					If Not element.IsInitialized Then
						Return False
					End If
				Next
				Return True
			End Get
		End Property




		#Region "Lite runtime methods"
		Public Overrides Function GetHashCode() As Integer
			Dim hash As Integer = [GetType]().GetHashCode()
			For Each i As Global.PhoneNumbers.PhoneMetadata In metadata_
				hash = hash Xor i.GetHashCode()
			Next
			Return hash
		End Function

		Public Overrides Function Equals(obj As Object) As Boolean
			Dim other As PhoneMetadataCollection = TryCast(obj, PhoneMetadataCollection)
			If other Is Nothing Then
				Return False
			End If
			If metadata_.Count <> other.metadata_.Count Then
				Return False
			End If
			For ix As Integer = 0 To metadata_.Count - 1
				If Not metadata_(ix).Equals(other.metadata_(ix)) Then
					Return False
				End If
			Next
			Return True
		End Function

		#End Region

		Public Shared Function CreateBuilder() As Builder
			Return New Builder()
		End Function
		Public Function ToBuilder() As Builder
			Return CreateBuilder(Me)
		End Function
		Public Function CreateBuilderForType() As Builder
			Return New Builder()
		End Function
		Public Shared Function CreateBuilder(prototype As PhoneMetadataCollection) As Builder
			Return DirectCast(New Builder().MergeFrom(prototype), Builder)
		End Function

		<System.Diagnostics.DebuggerNonUserCodeAttribute> _
		<System.Runtime.CompilerServices.CompilerGeneratedAttribute> _
		<System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.3.0.277")> _
		Public Partial Class Builder
			Protected ReadOnly Property ThisBuilder() As Builder
				Get
					Return Me
				End Get
			End Property
			Public Sub New()
			End Sub

			Private result As New PhoneMetadataCollection()

			Protected ReadOnly Property MessageBeingBuilt() As PhoneMetadataCollection
				Get
					Return result
				End Get
			End Property

			Public Function Clear() As Builder
				result = New PhoneMetadataCollection()
				Return Me
			End Function

			Public Function Clone() As Builder
				Return New Builder().MergeFrom(result)
			End Function

			Public ReadOnly Property DefaultInstanceForType() As PhoneMetadataCollection
				Get
					Return Global.PhoneNumbers.PhoneMetadataCollection.DefaultInstance
				End Get
			End Property

			Public Function Build() As PhoneMetadataCollection
				Return BuildPartial()
			End Function

			Public Function BuildPartial() As PhoneMetadataCollection
				If result Is Nothing Then
					Throw New Global.System.InvalidOperationException("build() has already been called on this Builder")
				End If

				Dim returnMe As PhoneMetadataCollection = result
				result = Nothing
				Return returnMe
			End Function


			Public Function MergeFrom(other As PhoneMetadataCollection) As Builder
				If other Is Global.PhoneNumbers.PhoneMetadataCollection.DefaultInstance Then
					Return Me
				End If
				If other.metadata_.Count <> 0 Then
					result.metadata_.AddRange(other.metadata_)
				End If
				Return Me
			End Function




			Public ReadOnly Property MetadataList() As scg.IList(Of Global.PhoneNumbers.PhoneMetadata)
				Get
					Return result.metadata_
				End Get
			End Property
			Public ReadOnly Property MetadataCount() As Integer
				Get
					Return result.MetadataCount
				End Get
			End Property
			Public Function GetMetadata(index As Integer) As Global.PhoneNumbers.PhoneMetadata
				Return result.GetMetadata(index)
			End Function
			Public Function SetMetadata(index As Integer, value As Global.PhoneNumbers.PhoneMetadata) As Builder
				If value Is Nothing Then
					Throw New Global.System.ArgumentNullException("value")
				End If
				result.metadata_(index) = value
				Return Me
			End Function
			Public Function SetMetadata(index As Integer, builderForValue As Global.PhoneNumbers.PhoneMetadata.Builder) As Builder
				If builderForValue Is Nothing Then
					Throw New Global.System.ArgumentNullException("builderForValue")
				End If
				result.metadata_(index) = builderForValue.Build()
				Return Me
			End Function
			Public Function AddMetadata(value As Global.PhoneNumbers.PhoneMetadata) As Builder
				If value Is Nothing Then
					Throw New Global.System.ArgumentNullException("value")
				End If
				result.metadata_.Add(value)
				Return Me
			End Function
			Public Function AddMetadata(builderForValue As Global.PhoneNumbers.PhoneMetadata.Builder) As Builder
				If builderForValue Is Nothing Then
					Throw New Global.System.ArgumentNullException("builderForValue")
				End If
				result.metadata_.Add(builderForValue.Build())
				Return Me
			End Function
			Public Function AddRangeMetadata(values As scg.IEnumerable(Of Global.PhoneNumbers.PhoneMetadata)) As Builder
				result.metadata_.AddRange(values)
				Return Me
			End Function
			Public Function ClearMetadata() As Builder
				result.metadata_.Clear()
				Return Me
			End Function
		End Class
		Shared Sub New()
			Object.ReferenceEquals(Global.PhoneNumbers.Phonemetadata.Descriptor, Nothing)
		End Sub
	End Class

	#End Region

End Namespace

'=======================================================
'Service provided by Telerik (www.telerik.com)
'Conversion powered by NRefactory.
'Twitter: @telerik
'Facebook: facebook.com/telerik
'=======================================================
