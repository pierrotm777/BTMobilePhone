/*+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
*
* Copyright (c) 1999-2008 IVT Corporation
*
* All rights reserved.
* 
---------------------------------------------------------------------------*/

/////////////////////////////////////////////////////////////////////////////
// Module Name:
//    
// Abstract:
//     
// Usage:
//     
// 
// Author:    
//     chenjinfeng
// Revision History:
//     2008-10-15		Created
// 
/////////////////////////////////////////////////////////////////////////////
#include "sdk_tst.h"



/* current remote audio device handle */
static BTDEVHDL s_currAudioRmtDevHdl = BTSDK_INVALID_HANDLE;
/* current remote audio device AV service handle */
static BTSHCHDL s_currAudioSvcHdl = BTSDK_INVALID_HANDLE;
/* current remote audio device connection handle */
static BTCONNHDL s_currAudioConnHdl = BTSDK_INVALID_HANDLE;

/*+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Description:
	This function is to select expected remote device. 
Arguments:
Return:
	void 
---------------------------------------------------------------------------*/
void TestSelectRmtAudioDev()
{	
	//s_currAudioRmtDevHdl = SelectRemoteDevice(BTSDK_DEVCLS_MASK(BTSDK_AV_HEADSET));
	s_currAudioRmtDevHdl = SelectRemoteDevice(0);
	if (BTSDK_INVALID_HANDLE == s_currAudioRmtDevHdl)
	{
		PRINTMSG(1, "Please make sure that the expected device is in discoverable state and search again.\n");
	}
	else
	{
		PRINTMSG(1, "Select remote audio device successfully.\n");
	}
}

/*+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Description:
	This function is to get service handle according to given device handle. 
Arguments:
Return:
	void 
---------------------------------------------------------------------------*/
void TestSelectAudioSvc()
{
	s_currAudioSvcHdl = SelectRmtService(s_currAudioRmtDevHdl);
	if (BTSDK_INVALID_HANDLE == s_currAudioSvcHdl)
	{
		PRINTMSG(1, "Can't get expected service handle.\n");
	}
	else
	{
		PRINTMSG(1, "Select remote audio device's service successfully.\n");
	}
}

/*+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Description:
	This function is to connect specified device's service with it's service handle.
Arguments:
Return:
	void 
---------------------------------------------------------------------------*/
void TestConnectAudioSvc()
{
	BTINT32 ulRet = BTSDK_FALSE;
	ulRet = Btsdk_Connect(s_currAudioSvcHdl, 0, &s_currAudioConnHdl);
	if (BTSDK_OK != ulRet)
	{
		PRINTMSG(1, "Please make sure that the expected device is powered on and connectable.\n");
		return;
	}
	if (BTSDK_INVALID_HANDLE != s_currAudioConnHdl)
	{
//		GetConnectionInfo(s_currAudioRmtDevHdl);
		PRINTMSG(1, "BTSDK_INVALID_HANDLE != s_currAudioConnHdl\n");
	}
	return;
}

/*+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Description:
	This function is a callback function for AVRCP events
Arguments:
	event: [in] AVRCP event
	param: [in] profile specified parameter
Return:
	void 
---------------------------------------------------------------------------*/
void AVRCP_Event_CbkFunc(BTUINT16 event, BTUINT8 *param)
{
	/* param is always a NULL pointer, reserved for later use. */
	switch (event)
	{
		case BTSDK_APP_EV_AVRCP_IND_CONN:
			PRINTMSG(1, "AVRCP connect successful.\n");
			break;
		case BTSDK_APP_EV_AVRCP_IND_DISCONN:
			PRINTMSG(1, "AVRCP disconnected.\n");
			break;
		default:
			break;
	}
}

/*+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Description:
	This function is to deal with the event generated by a user's operation.
Arguments:
	op_id:      [in] operation code ID
	state_flag: [in] states flag
Return:
	void 
---------------------------------------------------------------------------*/
void AVRCP_PassThr_Cmd_CbkFunc(BTUINT8 op_id, BTUINT8 state_flag)
{
    /* state_flag indicates the button status (up or down). */
	if (BTSDK_AVRCP_BUTTON_STATE_PRESSED != state_flag)
	{
		return;
	}
    /* op_id could be one of the following status. please add code for each case. */
	switch (op_id)
	{
		case BTSDK_AVRCP_OPID_AVC_PANEL_PLAY:
		   PRINTMSG(1, "The user has pressed down 'Play' button on the AV device's panel.\n");
			break;
		case BTSDK_AVRCP_OPID_AVC_PANEL_STOP:
			PRINTMSG(1, "The user has pressed down 'Stop' button on the AV device's panel.\n");
			break;
		case BTSDK_AVRCP_OPID_AVC_PANEL_PAUSE:
			PRINTMSG(1, "The user has pressed down 'Pause' button on the AV device's panel.\n ");
			break;
		case BTSDK_AVRCP_OPID_AVC_PANEL_FAST_FORWARD:
			PRINTMSG(1, "The user has pressed down 'Fast forward' button on the AV device's panel.\n");
			break;
		case BTSDK_AVRCP_OPID_AVC_PANEL_FORWARD:
			PRINTMSG(1, "The user has pressed down 'Forward' button on the AV device's panel.\n");
			break;
		case BTSDK_AVRCP_OPID_AVC_PANEL_BACKWARD:
		    PRINTMSG(1, "The user has pressed down 'Backward' button on the AV device's panel.\n");
			break;
		case BTSDK_AVRCP_OPID_AVC_PANEL_VOLUME_UP:
	        PRINTMSG(1, "The user has pressed down 'Volume up' button on the AV device's panel.\n");
			break;
		case BTSDK_AVRCP_OPID_AVC_PANEL_VOLUME_DOWN:
		    PRINTMSG(1, "The user has pressed down 'Volume down' button on the AV device's panel.\n");
			break;
		case BTSDK_AVRCP_OPID_AVC_PANEL_RECORD:
	        PRINTMSG(1, "The user has pressed down 'Record' button on the AV device's panel.\n");
			break;	
		case BTSDK_AVRCP_OPID_AVC_PANEL_POWER:
		case BTSDK_AVRCP_OPID_AVC_PANEL_MUTE:
		case BTSDK_AVRCP_OPID_AVC_PANEL_REWIND:
		case BTSDK_AVRCP_OPID_AVC_PANEL_EJECT:
		default:
			break;		
	}
}

/*+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Description:
	This function is to show user interface of AV test.
Arguments:
    void
Return:
	void 
---------------------------------------------------------------------------*/
void TestAVShowMenu(void)
{
    PRINTMSG(1, "*****************************************\n");
	PRINTMSG(1, "*    Please select the choice you want: *\n");
	PRINTMSG(1, "* <1>   Select A Remote Audio Device    *\n");
	PRINTMSG(1, "* <2>   Select Service's Handle         *\n");
	PRINTMSG(1, "* <3>   Connect Remote Audio Service    *\n");
	PRINTMSG(1, "* <4>   Disconnect                      *\n");
	PRINTMSG(1, "* <m>   Show AV Manager Menu            *\n");
	PRINTMSG(1, "* <q>   Return to the upper menu        *\n");
	PRINTMSG(1, "*****************************************\n");
	PRINTMSG(1, ">>");
}

/*+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Description:
	This function is the entry function for AV APIs test.
Arguments:
	void
Return:
	void 
---------------------------------------------------------------------------*/
void TestAVFunc(void)
{
	BTUINT8 ch = 0;
	s_currAudioRmtDevHdl = BTSDK_INVALID_HANDLE;
	s_currAudioSvcHdl = BTSDK_INVALID_HANDLE;

//	Btsdk_AVRCP_RegPassThrCmdCbk4ThirdParty(AVRCP_PassThr_Cmd_CbkFunc);
//	Btsdk_AVRCP_RegIndCbk4ThirdParty(AVRCP_Event_CbkFunc);
	Btsdk_AVRCP_RegPassThrCmdCbk(AVRCP_PassThr_Cmd_CbkFunc);
	Btsdk_AVRCP_RegIndCbk(AVRCP_Event_CbkFunc);

	TestAVShowMenu();	

	while (ch != 'q')
	{		
		WaitForSingleObject (g_hFuncExcCmdEvt, INFINITE);
		ch = g_cExcCmd;
		PRINTMSG(1, "TestAVFunc: g_iNum(%d), g_cExcCmd(%c), g_NumberLevel(%d)\r\n", g_iNum, g_cExcCmd,g_NumberLevel);
		//scanf("%c", &ch);	
		//getchar();

		if (ch == '\n')
		{
			PRINTMSG(1, ">> \r\n");
		}
		else
		{   
			switch (ch)
			{
				case '1':
					TestSelectRmtAudioDev();
					break;
				case '2':
					TestSelectAudioSvc();
					break;
				case '3':
					TestConnectAudioSvc();
					break;
				case '4':
					if (BTSDK_INVALID_HANDLE != s_currAudioConnHdl)
					{
						Btsdk_Disconnect(s_currAudioConnHdl);
					}
					break;
				case 'm':
					TestAVShowMenu(); 
					break; 
				case 'q':
					InterlockedDecrement(&g_NumberLevel); 
					break;  
				default:
					PRINTMSG(1, "Invalid command.\n");
					break;
			}

			printf("\n");							
		}		
	}

//	Btsdk_AVRCP_RegPassThrCmdCbk4ThirdParty(NULL);
//	Btsdk_AVRCP_RegIndCbk4ThirdParty(NULL);

	Btsdk_AVRCP_RegPassThrCmdCbk(NULL);
	Btsdk_AVRCP_RegIndCbk(NULL);
}

