<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OpenNETCF</name>
    </assembly>
    <members>
        <member name="T:OpenNETCF.Configuration.AppSettingsReader">
            <summary>
            Provides a method for reading values of a particular type from the .config file.
            <para><b>New in v1.1</b></para>
            </summary>
        </member>
        <member name="M:OpenNETCF.Configuration.AppSettingsReader.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenNETCF.Configuration.AppSettingsReader.GetValue(System.String,System.Type)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:OpenNETCF.Configuration.ConfigurationException">
            <summary>
            The exception that is thrown when an error occurs in a configuration setting.
            <para><b>New in v1.1</b></para>
            </summary>
        </member>
        <member name="M:OpenNETCF.Configuration.ConfigurationException.#ctor">
            <summary>
            Initializes a new instance of the System.Configuration.ConfigurationException class.
            </summary>
        </member>
        <member name="M:OpenNETCF.Configuration.ConfigurationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the System.Configuration.ConfigurationException class with the specified error message. 
            </summary>
            <param name="message">The message to display to the client when the exception is thrown.</param>
        </member>
        <member name="M:OpenNETCF.Configuration.ConfigurationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the System.Configuration.ConfigurationException class with the specified error message and System.Exception.InnerException  property.
            </summary>
            <param name="message">The message to display to the client when the exception is thrown.</param>
            <param name="inner">The System.Exception.InnerException , if any, that threw the current exception.</param>
        </member>
        <member name="M:OpenNETCF.Configuration.ConfigurationException.#ctor(System.String,System.Exception,System.Xml.XmlNode)">
            <summary>
            Initializes a new instance of the System.Configuration.ConfigurationException class with the specified error message and System.Exception.InnerException and the name of the configuration section node that contains the error.  
            </summary>
            <param name="message">The message to display to the client when the exception is thrown.</param>
            <param name="inner">The System.Exception.InnerException , if any, that threw the current exception.</param>
            <param name="node">The System.Xml.XmlNode that contains the error.</param>
        </member>
        <member name="M:OpenNETCF.Configuration.ConfigurationException.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the System.Configuration.ConfigurationException class with the specified error message, the name of the configuration file that contains the error, and the line number in the file.
            </summary>
            <param name="message">The message to display to the client when the exception is thrown.</param>
            <param name="filename">The name of the configuration file that contains the error.</param>
            <param name="line">The number of the line that contains the error.</param>
        </member>
        <member name="M:OpenNETCF.Configuration.ConfigurationException.#ctor(System.String,System.Exception,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the System.Configuration.ConfigurationException with the specified error message and System.Exception.InnerException, the name of the file containing the error, and the line number of the error in the file. 
            </summary>
            <param name="message">The message to display to the client when the exception is thrown.</param>
            <param name="inner">The System.Exception.InnerException , if any, that threw the current exception.</param>
            <param name="filename">The name of the configuration file that contains the error.</param>
            <param name="line">The number of the line that contains the error.</param>
        </member>
        <member name="M:OpenNETCF.Configuration.ConfigurationException.#ctor(System.String,System.Xml.XmlNode)">
            <summary>
            Initializes a new instance of the System.Configuration.ConfigurationException with the specified error message and the name of the configuration section containing the error.  
            </summary>
            <param name="message">The message to display to the client when the exception is thrown.</param>
            <param name="node">The System.Xml.XmlNode that contains the error.</param>
        </member>
        <member name="M:OpenNETCF.Configuration.ConfigurationException.GetXmlNodeLineNumber(System.Xml.XmlNode)">
            <summary>
            Returns the line number of the configuration section node that contains the error.
            </summary>
            <param name="node">The name of the configuration section node that contains the error.</param>
            <returns>The line number that contains the error.</returns>
        </member>
        <member name="M:OpenNETCF.Configuration.ConfigurationException.GetXmlNodeFilename(System.Xml.XmlNode)">
            <summary>
             Returns the name of the file that contains the configuration section node that contains the error.
            </summary>
            <param name="node">The name of the configuration section node that contains the error.</param>
            <returns>The name of the configuration file.</returns>
        </member>
        <member name="T:OpenNETCF.Configuration.ConfigurationSettings">
            <summary>
            Provides access to configuration settings in a specified configuration section. This class cannot be inherited.
            <para><b>New in v1.1</b></para>
            </summary>
        </member>
        <member name="M:OpenNETCF.Configuration.ConfigurationSettings.GetConfig(System.String)">
            <summary>
            Returns configuration settings for a user-defined configuration section.  
            </summary>
            <param name="sectionName">The configuration section to read.</param>
            <returns>The configuration settings for sectionName.</returns>
        </member>
        <member name="P:OpenNETCF.Configuration.ConfigurationSettings.AppSettings">
            <summary>
            Gets configuration settings in the configuration section.
            </summary>
        </member>
        <member name="T:OpenNETCF.Configuration.ConfigXmlDocument">
            <summary>
            <para><b>New in v1.1</b></para>
            </summary>
        </member>
        <member name="M:OpenNETCF.Configuration.ConfigXmlDocument.Load(System.String)">
            <summary>
            
            </summary>
            <param name="filename"></param>
        </member>
        <member name="M:OpenNETCF.Configuration.ConfigXmlDocument.ReadConfigNode(System.String,System.Xml.XmlTextReader)">
            <summary>
            
            </summary>
            <param name="filename"></param>
            <param name="sourceReader"></param>
            <returns></returns>
        </member>
        <member name="M:OpenNETCF.Configuration.ConfigXmlDocument.LoadSingleElement(System.String,System.Xml.XmlTextReader)">
            <summary>
            
            </summary>
            <param name="filename"></param>
            <param name="sourceReader"></param>
        </member>
        <member name="M:OpenNETCF.Configuration.ConfigXmlDocument.CreateAttribute(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="prefix"></param>
            <param name="localName"></param>
            <param name="namespaceUri"></param>
            <returns></returns>
        </member>
        <member name="M:OpenNETCF.Configuration.ConfigXmlDocument.CreateElement(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="prefix"></param>
            <param name="localName"></param>
            <param name="namespaceUri"></param>
            <returns></returns>
        </member>
        <member name="M:OpenNETCF.Configuration.ConfigXmlDocument.CreateTextNode(System.String)">
            <summary>
            
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:OpenNETCF.Configuration.ConfigXmlDocument.CreateCDataSection(System.String)">
            <summary>
            
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:OpenNETCF.Configuration.ConfigXmlDocument.CreateComment(System.String)">
            <summary>
            
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:OpenNETCF.Configuration.ConfigXmlDocument.CreateSignificantWhitespace(System.String)">
            <summary>
            
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:OpenNETCF.Configuration.ConfigXmlDocument.CreateWhitespace(System.String)">
            <summary>
            
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="P:OpenNETCF.Configuration.ConfigXmlDocument.Filename">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenNETCF.Configuration.ConfigXmlDocument.LineNumber">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenNETCF.Configuration.DefaultConfigurationSystem">
            <summary>
            Summary description for DefaultConfigurationSystem.
            </summary>
        </member>
        <member name="T:OpenNETCF.Configuration.IConfigurationSystem">
            <summary>
            <para><b>New in v1.1</b></para>
            </summary>
        </member>
        <member name="M:OpenNETCF.Configuration.IConfigurationSystem.GetConfig(System.String)">
            <summary>
            Returns the config object for the specified key.  
            </summary>
            <param name="configKey">Section name of config object to retrieve. </param>
            <returns></returns>
        </member>
        <member name="M:OpenNETCF.Configuration.IConfigurationSystem.Init">
            <summary>
            Initializes the configuration system. 
            </summary>
        </member>
        <member name="T:OpenNETCF.Configuration.DictionarySectionHandler">
            <summary>
            Reads key-value pair configuration information for a configuration section.
            <para><b>New in v1.1</b></para>
            </summary>
            <example>
            <code>
            &lt;add key="name" value="text"> - sets key=text
            &lt;remove key="name"> - removes the definition of key
            &lt;clear/> - removes all definitions
            </code>
            </example>
        </member>
        <member name="T:OpenNETCF.Configuration.IConfigurationSectionHandler">
            <summary>
            Defines the contract that all configuration section handlers must implement in order to participate in the resolution of configuration settings.
            Reads key-value pair configuration information for a configuration section.
            </summary>
        </member>
        <member name="M:OpenNETCF.Configuration.IConfigurationSectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            Implemented by all configuration section handlers to parse the XML of the configuration section. The 
            returned object is added to the configuration collection and is accessed by 
            System.Configuration.ConfigurationSettings.GetConfig(System.String).
            </summary>
            <param name="parent">The configuration settings in a corresponding parent configuration section.</param>
            <param name="configContext">An System.Web.Configuration.HttpConfigurationContext when 
            System.Configuration.IConfigurationSectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode) 
            is called from the ASP.NET configuration system. Otherwise, this parameter is reserved and is null.</param>
            <param name="section">The System.Xml.XmlNode that contains the configuration information from the 
            configuration file. Provides direct access to the XML contents of the configuration section.</param>
            <returns>A configuration object.</returns>
        </member>
        <member name="M:OpenNETCF.Configuration.DictionarySectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="parent"></param>
            <param name="context"></param>
            <param name="section"></param>
            <returns></returns>
        </member>
        <member name="P:OpenNETCF.Configuration.DictionarySectionHandler.KeyAttributeName">
            <summary>
            Make the name of the key attribute configurable by derived classes.
            </summary>
        </member>
        <member name="P:OpenNETCF.Configuration.DictionarySectionHandler.ValueAttributeName">
            <summary>
            Make the name of the value attribute configurable by derived classes.
            </summary>
        </member>
        <member name="T:OpenNETCF.Configuration.IgnoreSectionHandler">
            <summary>
            Provides a section handler definition for configuration sections read and handled by systems other than OpenNETCF.Configuration. 
            <para><b>New in v1.1</b></para>
            </summary>
        </member>
        <member name="M:OpenNETCF.Configuration.IgnoreSectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="parent"></param>
            <param name="configContext"></param>
            <param name="section"></param>
            <returns></returns>
        </member>
        <member name="T:OpenNETCF.Configuration.NameValueFileSectionHandler">
            <summary>
            <para><b>New in v1.1</b></para>
            </summary>
        </member>
        <member name="M:OpenNETCF.Configuration.NameValueFileSectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="parent"></param>
            <param name="configContext"></param>
            <param name="section"></param>
            <returns></returns>
        </member>
        <member name="T:OpenNETCF.Configuration.NameValueSectionHandler">
            <summary>
            Provides name-value pair configuration information from a configuration section.
            <para><b>New in v1.1</b></para>
            </summary>
        </member>
        <member name="M:OpenNETCF.Configuration.NameValueSectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="parent"></param>
            <param name="context"></param>
            <param name="section"></param>
            <returns></returns>
        </member>
        <member name="P:OpenNETCF.Configuration.NameValueSectionHandler.KeyAttributeName">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenNETCF.Configuration.NameValueSectionHandler.ValueAttributeName">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenNETCF.Configuration.SingleTagSectionHandler">
            <summary>
            <para><b>New in v1.1</b></para>
            </summary>
        </member>
        <member name="M:OpenNETCF.Configuration.SingleTagSectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            Returns a collection of configuration section values.
            </summary>
            <param name="parent">The configuration settings in a corresponding parent configuration section.</param>
            <param name="context">This parameter is reserved and is null.</param>
            <param name="section">An <see cref="T:System.Xml.XmlNode"/> that contains configuration information from the configuration file.
            Provides direct access to the XML contents of the configuration section.</param>
            <returns>A <see cref="T:System.Collections.Hashtable"/> containing configuration section directives.</returns>
        </member>
        <member name="T:OpenNETCF.Diagnostics.EntryWrittenEventArgs">
            <summary>
            Event arguments for the last entry written to the log EntryWrittenEventArgs.
            </summary>
        </member>
        <member name="F:OpenNETCF.Diagnostics.EntryWrittenEventArgs.eventLogEntry">
            <summary>
            The entry that was just written to the log
            </summary>
        </member>
        <member name="M:OpenNETCF.Diagnostics.EntryWrittenEventArgs.#ctor(OpenNETCF.Diagnostics.EventLogEntry)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:OpenNETCF.Diagnostics.EntryWrittenEventArgs.EventLogEntry">
            <summary>
            The event log entry that was written to the log
            </summary>
        </member>
        <member name="T:OpenNETCF.Diagnostics.EventLog">
            <summary>
            Class is similar to the System.Diagnostics.EventLog in the full framework with a few differences.
            1. Since CE.Net and PPC have no event log we write the log to the application root directory as an XML file
            2. Every Application will have it's own log.  There will not be one log system/device wide
            3. Attempted to keep as close as possible to the full framework class but some things are missing
            </summary>
        </member>
        <member name="M:OpenNETCF.Diagnostics.EventLog.#ctor(System.String,System.String,OpenNETCF.Diagnostics.IEventLogWriter)">
            <summary>
            Overloaded constructor were a custom IEventLogWriter can be specified
            </summary>
            <param name="log">Indicates the log item</param>
            <param name="source">Indicates what logged the event</param>
            <param name="customEventLogWriter">Custom event log writter which implements IEventLogWriter</param>
        </member>
        <member name="M:OpenNETCF.Diagnostics.EventLog.#ctor(System.String,System.String,OpenNETCF.Diagnostics.EventLogWriterType)">
            <summary>
            Default constructor.
            </summary>
            <param name="log">Indicates the log item</param>
            <param name="source">Indicates what logged the event</param>
            <param name="type"></param>
        </member>
        <member name="M:OpenNETCF.Diagnostics.EventLog.#ctor(System.String,System.String,System.String,System.String,OpenNETCF.Diagnostics.EventLogWriterType)">
            <summary>
            Overloaded constructor
            </summary>
            <param name="log">Indicates the log item</param>
            <param name="source">Indicates what logged the event</param>
            <param name="path"></param>
            <param name="fileName"></param>
            <param name="type"></param>
        </member>
        <member name="M:OpenNETCF.Diagnostics.EventLog.Delete(System.String)">
            <summary>
            Removes an event log from the local file.
            </summary>
            <param name="logName">The name of the log to delete.</param>
        </member>
        <member name="M:OpenNETCF.Diagnostics.EventLog.GetEventLogs">
            <summary>
            Searches for all event logs on the local file and creates an array of EventLog objects that contain the list.
            </summary>
            <returns>An array of type EventLog that represents the logs on the local computer.</returns>
        </member>
        <member name="M:OpenNETCF.Diagnostics.EventLog.Exists(System.String)">
            <summary>
            Determines whether the log exists on the local file.
            </summary>
            <param name="logName">The name of the log to search for.</param>
            <remarks>The full framework defines this method as static.  Since this is not a system wide log but an application specific log this method will only search for a Log Item with the current XML file.</remarks>
        </member>
        <member name="M:OpenNETCF.Diagnostics.EventLog.Clear">
            <summary>
            Removes all entries from the event log.
            </summary>
        </member>
        <member name="M:OpenNETCF.Diagnostics.EventLog.Close">
            <summary>
            Closes the event log and releases read and write handles.
            </summary>
        </member>
        <member name="M:OpenNETCF.Diagnostics.EventLog.WriteEntry(System.String)">
            <summary>
            Writes an information type entry, with the given message text, to the event log.
            </summary>
            <param name="message">The string to write to the event log.</param>
        </member>
        <member name="M:OpenNETCF.Diagnostics.EventLog.WriteEntry(System.String,OpenNETCF.Diagnostics.EventLogEntryType)">
            <summary>
            Writes an error, warning, information, success audit, or failure audit entry with the given message text to the event log.
            </summary>
            <param name="message">The string to write to the event log.</param>
            <param name="type">One of the <see cref="T:OpenNETCF.Diagnostics.EventLogEntryType">EventLogEntryType</see> values.</param>
        </member>
        <member name="M:OpenNETCF.Diagnostics.EventLog.WriteEntry(System.String,System.String)">
            <summary>
            Writes an information type entry with the given message text to the event log, using the specified event source.
            </summary>
            <param name="source">The source by which the application is registered. </param>
            <param name="message">The string to write to the event log.</param>
        </member>
        <member name="M:OpenNETCF.Diagnostics.EventLog.WriteEntry(System.String,OpenNETCF.Diagnostics.EventLogEntryType,System.Int32)">
            <summary>
            Writes an entry with the given message text and application-defined event identifier to the event log.
            </summary>
            <param name="message">The string to write to the event log. </param>
            <param name="type">One of the <see cref="T:OpenNETCF.Diagnostics.EventLogEntryType">EventLogEntryType</see> values. </param>
            <param name="eventID">The application-specific identifier for the event. </param>
        </member>
        <member name="M:OpenNETCF.Diagnostics.EventLog.WriteEntry(System.String,System.String,OpenNETCF.Diagnostics.EventLogEntryType)">
            <summary>
            Writes an error, warning, information, success audit, or failure audit entry with the given message text to the event log, using the specified event source.
            </summary>
            <param name="source">The source by which the application is registered.</param>
            <param name="message">The string to write to the event log.</param>
            <param name="type">One of the <see cref="T:OpenNETCF.Diagnostics.EventLogEntryType">EventLogEntryType</see> values.</param>
        </member>
        <member name="M:OpenNETCF.Diagnostics.EventLog.WriteEntry(System.String,OpenNETCF.Diagnostics.EventLogEntryType,System.Int32,System.Int16)">
            <summary>
            Writes an entry with the given message text, application-defined event identifier, and application-defined category to the event log.
            </summary>
            <param name="message">The string to write to the event log.</param>
            <param name="type">One of the <see cref="T:OpenNETCF.Diagnostics.EventLogEntryType">EventLogEntryType</see> values.</param>
            <param name="eventID">The application-specific identifier for the event.</param>
            <param name="category">The application-specific subcategory associated with the message.</param>
        </member>
        <member name="M:OpenNETCF.Diagnostics.EventLog.WriteEntry(System.String,System.String,OpenNETCF.Diagnostics.EventLogEntryType,System.Int32)">
            <summary>
            Writes an entry with the given message text and application-defined event identifier to the event log, using the specified registered event source.
            </summary>
            <param name="source">The source by which the application is registered on the specified computer. </param>
            <param name="message">the string to write to the event log.</param>
            <param name="type">One of the <see cref="T:OpenNETCF.Diagnostics.EventLogEntryType">EventLogEntryType</see> values.</param>
            <param name="eventID">The application-specific identifier for the event.</param>
        </member>
        <member name="M:OpenNETCF.Diagnostics.EventLog.WriteEntry(System.String,OpenNETCF.Diagnostics.EventLogEntryType,System.Int32,System.Int16,System.Byte[])">
            <summary>
            Writes an entry with the given message text, application-defined event identifier, and application-defined category to the event log, and appends binary data to the message.
            </summary>
            <param name="message">the string to write to the event log.</param>
            <param name="type">One of the <see cref="T:OpenNETCF.Diagnostics.EventLogEntryType">EventLogEntryType</see> values.</param>
            <param name="eventID">The application-specific identifier for the event.</param>
            <param name="category">The application-specific subcategory associated with the message. </param>
            <param name="rawData">An array of bytes that holds the binary data associated with the entry. </param>
        </member>
        <member name="M:OpenNETCF.Diagnostics.EventLog.WriteEntry(System.String,System.String,OpenNETCF.Diagnostics.EventLogEntryType,System.Int32,System.Int16)">
            <summary>
            Writes an entry with the given message text, application-defined event identifier, and application-defined category to the event log, using the specified registered event source. The category can be used to filter events in the log.
            </summary>
            <param name="source">The source by which the application is registered on the specified computer. </param>
            <param name="message">the string to write to the event log.</param>
            <param name="type">One of the <see cref="T:OpenNETCF.Diagnostics.EventLogEntryType">EventLogEntryType</see> values.</param>
            <param name="eventID">The application-specific identifier for the event.</param>
            <param name="category">The application-specific subcategory associated with the message. </param>
        </member>
        <member name="M:OpenNETCF.Diagnostics.EventLog.WriteEntry(System.String,System.String,OpenNETCF.Diagnostics.EventLogEntryType,System.Int32,System.Int16,System.Byte[])">
            <summary>
            Writes an entry with the given message text, application-defined event identifier, and application-defined category to the event log (using the specified registered event source) and appends binary data to the message.
            </summary>
            <param name="source">The source by which the application is registered on the specified computer. </param>
            <param name="message">the string to write to the event log.</param>
            <param name="type">One of the <see cref="T:OpenNETCF.Diagnostics.EventLogEntryType">EventLogEntryType</see> values.</param>
            <param name="eventID">The application-specific identifier for the event.</param>
            <param name="category">The application-specific subcategory associated with the message. </param>
            <param name="rawData">An array of bytes that holds the binary data associated with the entry. </param>
        </member>
        <member name="M:OpenNETCF.Diagnostics.EventLog.CheckForValidLog">
            <summary>
            Checks to see if the source is set
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenNETCF.Diagnostics.EventLog.CreateEventLogWriter(System.String,System.String,System.String,System.String)">
            <summary>
            Creates the event log Writer object
            </summary>
        </member>
        <member name="M:OpenNETCF.Diagnostics.EventLog.OnEntryWritten(OpenNETCF.Diagnostics.EventLogEntry)">
            <summary>
            Notifies any listeners that an entry was written to the log
            </summary>
            <param name="e">the entry item that was written to the log</param>
        </member>
        <member name="M:OpenNETCF.Diagnostics.EventLog.OnLogCleared">
            <summary>
            Notifies any listeners that the log was cleared
            </summary>
        </member>
        <member name="M:OpenNETCF.Diagnostics.EventLog.OnLogDisplayNameChanged">
            <summary>
            Notifies any listeners that log display name was changed
            </summary>
        </member>
        <member name="M:OpenNETCF.Diagnostics.EventLog.OnLogClosed">
            <summary>
            Notifies any listeners that log was closed
            </summary>
        </member>
        <member name="M:OpenNETCF.Diagnostics.EventLog.OnLogChanged">
            <summary>
            Notifies any listeners that log was changed
            </summary>
        </member>
        <member name="M:OpenNETCF.Diagnostics.EventLog.OnSourceChanged">
            <summary>
            Notifies any listeners that source was changed
            </summary>
        </member>
        <member name="M:OpenNETCF.Diagnostics.EventLog.OnEventLogAdded">
            <summary>
            Notifies any listeners that a log was added to the event log
            </summary>
        </member>
        <member name="M:OpenNETCF.Diagnostics.EventLog.eventLogWriter_EntryWritten(System.Object,OpenNETCF.Diagnostics.EventLogEntry)">
            <summary>
            Handler for the entry written event in the eventLogWriter
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:OpenNETCF.Diagnostics.EventLog.eventLogWriter_EventLogCollectionUpdated(System.Object,System.EventArgs)">
            <summary>
            event listeners when the eventlog collection is updated
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="E:OpenNETCF.Diagnostics.EventLog.LogChanged">
            <summary>
            Public event to notify listeners that the log has changed
            </summary>
        </member>
        <member name="E:OpenNETCF.Diagnostics.EventLog.LogDisplayNameChanged">
            <summary>
            Public event to notify listeners that the log display name has changed
            </summary>
        </member>
        <member name="E:OpenNETCF.Diagnostics.EventLog.LogClosed">
            <summary>
            Public event to notify listeners that the log has been closed
            </summary>
        </member>
        <member name="E:OpenNETCF.Diagnostics.EventLog.LogCleared">
            <summary>
            Public event to notify listeners that the log has been cleared
            </summary>
        </member>
        <member name="E:OpenNETCF.Diagnostics.EventLog.SourceChanged">
            <summary>
            Public event to notify listeners that the source has changed
            </summary>
        </member>
        <member name="E:OpenNETCF.Diagnostics.EventLog.EventLogAdded">
            <summary>
            Notifies listeners if there is a new log in the eventLog
            </summary>
        </member>
        <member name="E:OpenNETCF.Diagnostics.EventLog.EntryWritten">
            <summary>
            Occurs when an entry is written to an event log on the local computer
            </summary>
        </member>
        <member name="P:OpenNETCF.Diagnostics.EventLog.EnableRaisingEvents">
            <summary>
            Gets or sets a value indicating whether the EventLog receives EntryWritten event notifications.
            </summary>
        </member>
        <member name="P:OpenNETCF.Diagnostics.EventLog.Entries">
            <summary>
            Gets the contents of the event log.
            </summary>
        </member>
        <member name="P:OpenNETCF.Diagnostics.EventLog.Log">
            <summary>
            Gets or sets the name of the log to read from or write to.
            </summary>
        </member>
        <member name="P:OpenNETCF.Diagnostics.EventLog.LogDisplayName">
            <summary>
            Gets the event log's friendly name.
            </summary>
        </member>
        <member name="P:OpenNETCF.Diagnostics.EventLog.Source">
            <summary>
            Gets or sets the source name to register and use when writing to the event log.
            </summary>
        </member>
        <member name="P:OpenNETCF.Diagnostics.EventLog.LogFileName">
            <summary>
            Gets the file name the log is stored under.  Defaults to the calling assembly name with ".Log" appended
            </summary>
        </member>
        <member name="P:OpenNETCF.Diagnostics.EventLog.LogPath">
            <summary>
            Gets the path of where the log file is stored
            </summary>
        </member>
        <member name="P:OpenNETCF.Diagnostics.EventLog.EventLogWriterType">
            <summary>
            Gets the eventLogWriterType
            </summary>
        </member>
        <member name="T:OpenNETCF.Diagnostics.EventLogEntry">
            <summary>
            Summary description for EventLogEntry.
            </summary>
        </member>
        <member name="P:OpenNETCF.Diagnostics.EventLogEntry.ID">
            <summary>
            Gets the ID value that uniquely identifies the item in the log
            </summary>
        </member>
        <member name="P:OpenNETCF.Diagnostics.EventLogEntry.Category">
            <summary>
            Gets the text associated with the <see cref="P:OpenNETCF.Diagnostics.EventLogEntry.CategoryNumber">CategoryNumber</see> for this entry.
            </summary>
            <value>The application-specific category text.</value>
            <remarks>
            Each application (event source) can define its own numbered categories and the text strings to which they are mapped. The text strings associated with the category are stored in the XML Log.
            </remarks>
        </member>
        <member name="P:OpenNETCF.Diagnostics.EventLogEntry.CategoryNumber">
            <summary>
            Gets the entry's category number.
            </summary>
            <value>The application-specific category number for this entry .</value>
            <remarks>Each application (event source) can define its own numbered categories and the text strings to which they are mapped.</remarks>
        </member>
        <member name="P:OpenNETCF.Diagnostics.EventLogEntry.Data">
            <summary>
            Gets the binary data associated with the entry.
            </summary>
            <value>An array of bytes that holds the binary data associated with the entry.</value>
            <remarks>Getting this property creates an array that holds a copy of the entry's event-specific binary data. Event-specific data is sometimes used to store information that the application will process independently of the Event Viewer, for example, to make reports from the log file.</remarks>
        </member>
        <member name="P:OpenNETCF.Diagnostics.EventLogEntry.EntryType">
            <summary>
            Gets the event type of this entry.
            </summary>
            <value>The <seealso cref="T:OpenNETCF.Diagnostics.EventLogEntryType">EventLogEntryType</seealso> that indicates the event type associated with the entry in the event log. This is usually used to indicate the severity of the event log entry.</value>
        </member>
        <member name="P:OpenNETCF.Diagnostics.EventLogEntry.EventID">
            <summary>
            Gets the application-specific event identifier of this event entry.
            </summary>
            <value>The application-specific identifier for the event.</value>
            <remarks>Event identifiers, together with the event source, uniquely identify an event.</remarks>
        </member>
        <member name="P:OpenNETCF.Diagnostics.EventLogEntry.Index">
            <summary>
            Gets the index of this entry in the event log.
            </summary>
            <value>The index of this entry in the event log.</value>
            <remarks>This number is not necessarily zero based.</remarks>
        </member>
        <member name="P:OpenNETCF.Diagnostics.EventLogEntry.MachineName">
            <summary>
            Gets the name of the computer on which this entry was generated.
            </summary>
            <value>The name of the computer that contains the event log.</value>
        </member>
        <member name="P:OpenNETCF.Diagnostics.EventLogEntry.Message">
            <summary>
            Gets the localized message associated with this event entry.
            </summary>
        </member>
        <member name="P:OpenNETCF.Diagnostics.EventLogEntry.Source">
            <summary>
            Gets the name of the application that generated this event.
            </summary>
            <remarks>The event source indicates what logged the event. It is often the name of the application, or the name of a subcomponent of the application if the application is large. Applications and services usually write to (and therefore are sources for) the Application log or a custom log. Device drivers usually write to the System log.</remarks>
        </member>
        <member name="P:OpenNETCF.Diagnostics.EventLogEntry.TimeGenerated">
            <summary>
            Gets the local time at which this event was generated.
            </summary>
            <value>A <see cref="T:System.DateTime">DateTime</see> that represents the local time at which this event was generated.</value>
            <remarks>This member holds the time that an event was generated. This might not be the same as the time when the event information was written to the event log. For the latter, read the <see cref="P:OpenNETCF.Diagnostics.EventLogEntry.TimeWritten">TimeWritten</see> property.There’s almost always going to be a lag between the time something happens and the time it is logged, if only milliseconds. Usually, it is more important to know when the event was generated, unless you want to see if there is a significant lag in logging. That can happen if your log files are on a different server and you are experiencing a bottleneck.</remarks>
        </member>
        <member name="P:OpenNETCF.Diagnostics.EventLogEntry.TimeWritten">
            <summary>
            Gets the local time at which this event was written to the log.
            </summary>
            <value>A <see cref="T:System.DateTime">DateTime</see> that represents the local time at which this event was written to the log.</value>
            <remarks>This member holds the time that an event's information is written to the event log. This might not be the same time as when the event was generated. For the latter, read the <see cref="P:OpenNETCF.Diagnostics.EventLogEntry.TimeGenerated">TimeGenerated</see> property.</remarks>
        </member>
        <member name="P:OpenNETCF.Diagnostics.EventLogEntry.UserName">
            <summary>
            Gets the name of the user who's responsible for this event.
            </summary>
        </member>
        <member name="T:OpenNETCF.Diagnostics.EventLogEntryCollection">
            <summary>
            Summary description for EventLogEntryCollection.
            </summary>
        </member>
        <member name="M:OpenNETCF.Diagnostics.EventLogEntryCollection.Clear">
            <summary>
            Overloaded method.  To clear the event log use EventLog.Clear();
            </summary>
            <exception cref="T:System.NotSupportedException"/>
        </member>
        <member name="M:OpenNETCF.Diagnostics.EventLogEntryCollection.RemoveAt(System.Int32)">
            <summary>
            Overloaded method.
            </summary>
            <param name="index"></param>
            <exception cref="T:System.NotSupportedException"/>
        </member>
        <member name="M:OpenNETCF.Diagnostics.EventLogEntryCollection.Add(OpenNETCF.Diagnostics.EventLogEntry)">
            <summary>
            Add an eventlog entry to the collection
            </summary>
            <param name="eventLogEntry"></param>
            <returns></returns>
        </member>
        <member name="P:OpenNETCF.Diagnostics.EventLogEntryCollection.Item(System.Int32)">
            <summary>
            Gets the EventLogEntry by index
            </summary>
        </member>
        <member name="P:OpenNETCF.Diagnostics.EventLogEntryCollection.Item(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenNETCF.Diagnostics.EventLogEntryType">
            <summary>
            Specifies the event type of an event log entry.
            </summary>
            <remarks>
            The type of an event log entry is used to indicate the severity of an event log entry.
            Each event must be of a single type, which the application indicates when it reports the event.
            </remarks>
        </member>
        <member name="F:OpenNETCF.Diagnostics.EventLogEntryType.Error">
            <summary>
            An error event. This indicates a significant problem the user should know about; usually a loss of functionality or data.
            </summary>
        </member>
        <member name="F:OpenNETCF.Diagnostics.EventLogEntryType.FailureAudit">
            <summary>
            A failure audit event. This indicates a security event that occurs when an audited access attempt fails; for example, a failed attempt to open a file.
            </summary>
        </member>
        <member name="F:OpenNETCF.Diagnostics.EventLogEntryType.Information">
            <summary>
            An information event. This indicates a significant, successful operation.
            </summary>
        </member>
        <member name="F:OpenNETCF.Diagnostics.EventLogEntryType.SuccessAudit">
            <summary>
            A success audit event. This indicates a security event that occurs when an audited access attempt is successful; for example, logging on successfully.
            </summary>
        </member>
        <member name="F:OpenNETCF.Diagnostics.EventLogEntryType.Warning">
            <summary>
            A warning event. This indicates a problem that is not immediately significant, but that may signify conditions that could cause future problems.
            </summary>
        </member>
        <member name="T:OpenNETCF.Diagnostics.EventLogWriterType">
            <summary>
            Defines the type of Event log writers available
            </summary>
        </member>
        <member name="F:OpenNETCF.Diagnostics.EventLogWriterType.XML">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenNETCF.Diagnostics.EventLogWriterType.Custom">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenNETCF.Diagnostics.EventLogWritterType">
            <summary>
            Defines the type of Event log writters available
            </summary>
        </member>
        <member name="T:OpenNETCF.Diagnostics.IEventLogWriter">
            <summary>
            Defines the interface that will be used by EventLog to write to a log
            </summary>
        </member>
        <member name="M:OpenNETCF.Diagnostics.IEventLogWriter.Delete(System.String)">
            <summary>
            
            </summary>
            <param name="logName"></param>
        </member>
        <member name="M:OpenNETCF.Diagnostics.IEventLogWriter.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenNETCF.Diagnostics.IEventLogWriter.Close">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenNETCF.Diagnostics.IEventLogWriter.GetEventLogs">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenNETCF.Diagnostics.IEventLogWriter.Exists(System.String)">
            <summary>
            
            </summary>
            <param name="logName"></param>
            <returns></returns>
        </member>
        <member name="M:OpenNETCF.Diagnostics.IEventLogWriter.WriteEntry(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:OpenNETCF.Diagnostics.IEventLogWriter.WriteEntry(System.String,OpenNETCF.Diagnostics.EventLogEntryType)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="type"></param>
        </member>
        <member name="M:OpenNETCF.Diagnostics.IEventLogWriter.WriteEntry(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="message"></param>
        </member>
        <member name="M:OpenNETCF.Diagnostics.IEventLogWriter.WriteEntry(System.String,OpenNETCF.Diagnostics.EventLogEntryType,System.Int32)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="type"></param>
            <param name="eventID"></param>
        </member>
        <member name="M:OpenNETCF.Diagnostics.IEventLogWriter.WriteEntry(System.String,System.String,OpenNETCF.Diagnostics.EventLogEntryType)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="message"></param>
            <param name="type"></param>
        </member>
        <member name="M:OpenNETCF.Diagnostics.IEventLogWriter.WriteEntry(System.String,OpenNETCF.Diagnostics.EventLogEntryType,System.Int32,System.Int16)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="type"></param>
            <param name="eventID"></param>
            <param name="category"></param>
        </member>
        <member name="M:OpenNETCF.Diagnostics.IEventLogWriter.WriteEntry(System.String,System.String,OpenNETCF.Diagnostics.EventLogEntryType,System.Int32)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="message"></param>
            <param name="type"></param>
            <param name="eventID"></param>
        </member>
        <member name="M:OpenNETCF.Diagnostics.IEventLogWriter.WriteEntry(System.String,OpenNETCF.Diagnostics.EventLogEntryType,System.Int32,System.Int16,System.Byte[])">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="type"></param>
            <param name="eventID"></param>
            <param name="category"></param>
            <param name="rawData"></param>
        </member>
        <member name="M:OpenNETCF.Diagnostics.IEventLogWriter.WriteEntry(System.String,System.String,OpenNETCF.Diagnostics.EventLogEntryType,System.Int32,System.Int16)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="message"></param>
            <param name="type"></param>
            <param name="eventID"></param>
            <param name="category"></param>
        </member>
        <member name="M:OpenNETCF.Diagnostics.IEventLogWriter.WriteEntry(System.String,System.String,OpenNETCF.Diagnostics.EventLogEntryType,System.Int32,System.Int16,System.Byte[])">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="message"></param>
            <param name="type"></param>
            <param name="eventID"></param>
            <param name="category"></param>
            <param name="rawData"></param>
        </member>
        <member name="E:OpenNETCF.Diagnostics.IEventLogWriter.EntryWritten">
            <summary>
            
            </summary>
        </member>
        <member name="E:OpenNETCF.Diagnostics.IEventLogWriter.EventLogCollectionUpdated">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenNETCF.Diagnostics.IEventLogWriter.Source">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenNETCF.Diagnostics.IEventLogWriter.Log">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenNETCF.Diagnostics.IEventLogWriter.LogDisplayName">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenNETCF.Diagnostics.IEventLogWriter.LogFileName">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenNETCF.Diagnostics.IEventLogWriter.LogPath">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenNETCF.Diagnostics.IEventLogWriter.Entries">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenNETCF.Diagnostics.IEventLogWritter">
            <summary>
            Defines the interface that will be used by EventLog to write to a log
            </summary>
        </member>
        <member name="T:OpenNETCF.Diagnostics.XMLEventLogWriter">
            <summary>
            Implements writing to the event log using XML
            </summary>
        </member>
        <member name="F:OpenNETCF.Diagnostics.XMLEventLogWriter.xmlLog">
            <summary>
            The Xml document representing the log
            </summary>
        </member>
        <member name="F:OpenNETCF.Diagnostics.XMLEventLogWriter.nodeEventLog">
            <summary>
            The current eventlog node which contains all Log nodes
            </summary>
        </member>
        <member name="F:OpenNETCF.Diagnostics.XMLEventLogWriter.nodeLog">
            <summary>
            The current log node that is being written to
            </summary>
        </member>
        <member name="F:OpenNETCF.Diagnostics.XMLEventLogWriter.EVENTLOG_ROOT">
            <summary>
            The default Xml for a new log
            </summary>
        </member>
        <member name="M:OpenNETCF.Diagnostics.XMLEventLogWriter.InitializeLogFile">
            <summary>
            Creates the XML document to store the event logs
            </summary>
        </member>
        <member name="M:OpenNETCF.Diagnostics.XMLEventLogWriter.LoadEventLogCollection">
            <summary>
            Loads the eventlog collection
            </summary>
        </member>
        <member name="M:OpenNETCF.Diagnostics.XMLEventLogWriter.CreateLogFile">
            <summary>
            Creates a log file on the system
            </summary>
        </member>
        <member name="M:OpenNETCF.Diagnostics.XMLEventLogWriter.LoadNodes">
            <summary>
            Loads the source, log and EventLog nodes
            </summary>
        </member>
        <member name="M:OpenNETCF.Diagnostics.XMLEventLogWriter.LoadEventLogEntryCollection">
            <summary>
            Loads the eventlog entry collection
            </summary>
        </member>
        <member name="M:OpenNETCF.Diagnostics.XMLEventLogWriter.CreateLogNode(System.String)">
            <summary>
            Create the log node and adds it to the nodeEventLog
            </summary>
        </member>
        <member name="M:OpenNETCF.Diagnostics.XMLEventLogWriter.EventLogNode(System.String)">
            <summary>
            Retrieves and event log node by logName
            </summary>
            <param name="logName">The name of the log node</param>
            <returns>The XmlNode containing the log items or null if not found</returns>
        </member>
        <member name="M:OpenNETCF.Diagnostics.XMLEventLogWriter.NodeAttributeValue(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            Changes an attribute in the specified node
            </summary>
        </member>
        <member name="M:OpenNETCF.Diagnostics.XMLEventLogWriter.NodeAttributeValue(System.Xml.XmlNode,System.String)">
            <summary>
            Retreives the attribute in the specified node
            </summary>
            <param name="node"></param>
            <param name="attributeName"></param>
            <returns>The value of the attribute or null if not found</returns>
        </member>
        <member name="M:OpenNETCF.Diagnostics.XMLEventLogWriter.SaveLogFile">
            <summary>
            Saves the logfile
            </summary>
        </member>
        <member name="M:OpenNETCF.Diagnostics.XMLEventLogWriter.WriteEntryToLog(System.String,System.String,OpenNETCF.Diagnostics.EventLogEntryType,System.Int32,System.Int16,System.Byte[])">
            <summary>
            Writes an entry to the log file
            </summary>
            <param name="source"></param>
            <param name="message"></param>
            <param name="type"></param>
            <param name="eventID"></param>
            <param name="category"></param>
            <param name="rawData"></param>
        </member>
        <member name="M:OpenNETCF.Diagnostics.XMLEventLogWriter.OnEntryWritten(OpenNETCF.Diagnostics.EventLogEntry)">
            <summary>
            Raises the eventLogEntryWritten event to listeners
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:OpenNETCF.Diagnostics.DiagnosticsConfigurationHandler">
            <summary>
            Summary description for DiagnosticsConfigurationHandler.
            </summary>
        </member>
        <member name="T:OpenNETCF.Diagnostics.FileVersionInfo">
            <summary>
            Provides version information for a physical file in storage memory.
            </summary>
        </member>
        <member name="M:OpenNETCF.Diagnostics.FileVersionInfo.GetVersionInfo(System.String)">
            <summary>
            Returns a <see cref="T:OpenNETCF.Diagnostics.FileVersionInfo"/> representing the version information associated with the specified file.
            </summary>
            <param name="fileName">The fully qualified path and name of the file to retrieve the version information for.</param>
            <returns>A <see cref="T:OpenNETCF.Diagnostics.FileVersionInfo"/> containing information about the file.
            If the file information was not found, the <see cref="T:OpenNETCF.Diagnostics.FileVersionInfo"/> contains only the name of the file requested.</returns>
            <exception cref="T:System.IO.FileNotFoundException">The file specified cannot be found.</exception>
        </member>
        <member name="P:OpenNETCF.Diagnostics.FileVersionInfo.FileName">
            <summary>
            Gets the name of the file that this instance of <see cref="T:OpenNETCF.Diagnostics.FileVersionInfo"/> describes.
            </summary>
            <value>The name of the file described by this instance of <see cref="T:OpenNETCF.Diagnostics.FileVersionInfo"/>.</value>
        </member>
        <member name="P:OpenNETCF.Diagnostics.FileVersionInfo.FileMajorPart">
            <summary>
            Gets the major part of the version number.
            </summary>
            <value>A value representing the major part of the version number.</value>
            <remarks>Typically, a version number is displayed as "major number.minor number.build number.private part number".
            A file version number is a 64-bit number that holds the version number for a file as follows: 
            <list type="bullet"><item>The first 16 bits are the <see cref="P:OpenNETCF.Diagnostics.FileVersionInfo.FileMajorPart"/> number.</item> 
            <item>The next 16 bits are the <see cref="P:OpenNETCF.Diagnostics.FileVersionInfo.FileMinorPart"/> number.</item> 
            <item>The third set of 16 bits are the <see cref="P:OpenNETCF.Diagnostics.FileVersionInfo.FileBuildPart"/> number.</item>
            <item>The last 16 bits are the <see cref="P:OpenNETCF.Diagnostics.FileVersionInfo.FilePrivatePart"/> number.</item></list>
            This property gets the first set of 16 bits.</remarks>
        </member>
        <member name="P:OpenNETCF.Diagnostics.FileVersionInfo.FileMinorPart">
            <summary>
            Gets the minor part of the version number.
            </summary>
            <value>A value representing the minor part of the version number of the file.</value>
            <remarks>Typically, a version number is displayed as "major number.minor number.build number.private part number".
            A file version number is a 64-bit number that holds the version number for a file as follows: 
            <list type="bullet"><item>The first 16 bits are the <see cref="P:OpenNETCF.Diagnostics.FileVersionInfo.FileMajorPart"/> number.</item> 
            <item>The next 16 bits are the <see cref="P:OpenNETCF.Diagnostics.FileVersionInfo.FileMinorPart"/> number.</item> 
            <item>The third set of 16 bits are the <see cref="P:OpenNETCF.Diagnostics.FileVersionInfo.FileBuildPart"/> number.</item>
            <item>The last 16 bits are the <see cref="P:OpenNETCF.Diagnostics.FileVersionInfo.FilePrivatePart"/> number.</item></list>
            This property gets the second set of 16 bits.</remarks>
        </member>
        <member name="P:OpenNETCF.Diagnostics.FileVersionInfo.FileBuildPart">
            <summary>
            Gets the build number of the file.
            </summary>
            <value>A value representing the build number of the file.</value>
            <remarks>Typically, a version number is displayed as "major number.minor number.build number.private part number".
            A file version number is a 64-bit number that holds the version number for a file as follows: 
            <list type="bullet"><item>The first 16 bits are the <see cref="P:OpenNETCF.Diagnostics.FileVersionInfo.FileMajorPart"/> number.</item> 
            <item>The next 16 bits are the <see cref="P:OpenNETCF.Diagnostics.FileVersionInfo.FileMinorPart"/> number.</item> 
            <item>The third set of 16 bits are the <see cref="P:OpenNETCF.Diagnostics.FileVersionInfo.FileBuildPart"/> number.</item>
            <item>The last 16 bits are the <see cref="P:OpenNETCF.Diagnostics.FileVersionInfo.FilePrivatePart"/> number.</item></list>
            This property gets the third set of 16 bits.</remarks>
        </member>
        <member name="P:OpenNETCF.Diagnostics.FileVersionInfo.FilePrivatePart">
            <summary>
            Gets the file private part number.
            </summary>
            <value>A value representing the file private part number.</value>
            <remarks>Typically, a version number is displayed as "major number.minor number.build number.private part number".
            A file version number is a 64-bit number that holds the version number for a file as follows: 
            <list type="bullet"><item>The first 16 bits are the <see cref="P:OpenNETCF.Diagnostics.FileVersionInfo.FileMajorPart"/> number.</item> 
            <item>The next 16 bits are the <see cref="P:OpenNETCF.Diagnostics.FileVersionInfo.FileMinorPart"/> number.</item> 
            <item>The third set of 16 bits are the <see cref="P:OpenNETCF.Diagnostics.FileVersionInfo.FileBuildPart"/> number.</item>
            <item>The last 16 bits are the <see cref="P:OpenNETCF.Diagnostics.FileVersionInfo.FilePrivatePart"/> number.</item></list>
            This property gets the last set of 16 bits.</remarks>
        </member>
        <member name="P:OpenNETCF.Diagnostics.FileVersionInfo.ProductMajorPart">
            <summary>
            Gets the major part of the version number for the product this file is associated with.
            </summary>
            <value>A value representing the major part of the product version number.</value>
            <remarks>Typically, a version number is displayed as "major number.minor number.build number.private part number".
            A product version number is a 64-bit number that holds the version number for a product as follows: 
            <list type="bullet"><item>The first 16 bits are the <see cref="P:OpenNETCF.Diagnostics.FileVersionInfo.ProductMajorPart"/> number.</item> 
            <item>The next 16 bits are the <see cref="P:OpenNETCF.Diagnostics.FileVersionInfo.ProductMinorPart"/> number.</item> 
            <item>The third set of 16 bits are the <see cref="P:OpenNETCF.Diagnostics.FileVersionInfo.ProductBuildPart"/> number.</item>
            <item>The last 16 bits are the <see cref="P:OpenNETCF.Diagnostics.FileVersionInfo.ProductPrivatePart"/> number.</item></list>
            This property gets the first set of 16 bits.</remarks>
        </member>
        <member name="P:OpenNETCF.Diagnostics.FileVersionInfo.ProductMinorPart">
            <summary>
            Gets the minor part of the version number for the product the file is associated with.
            </summary>
            <value>A value representing the minor part of the product version number.</value>
            <remarks>Typically, a version number is displayed as "major number.minor number.build number.private part number".
            A product version number is a 64-bit number that holds the version number for a product as follows: 
            <list type="bullet"><item>The first 16 bits are the <see cref="P:OpenNETCF.Diagnostics.FileVersionInfo.ProductMajorPart"/> number.</item> 
            <item>The next 16 bits are the <see cref="P:OpenNETCF.Diagnostics.FileVersionInfo.ProductMinorPart"/> number.</item> 
            <item>The third set of 16 bits are the <see cref="P:OpenNETCF.Diagnostics.FileVersionInfo.ProductBuildPart"/> number.</item>
            <item>The last 16 bits are the <see cref="P:OpenNETCF.Diagnostics.FileVersionInfo.ProductPrivatePart"/> number.</item></list>
            This property gets the second set of 16 bits.</remarks>
        </member>
        <member name="P:OpenNETCF.Diagnostics.FileVersionInfo.ProductBuildPart">
            <summary>
            Gets the build number of the product this file is associated with.
            </summary>
            <value>A value representing the build part of the product version number.</value>
            <remarks>Typically, a version number is displayed as "major number.minor number.build number.private part number".
            A product version number is a 64-bit number that holds the version number for a product as follows: 
            <list type="bullet"><item>The first 16 bits are the <see cref="P:OpenNETCF.Diagnostics.FileVersionInfo.ProductMajorPart"/> number.</item> 
            <item>The next 16 bits are the <see cref="P:OpenNETCF.Diagnostics.FileVersionInfo.ProductMinorPart"/> number.</item> 
            <item>The third set of 16 bits are the <see cref="P:OpenNETCF.Diagnostics.FileVersionInfo.ProductBuildPart"/> number.</item>
            <item>The last 16 bits are the <see cref="P:OpenNETCF.Diagnostics.FileVersionInfo.ProductPrivatePart"/> number.</item></list>
            This property gets the third set of 16 bits.</remarks>
        </member>
        <member name="P:OpenNETCF.Diagnostics.FileVersionInfo.ProductPrivatePart">
            <summary>
            Gets the private part number of the product this file is associated with.
            </summary>
            <value>A value representing the private part of the product version number.</value>
            <remarks>Typically, a version number is displayed as "major number.minor number.build number.private part number".
            A product version number is a 64-bit number that holds the version number for a product as follows: 
            <list type="bullet"><item>The first 16 bits are the <see cref="P:OpenNETCF.Diagnostics.FileVersionInfo.ProductMajorPart"/> number.</item> 
            <item>The next 16 bits are the <see cref="P:OpenNETCF.Diagnostics.FileVersionInfo.ProductMinorPart"/> number.</item> 
            <item>The third set of 16 bits are the <see cref="P:OpenNETCF.Diagnostics.FileVersionInfo.ProductBuildPart"/> number.</item>
            <item>The last 16 bits are the <see cref="P:OpenNETCF.Diagnostics.FileVersionInfo.ProductPrivatePart"/> number.</item></list>
            This property gets the last set of 16 bits.</remarks>
        </member>
        <member name="T:OpenNETCF.Diagnostics.Process">
            <summary>
            Provides access to local and remote processes and enables you to start and stop local system processes.
            </summary>
            <remarks>A <see cref="T:OpenNETCF.Diagnostics.Process"/> component provides access to a process that is running on a computer.
            A process, in the simplest terms, is a running application.
            A thread is the basic unit to which the operating system allocates processor time.
            A thread can execute any part of the code of the process, including parts currently being executed by another thread.</remarks>
        </member>
        <member name="M:OpenNETCF.Diagnostics.Process.#ctor">
            <summary>
            Initializes a new instance of the OpenNETCF.Diagnostics.Process class.
            </summary>
        </member>
        <member name="M:OpenNETCF.Diagnostics.Process.Dispose">
            <summary>
            Releases all resources used by the <see cref="T:OpenNETCF.Diagnostics.Process"/>.
            </summary>
            <remarks>Calling <b>Dispose</b> allows the resources used by the <see cref="T:OpenNETCF.Diagnostics.Process"/> to be reallocated for other purposes.</remarks>
        </member>
        <member name="M:OpenNETCF.Diagnostics.Process.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:OpenNETCF.Diagnostics.Process"/> and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:OpenNETCF.Diagnostics.Process.GetProcessById(System.Int32)">
            <summary>
            Returns a new <see cref="T:OpenNETCF.Diagnostics.Process"/> component, given the identifier of a process on the device.
            <para><b>New in v1.1</b></para>
            </summary>
            <param name="processId">The system-unique identifier of a process resource.</param>
            <returns>A <see cref="T:OpenNETCF.Diagnostics.Process"/> component that is associated with the local process resource identified by the processId parameter.</returns>
        </member>
        <member name="M:OpenNETCF.Diagnostics.Process.Start(System.String,System.String)">
            <summary>
            Starts a process resource by specifying the name of a document or application file and associates the resource with a new OpenNETCF.Diagnostics.Process component.
            </summary>
            <param name="fileName">The name of a document or application file to run in the process.</param>
            <param name="arguments">Command line arguments to pass when starting the process.</param>
        </member>
        <member name="M:OpenNETCF.Diagnostics.Process.Start(System.String)">
            <summary>
            Starts a process resource by specifying the name of a document or application file and associates the resource with a new OpenNETCF.Diagnostics.Process component.
            </summary>
            <param name="fileName">The name of a document or application file to run in the process.</param>
            <returns>A new OpenNETCF.Diagnostics.Process component that is associated with the process resource, or null, if no process resource is started (for example, if an existing process is reused).</returns>
        </member>
        <member name="M:OpenNETCF.Diagnostics.Process.Start(OpenNETCF.Diagnostics.ProcessStartInfo)">
            <summary>
            Starts the process resource that is specified by the parameter containing process start information (for example, the file name of the process to start) and associates the resource with a new OpenNETCF.Diagnostics.Process component.
            </summary>
            <param name="startInfo">The OpenNETCF.Diagnostics.ProcessStartInfo that contains the information that is used to start the process, including the file name and any command line arguments.</param>
            <returns>A new OpenNETCF.Diagnostics.Process component that is associated with the process resource, or null if no process resource is started (for example, if an existing process is reused).</returns>
        </member>
        <member name="M:OpenNETCF.Diagnostics.Process.Start">
            <summary>
            Starts (or reuses) the process resource that is specified by the OpenNETCF.Diagnostics.Process.StartInfo property of this OpenNETCF.Diagnostics.Process component and associates it with the component.
            </summary>
            <returns><b>true</b> if a process resource is started; <b>false</b> if no new process resource is started (for example, if an existing process is reused).</returns>
        </member>
        <member name="M:OpenNETCF.Diagnostics.Process.Kill">
            <summary>
            Immediately stops the associated process.
            </summary>
            <exception cref="T:System.ComponentModel.Win32Exception">The associated process could not be terminated.</exception>
            <exception cref="T:System.InvalidOperationException">The process has already exited.</exception>
            <event></event>
        </member>
        <member name="M:OpenNETCF.Diagnostics.Process.WaitForExit">
            <summary>
            Instructs the <see cref="T:OpenNETCF.Diagnostics.Process"/> component to wait indefinitely for the associated process to exit.
            </summary>
            <remarks>WaitForExit is used to make the current thread wait until the associated process terminates.
            This overload of <see cref="M:OpenNETCF.Diagnostics.Process.WaitForExit"/> instructs the <see cref="T:OpenNETCF.Diagnostics.Process"/> component to wait an infinite amount of time for the process to exit.
            This can cause an application to stop responding.</remarks>
        </member>
        <member name="M:OpenNETCF.Diagnostics.Process.WaitForExit(System.Int32)">
            <summary>
            Instructs the <see cref="T:OpenNETCF.Diagnostics.Process"/> component to wait the specified number of milliseconds for the associated process to exit.
            </summary>
            <param name="milliseconds">The amount of time, in milliseconds, to wait for the associated process to exit.
            The maximum is the largest possible value of a 32-bit integer, which represents infinity to the operating system.</param>
            <returns>true if the associated process has exited; otherwise, false.</returns>
        </member>
        <member name="M:OpenNETCF.Diagnostics.Process.OnExited">
            <summary>
            Raises the <see cref="E:OpenNETCF.Diagnostics.Process.Exited"/> event.
            </summary>
        </member>
        <member name="M:OpenNETCF.Diagnostics.Process.GetCurrentProcessID">
            <summary>
            This function returns the process identifier of the calling process.
            </summary>
            <returns>The return value is the process identifier of the calling process.</returns>
        </member>
        <member name="M:OpenNETCF.Diagnostics.Process.GetCurrentThreadID">
            <summary>
            This function returns the thread identifier, which is used as a handle of the calling thread. 
            </summary>
            <returns>The thread identifier of the calling thread indicates success.</returns>
        </member>
        <member name="M:OpenNETCF.Diagnostics.Process.GetCurrentProcess">
            <summary>
            Gets a new <see cref="T:OpenNETCF.Diagnostics.Process"/> component and associates it with the currently active process.
            <para><b>New in v1.1</b></para>
            </summary>
            <returns>A new <see cref="T:OpenNETCF.Diagnostics.Process"/> component associated with the process resource that is running the calling application.</returns>
            <remarks>Use this method to create a new Process instance and associate it with the process resource on the local computer.</remarks>
        </member>
        <member name="M:OpenNETCF.Diagnostics.Process.GetCurrentThread">
            <summary>
            This function returns a pseudohandle for the current thread. 
            </summary>
            <returns>The return value is a pseudohandle for the current thread.</returns>
            <remarks>
            <p>A pseudohandle is a special constant that is interpreted as the current thread handle. </p>
            <p>The calling thread can use this handle to specify itself whenever a thread handle is required.This handle has the maximum possible access to the thread object.</p>
            <p>The function cannot be used by one thread to create a handle that can be used by other threads to refer to the first thread. The handle is always interpreted as referring to the thread that is using it.</p>
            <p>The pseudohandle need not be closed when it is no longer needed. Calling the CloseHandle function with this handle has no effect.</p>
            </remarks>
        </member>
        <member name="P:OpenNETCF.Diagnostics.Process.Handle">
            <summary>
            Returns the associated process's native handle.
            </summary>
            <value>The handle that the operating system assigned to the associated process when the process was started.
            The system uses this handle to keep track of process attributes.</value>
        </member>
        <member name="P:OpenNETCF.Diagnostics.Process.Id">
            <summary>
            Gets the unique identifier for the associated process.
            </summary>
            <remarks>The system-generated unique identifier of the process that is referenced by this <see cref="T:OpenNETCF.Diagnostics.Process"/> instance.</remarks>
        </member>
        <member name="P:OpenNETCF.Diagnostics.Process.HasExited">
            <summary>
            Gets a value indicating whether the associated process has been terminated.
            </summary>
            <remarks>true if the operating system process referenced by the <see cref="T:OpenNETCF.Diagnostics.Process"/> component has terminated; otherwise, false.</remarks>
        </member>
        <member name="P:OpenNETCF.Diagnostics.Process.ExitCode">
            <summary>
            Gets the value that the associated process specified when it terminated.
            </summary>
            <remarks>The code that the associated process specified when it terminated.</remarks>
        </member>
        <member name="P:OpenNETCF.Diagnostics.Process.StartInfo">
            <summary>
            Gets or sets the properties to pass to the <see cref="M:OpenNETCF.Diagnostics.Process.Start(System.String,System.String)"/> method of the <see cref="T:OpenNETCF.Diagnostics.Process"/>.
            </summary>
            <value>The <see cref="T:OpenNETCF.Diagnostics.ProcessStartInfo"/> that represents the data with which to start the process.
            These arguments include the name of the executable file or document used to start the process.</value>
            <exception cref="T:System.ArgumentException">The value that specifies the <see cref="P:OpenNETCF.Diagnostics.Process.StartInfo"/> is null.</exception>
            <remarks>StartInfo represents the set of parameters to use to start a process.
            When <see cref="M:OpenNETCF.Diagnostics.Process.Start(System.String,System.String)"/> is called, the <see cref="P:OpenNETCF.Diagnostics.Process.StartInfo"/> is used to specify the process to start.
            The only necessary StartInfo member to set is the <see cref="P:OpenNETCF.Diagnostics.ProcessStartInfo.FileName"/> property.
            The <see cref="P:OpenNETCF.Diagnostics.ProcessStartInfo.FileName"/> property does not need to represent an executable file.
            It can be of any file type for which the extension has been associated with an application installed on the system.
            For example the FileName can have a .txt extension if you have associated text files with an editor, such as Notepad, or it can have a .pwd if you have associated .pwd files with a word processing tool, such as Microsoft Pocket Word.</remarks>
        </member>
        <member name="E:OpenNETCF.Diagnostics.Process.Exited">
            <summary>
            Occurs when a process exits.
            </summary>
            <remarks>Note that in this partial implementation the Exited event will only be raised when a <see cref="T:OpenNETCF.Diagnostics.Process"/> is explictly Killed.
            The <see cref="T:OpenNETCF.Diagnostics.Process"/> class will not watch created processes unless you use the <see cref="M:OpenNETCF.Diagnostics.Process.WaitForExit"/> method.</remarks>
        </member>
        <member name="T:OpenNETCF.Diagnostics.ProcessStartInfo">
            <summary>
            Specifies a set of values used when starting a process.
            </summary>
            <remarks><see cref="T:OpenNETCF.Diagnostics.ProcessStartInfo"/> is used in conjunction with the <see cref="T:OpenNETCF.Diagnostics.Process"/> component.
            When you start a process using the Process class, you have access to process information in addition to that available when attaching to a running process.
            You can use the <see cref="T:OpenNETCF.Diagnostics.ProcessStartInfo"/> class for greater control over the process you start.
            You must at least set the <see cref="P:OpenNETCF.Diagnostics.ProcessStartInfo.FileName"/> property, either manually or using the constructor.
            The file name is any application or document.
            Here a document is defined to be any file type that has an open or default action associated with it.</remarks>
        </member>
        <member name="M:OpenNETCF.Diagnostics.ProcessStartInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OpenNETCF.Diagnostics.ProcessStartInfo"/> class without specifying a file name with which to start the process.
            </summary>
            <remarks>You must set at least the <see cref="P:OpenNETCF.Diagnostics.ProcessStartInfo.FileName"/> property before starting the process.
            The file name is any application or document.
            In this case, a document is defined to be any file type that has an open or default action associated with it.
            <para>Optionally, you can also set other properties before starting the process.
            The <see cref="P:OpenNETCF.Diagnostics.ProcessStartInfo.Verb"/> property supplies actions to take, such as "print", with the file indicated in the <see cref="P:OpenNETCF.Diagnostics.ProcessStartInfo.FileName"/> property.
            The <see cref="P:OpenNETCF.Diagnostics.ProcessStartInfo.Arguments"/> property supplies a way to pass command line arguments to the file when the system opens it.</para></remarks>
        </member>
        <member name="M:OpenNETCF.Diagnostics.ProcessStartInfo.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenNETCF.Diagnostics.ProcessStartInfo"/> class and specifies a file name such as an application or document with which to start the process.
            </summary>
            <param name="fileName">An application or document with which to start a process.</param>
            <remarks>The file name is any application or document.
            In this case, a document is defined to be any file type that has an open or default action associated with it.</remarks>
        </member>
        <member name="M:OpenNETCF.Diagnostics.ProcessStartInfo.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenNETCF.Diagnostics.ProcessStartInfo"/> class and specifies an application file name with which to start the process, as well as a set of command line arguments to pass to the application.
            </summary>
            <param name="fileName">An application with which to start a process.</param>
            <param name="arguments">Command line arguments to pass to the application when the process starts.</param>
            <remarks>The file name is any application or document.
            In this case, a document is defined to be any file type that has an open or default action associated with it.
            <para>You can change the <see cref="P:OpenNETCF.Diagnostics.ProcessStartInfo.FileName"/> or <see cref="P:OpenNETCF.Diagnostics.ProcessStartInfo.Arguments"/> properties after calling this constructor, up to the time that the process starts.
            After you start the process, changing these values has no effect.</para></remarks>
        </member>
        <member name="P:OpenNETCF.Diagnostics.ProcessStartInfo.Arguments">
            <summary>
            Gets or sets the set of command line arguments to use when starting the application.
            </summary>
            <value>File type-specific arguments that the system can associate with the application specified in the <see cref="P:OpenNETCF.Diagnostics.ProcessStartInfo.FileName"/> property.
            The default is an empty string ("").</value>
        </member>
        <member name="P:OpenNETCF.Diagnostics.ProcessStartInfo.FileName">
            <summary>
             Gets or sets the application or document to start.
            </summary>
            <value>The name of the application to start, or the name of a document of a file type that is associated with an application and that has a default open action available to it.
            The default is an empty string ("").</value>
            <remarks>You must set at least the <b>FileName</b> property before starting the process.
            The file name is any application or document.
            Here a document is defined to be any file type that has an open or default action associated with it.
            <para>The set of file types available to you depends in part on the value of the <see cref="P:OpenNETCF.Diagnostics.ProcessStartInfo.UseShellExecute"/> property.
            If <see cref="P:OpenNETCF.Diagnostics.ProcessStartInfo.UseShellExecute"/> is true, you are able to start any document and perform operations on the file, such as printing, with the <see cref="T:OpenNETCF.Diagnostics.Process"/> component.
            When <see cref="P:OpenNETCF.Diagnostics.ProcessStartInfo.UseShellExecute"/> is false, you are able to start only executables with the <see cref="T:OpenNETCF.Diagnostics.Process"/> component.</para></remarks>
        </member>
        <member name="P:OpenNETCF.Diagnostics.ProcessStartInfo.UseShellExecute">
            <summary>
            Gets or sets a value indicating whether to use the operating system shell to start the process.
            </summary>
            <value><b>true</b> to use the shell when starting the process; otherwise, the process is created directly from the executable file.
            The default is <b>true</b>.</value>
            <remarks>When you use the operating system shell to start processes, you are able to start any document (which is any registered file type associated with an executable that has a default open action) and perform operations on the file, such as printing, with the <see cref="T:System.Diagnostics.Process"/> component.
            When <b>UseShellExecute</b> is <b>false</b>, you are able to start only executables with the <see cref="T:System.Diagnostics.Process"/> component.</remarks>
        </member>
        <member name="P:OpenNETCF.Diagnostics.ProcessStartInfo.Verb">
            <summary>
            Gets or sets the verb to use when opening the application or document specified by the <see cref="P:OpenNETCF.Diagnostics.ProcessStartInfo.FileName"/> property.
            </summary>
            <value>The action to take with the file that the process opens.
            The default is an empty string ("").</value>
            <remarks>Each file name extension has its own set of verbs.
            For example, the "print" verb will print a document specified using <see cref="P:OpenNETCF.Diagnostics.ProcessStartInfo.FileName"/>.
            The default verb can be specified using an empty string ("").</remarks>
        </member>
        <member name="P:OpenNETCF.Diagnostics.ProcessStartInfo.WindowStyle">
            <summary>
            Gets or sets the window state to use when the process is started.
            <para><b>Not currently supported.</b></para>
            </summary>
            <value>A <see cref="T:OpenNETCF.Diagnostics.ProcessWindowStyle"/> that indicates whether the process is started in a window that is maximized, minimized, normal (neither maximized nor minimized), or not visible.
            The default is normal.</value>
        </member>
        <member name="T:OpenNETCF.Diagnostics.ProcessWindowStyle">
            <summary>
            Specified how a new window should appear when the system starts a process.
            </summary>
        </member>
        <member name="F:OpenNETCF.Diagnostics.ProcessWindowStyle.Hidden">
            <summary>
            The hidden window style.
            A window can be either visible or hidden.
            The system displays a hidden window by not drawing it.
            If a window is hidden, it is effectively disabled.
            A hidden window can process messages from the system or from other windows, but it cannot process input from the user or display output.
            Frequently, an application may keep a new window hidden while it customizes the window's appearance, and then make the window style Normal .
            </summary>
        </member>
        <member name="F:OpenNETCF.Diagnostics.ProcessWindowStyle.Maximized">
            <summary>
            The maximized window style.
            By default, the system enlarges a maximized window so that it fills the screen or, in the case of a child window, the parent window's client area.
            If the window has a title bar, the system automatically moves it to the top of the screen or to the top of the parent window's client area.
            Also, the system disables the window's sizing border and the window-positioning capability of the title bar so that the user cannot move the window by dragging the title bar.
            </summary>
        </member>
        <member name="F:OpenNETCF.Diagnostics.ProcessWindowStyle.Minimized">
            <summary>
            The minimized window style.
            By default, the system reduces a minimized window to the size of its taskbar button and moves the minimized window to the taskbar.
            </summary>
        </member>
        <member name="F:OpenNETCF.Diagnostics.ProcessWindowStyle.Normal">
            <summary>
            The normal, visible window style.
            The system displays a window with Normal style on the screen, in a default location.
            If a window is visible, the user can supply input to the window and view the window's output.
            Frequently, an application may initialize a new window to the Hidden style while it customizes the window's appearance, and then make the window style Normal.
            </summary>
        </member>
        <member name="T:OpenNETCF.Diagnostics.TraceInternalEx">
            <summary>
            Summary description for TraceInternal.
            </summary>
        </member>
        <member name="T:OpenNETCF.IO.Serial.CommEventFlags">
            <summary>
            Event Flags
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.CommEventFlags.NONE">
            <summary>
            No flags
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.CommEventFlags.RXCHAR">
            <summary>
            Event on receive
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.CommEventFlags.RXFLAG">
            <summary>
            Event when specific character is received
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.CommEventFlags.TXEMPTY">
            <summary>
            Event when the transmit buffer is empty
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.CommEventFlags.CTS">
            <summary>
            Event on CTS state change
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.CommEventFlags.DSR">
            <summary>
            Event on DSR state change
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.CommEventFlags.RLSD">
            <summary>
            Event on RLSD state change
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.CommEventFlags.BREAK">
            <summary>
            Event on BREAK
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.CommEventFlags.ERR">
            <summary>
            Event on line error
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.CommEventFlags.RING">
            <summary>
            Event on ring detect
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.CommEventFlags.PERR">
            <summary>
            Event on printer error
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.CommEventFlags.RX80FULL">
            <summary>
            Event on 80% high-water
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.CommEventFlags.EVENT1">
            <summary>
            Provider event 1
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.CommEventFlags.EVENT2">
            <summary>
            Provider event 2
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.CommEventFlags.POWER">
            <summary>
            Event on CE power notification
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.CommEventFlags.ALLCE">
            <summary>
            Mask for all flags under CE
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.CommEventFlags.ALLPC">
            <summary>
            Mask for all flags under desktop Windows
            </summary>
        </member>
        <member name="T:OpenNETCF.IO.Serial.CommErrorFlags">
            <summary>
            Error flags
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.CommErrorFlags.RXOVER">
            <summary>
            Receive overrun
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.CommErrorFlags.OVERRUN">
            <summary>
            Overrun
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.CommErrorFlags.RXPARITY">
            <summary>
            Parity error
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.CommErrorFlags.FRAME">
            <summary>
            Frame error
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.CommErrorFlags.BREAK">
            <summary>
            BREAK received
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.CommErrorFlags.TXFULL">
            <summary>
            Transmit buffer full
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.CommErrorFlags.IOE">
            <summary>
            IO Error
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.CommErrorFlags.MODE">
            <summary>
            Requested mode not supported
            </summary>
        </member>
        <member name="T:OpenNETCF.IO.Serial.CommModemStatusFlags">
            <summary>
            Modem status flags
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.CommModemStatusFlags.MS_CTS_ON">
            <summary>
            The CTS (Clear To Send) signal is on.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.CommModemStatusFlags.MS_DSR_ON">
            <summary>
            The DSR (Data Set Ready) signal is on.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.CommModemStatusFlags.MS_RING_ON">
            <summary>
            The ring indicator signal is on.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.CommModemStatusFlags.MS_RLSD_ON">
            <summary>
            The RLSD (Receive Line Signal Detect) signal is on.
            </summary>
        </member>
        <member name="T:OpenNETCF.IO.Serial.CommEscapes">
            <summary>
            Communication escapes
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.CommEscapes.SETXOFF">
            <summary>
            Causes transmission to act as if an XOFF character has been received.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.CommEscapes.SETXON">
            <summary>
            Causes transmission to act as if an XON character has been received.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.CommEscapes.SETRTS">
            <summary>
            Sends the RTS (Request To Send) signal.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.CommEscapes.CLRRTS">
            <summary>
            Clears the RTS (Request To Send) signal
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.CommEscapes.SETDTR">
            <summary>
            Sends the DTR (Data Terminal Ready) signal.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.CommEscapes.CLRDTR">
            <summary>
            Clears the DTR (Data Terminal Ready) signal.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.CommEscapes.SETBREAK">
            <summary>
            Suspends character transmission and places the transmission line in a break state until the ClearCommBreak function is called (or EscapeCommFunction is called with the CLRBREAK extended function code). The SETBREAK extended function code is identical to the SetCommBreak function. This extended function does not flush data that has not been transmitted.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.CommEscapes.CLRBREAK">
            <summary>
            Restores character transmission and places the transmission line in a nonbreak state. The CLRBREAK extended function code is identical to the ClearCommBreak function
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.CommEscapes.SETIR">
            Set the port to IR mode.
        </member>
        <member name="F:OpenNETCF.IO.Serial.CommEscapes.CLRIR">
            <summary>
            Set the port to non-IR mode.
            </summary>
        </member>
        <member name="T:OpenNETCF.IO.Serial.APIErrors">
            <summary>
            Error values from serial API calls
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.APIErrors.ERROR_FILE_NOT_FOUND">
            <summary>
            Port not found
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.APIErrors.ERROR_INVALID_NAME">
            <summary>
            Invalid port name
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.APIErrors.ERROR_ACCESS_DENIED">
            <summary>
            Access denied
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.APIErrors.ERROR_INVALID_HANDLE">
            <summary>
            invalid handle
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.APIErrors.ERROR_IO_PENDING">
            <summary>
            IO pending
            </summary>
        </member>
        <member name="T:OpenNETCF.IO.Serial.CommPortException">
            <summary>
            Exceptions throw by the OpenNETCF.IO.Serial class
            </summary>
        </member>
        <member name="M:OpenNETCF.IO.Serial.CommPortException.#ctor(System.String)">
            <summary>
            Default CommPortException
            </summary>
            <param name="desc"></param>
        </member>
        <member name="T:OpenNETCF.IO.Serial.Port">
            <summary>
            A class wrapper for serial port communications
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.Port.Capabilities">
            <summary>
            stores port's capabilities - capabilities can only be retreived not set
            </summary>
        </member>
        <member name="M:OpenNETCF.IO.Serial.Port.#ctor(System.String)">
            <summary>
            Create a serial port class.  The port will be created with defualt settings.
            </summary>
            <param name="PortName">The port to open (i.e. "COM1:")</param>
        </member>
        <member name="M:OpenNETCF.IO.Serial.Port.#ctor(System.String,OpenNETCF.IO.Serial.BasicPortSettings)">
            <summary>
            Create a serial port class.
            </summary>
            <param name="PortName">The port to open (i.e. "COM1:")</param>
            <param name="InitialSettings">BasicPortSettings to apply to the new Port</param>
        </member>
        <member name="M:OpenNETCF.IO.Serial.Port.#ctor(System.String,OpenNETCF.IO.Serial.DetailedPortSettings)">
            <summary>
            Create a serial port class.
            </summary>
            <param name="PortName">The port to open (i.e. "COM1:")</param>
            <param name="InitialSettings">DetailedPortSettings to apply to the new Port</param>
        </member>
        <member name="M:OpenNETCF.IO.Serial.Port.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Create a serial port class.
            </summary>
            <param name="PortName">The port to open (i.e. "COM1:")</param>
            <param name="RxBufferSize">Receive buffer size, in bytes</param>
            <param name="TxBufferSize">Transmit buffer size, in bytes</param>
        </member>
        <member name="M:OpenNETCF.IO.Serial.Port.#ctor(System.String,OpenNETCF.IO.Serial.BasicPortSettings,System.Int32,System.Int32)">
            <summary>
            Create a serial port class.
            </summary>
            <param name="PortName">The port to open (i.e. "COM1:")</param>
            <param name="InitialSettings">BasicPortSettings to apply to the new Port</param>
            <param name="RxBufferSize">Receive buffer size, in bytes</param>
            <param name="TxBufferSize">Transmit buffer size, in bytes</param>
        </member>
        <member name="M:OpenNETCF.IO.Serial.Port.#ctor(System.String,OpenNETCF.IO.Serial.DetailedPortSettings,System.Int32,System.Int32)">
            <summary>
            Create a serial port class.
            </summary>
            <param name="PortName">The port to open (i.e. "COM1:")</param>
            <param name="InitialSettings">DetailedPortSettings to apply to the new Port</param>
            <param name="RxBufferSize">Receive buffer size, in bytes</param>
            <param name="TxBufferSize">Transmit buffer size, in bytes</param>
        </member>
        <member name="M:OpenNETCF.IO.Serial.Port.Dispose">
            <summary>
            Dispose the object's resources
            </summary>
        </member>
        <member name="M:OpenNETCF.IO.Serial.Port.Finalize">
            <summary>
            Class destructor
            </summary>
        </member>
        <member name="M:OpenNETCF.IO.Serial.Port.Open">
            <summary>
            Open the current port
            </summary>
            <returns>true if successful, false if it fails</returns>
        </member>
        <member name="M:OpenNETCF.IO.Serial.Port.Query">
            <summary>
            Query the current port's capabilities without accessing it. You can only call the Close()
            method after reading the capabilities. This method does neither initialize nor Open() the
            port.
            </summary>
            
            <example>
            
            </example>
        </member>
        <member name="M:OpenNETCF.IO.Serial.Port.UpdateSettings">
            <summary>
            Updates communication settings of the port
            </summary>
            <returns>true if successful, false if it fails</returns>
        </member>
        <member name="M:OpenNETCF.IO.Serial.Port.Close">
            <summary>
            Close the current serial port
            </summary>
            <returns>true indicates success, false indicated failure</returns>
        </member>
        <member name="M:OpenNETCF.IO.Serial.Port.GetPortProperties">
            <summary>
            <code>GetPortProperties initializes the commprop member of the port object</code>
            </summary>
            <returns></returns>
        </member>
        <member name="E:OpenNETCF.IO.Serial.Port.OnError">
            <summary>
             A communication error has occurred
            </summary>
        </member>
        <member name="E:OpenNETCF.IO.Serial.Port.DataReceived">
            <summary>
            Serial data has been received
            </summary>
        </member>
        <member name="E:OpenNETCF.IO.Serial.Port.TxDone">
            <summary>
            Transmit complete
            </summary>
        </member>
        <member name="E:OpenNETCF.IO.Serial.Port.FlagCharReceived">
            <summary>
            Set flag character was in the receive stream
            </summary>
        </member>
        <member name="E:OpenNETCF.IO.Serial.Port.PowerEvent">
            <summary>
            Power change event has occurred
            </summary>
        </member>
        <member name="E:OpenNETCF.IO.Serial.Port.HighWater">
            <summary>
            Serial buffer's high-water level has been exceeded
            </summary>
        </member>
        <member name="E:OpenNETCF.IO.Serial.Port.DSRChange">
            <summary>
            DSR state has changed
            </summary>
        </member>
        <member name="E:OpenNETCF.IO.Serial.Port.RingChange">
            <summary>
            Ring signal has been detected
            </summary>
        </member>
        <member name="E:OpenNETCF.IO.Serial.Port.CTSChange">
            <summary>
            CTS state has changed
            </summary>
        </member>
        <member name="E:OpenNETCF.IO.Serial.Port.RLSDChange">
            <summary>
            RLSD state has changed
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.Port.PortName">
            <summary>
            The name of the Port (i.e. "COM1:")
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.Port.IsOpen">
            <summary>
            Returns whether or not the port is currently open
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.Port.Output">
            <summary>
            The Port's output buffer.  Set this property to send data.
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.Port.Input">
            <summary>
            The Port's input buffer.  Incoming data is read from here and a read will pull InputLen bytes from the buffer
            <seealso cref="P:OpenNETCF.IO.Serial.Port.InputLen"/>
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.Port.InputLen">
            <summary>
            The length of the input buffer
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.Port.InBufferCount">
            <summary>
            The actual amount of data in the input buffer
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.Port.OutBufferCount">
            <summary>
            The actual amount of data in the output buffer
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.Port.RThreshold">
            <summary>
            The number of bytes that the receive buffer must exceed to trigger a Receive event
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.Port.SThreshold">
            <summary>
            The number of bytes that the transmit buffer must exceed to trigger a Transmit event
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.Port.Break">
            <summary>
            Send or check for a communications BREAK event
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.Port.DTRAvailable">
            <summary>
            Returns whether or not the current port support a DTR signal
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.Port.DTREnable">
            <summary>
            Gets or sets the current DTR line state (true = 1, false = 0)
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.Port.RTSAvailable">
            <summary>
            Returns whether or not the current port support an RTS signal
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.Port.RTSEnable">
            <summary>
            Gets or sets the current RTS line state (true = 1, false = 0)
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.Port.IREnable">
            <summary>
            Gets or sets the com port for IR use (true = 1, false = 0)
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.Port.DetailedSettings">
            <summary>
            Get or Set the Port's DetailedPortSettings
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.Port.Settings">
            <summary>
            Get or Set the Port's BasicPortSettings
            </summary>
        </member>
        <member name="T:OpenNETCF.IO.Serial.Port.CommEvent">
            <summary>
            Raised on all enabled communication events
            </summary>
        </member>
        <member name="T:OpenNETCF.IO.Serial.Port.CommChangeEvent">
            <summary>
            Raised when the communication state changes
            </summary>
        </member>
        <member name="T:OpenNETCF.IO.Serial.Port.CommErrorEvent">
            <summary>
            Raised during any communication error
            </summary>
        </member>
        <member name="T:OpenNETCF.IO.Serial.SEP">
            <summary>
            SEP enumerates known serial provider types. Currently SERIALCOMM is the only 
            provider in this enumeration.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.SEP.SEP_SERIALCOMM">
            <summary>
            SERIALCOMM is the only service provider supported by serial APIs.
            </summary>
        </member>
        <member name="T:OpenNETCF.IO.Serial.PST">
            <summary>
            PST enumerates the provider subtypes supported by the WIN32 serial APIs. PST indicates which
            Port is used for serial communication. Ports can either be physical or logical devices.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.PST.PST_UNSPECIFIED">
            <summary>
            no provider subtype specified
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.PST.PST_RS232">
            <summary>
            RS232 Port
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.PST.PST_PARALLELPORT">
            <summary>
            parallel port
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.PST.PST_RS422">
            <summary>
            RS422 Port
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.PST.PST_RS423">
            <summary>
            RS423 Port
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.PST.PST_RS449">
            <summary>
            RS449 Port
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.PST.PST_MODEM">
            <summary>
            Modem
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.PST.PST_FAX">
            <summary>
            Fax
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.PST.PST_SCANNER">
            <summary>
            Scanner
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.PST.PST_NETWORK_BRIDGE">
            <summary>
            unspecified network bridge
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.PST.PST_LAT">
            <summary>
            DEC's LAT Port
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.PST.PST_TCPIP_TELNET">
            <summary>
            Telnet connection
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.PST.PST_X25">
            <summary>
            X.25 standard
            </summary>
        </member>
        <member name="T:OpenNETCF.IO.Serial.PCF">
            <summary>
            PCF enumerates the provider capabilites supported by the specified COMx: Port. This enumeration
            is used internaly only. Access to this bitfield information is provided through attributes of the
            CommProp class.
            </summary>
        </member>
        <member name="T:OpenNETCF.IO.Serial.SP">
            <summary>
            SP 
            </summary>
        </member>
        <member name="T:OpenNETCF.IO.Serial.BAUD">
            <summary>
            baud rates settable by Comm API 
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.BAUD.BAUD_075">
            <summary>
            75 bits per second
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.BAUD.BAUD_110">
            <summary>
            110 bits per second
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.BAUD.BAUD_134_5">
            <summary>
            134.5 bits per second
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.BAUD.BAUD_150">
            <summary>
            150 bits per second
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.BAUD.BAUD_300">
            <summary>
            300 bits per second
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.BAUD.BAUD_600">
            <summary>
            600 bits per second
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.BAUD.BAUD_1200">
            <summary>
            1,200 bits per second
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.BAUD.BAUD_1800">
            <summary>
            1,800 bits per second
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.BAUD.BAUD_2400">
            <summary>
            2,400 bits per second
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.BAUD.BAUD_4800">
            <summary>
            4,800 bits per second
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.BAUD.BAUD_7200">
            <summary>
            7,200 bits per second
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.BAUD.BAUD_9600">
            <summary>
            9,600 bits per second
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.BAUD.BAUD_14400">
            <summary>
            14,400 bits per second
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.BAUD.BAUD_19200">
            <summary>
            19,200 bits per second
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.BAUD.BAUD_38400">
            <summary>
            38,400 bits per second
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.BAUD.BAUD_56K">
            <summary>
            56 Kbits per second
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.BAUD.BAUD_128K">
            <summary>
            129 Kbits per second
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.BAUD.BAUD_115200">
            <summary>
            115,200 bits per second
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.BAUD.BAUD_57600">
            <summary>
            57,600 bits per second
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.BAUD.BAUD_USER">
            <summary>
            User defined bitrates
            </summary>
        </member>
        <member name="T:OpenNETCF.IO.Serial.CommCapabilities">
            <summary>
            Container for all available information on port's capabilties 
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.CommCapabilities.dwServiceMask">
            <summary>
            Indicates which services are supported by the port. SP_SERIALCOMM is specified for communication
            providers, including modem providers.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.CommCapabilities.dwMaxTxQueue">
            <summary>
            Specifies the maximum size, in bytes, of the driver's internal output buffer. A value of zero
            indicates that no maximum value is imposed by the driver.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.CommCapabilities.dwMaxRxQueue">
            <summary>
            Specifies the maximum size, in bytes, of the driver's internal input buffer. A value of zero
            indicates that no maximum value is imposed by the driver.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.CommCapabilities.dwMaxBaud">
            <summary>
            Specifies the maximum baud rate, in bits per second (bps).
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.CommCapabilities.dwProvSubType">
            <summary>
            Specifies the communication provider type.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.CommCapabilities.dwCurrentTxQueue">
            <summary>
            Specifies the size, in bytes, of the driver's internal output buffer. A value of zero indicates 
            that the value is unavailable.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.CommCapabilities.dwCurrentRxQueue">
            <summary>
            Specifies the size, in bytes, of the driver's internal input buffer. A value of zero indicates 
            that the value is unavailable.
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.CommCapabilities.Supports16BitMode">
            <summary>
            Port supports special 16-bit mode
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.CommCapabilities.SupportsDtrDts">
            <summary>
            Port supports DTR (Data Terminal ready) and DSR (Data Set Ready) flow control
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.CommCapabilities.SupportsIntTimeouts">
            <summary>
            Port supports interval timeouts
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.CommCapabilities.SupportsParityCheck">
            <summary>
            Port supports parity checking
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.CommCapabilities.SupportsRlsd">
            <summary>
            Port supports RLSD (Receive Line Signal Detect)
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.CommCapabilities.SupportsRtsCts">
            <summary>
            Port supports RTS (Request To Send) and CTS (Clear To Send) flowcontrol
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.CommCapabilities.SupportsSetXChar">
            <summary>
            Port supports user definded characters for XON and XOFF
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.CommCapabilities.SupportsSpecialChars">
            <summary>
            Port supports special characters
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.CommCapabilities.SupportsTotalTimeouts">
            <summary>
            Port supports total and elapsed time-outs
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.CommCapabilities.SupportsXonXoff">
            <summary>
            Port supports XON/XOFF flow control
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.CommCapabilities.SettableBaud">
            <summary>
            Baud rate can be set
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.CommCapabilities.SettableDataBits">
            <summary>
            Number of data bits can be set
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.CommCapabilities.SettableHandShaking">
            <summary>
            Handshake protocol can be set
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.CommCapabilities.SettableParity">
            <summary>
            Number of parity bits can be set
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.CommCapabilities.SettableParityCheck">
            <summary>
            Parity check can be enabled/disabled
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.CommCapabilities.SettableRlsd">
            <summary>
            Receive Line Signal detect can be enabled/disabled
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.CommCapabilities.SettableStopBits">
            <summary>
            Number of stop bits can be set
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.CommCapabilities.Supports5DataBits">
            <summary>
            Port supports 5 data bits
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.CommCapabilities.Supports6DataBits">
            <summary>
            Port supports 6 data bits
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.CommCapabilities.Supports7DataBits">
            <summary>
            Port supports 7 data bits
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.CommCapabilities.Supports8DataBits">
            <summary>
            Port supports 8 data bits
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.CommCapabilities.Supports16DataBits">
            <summary>
            Port supports 16 data bits
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.CommCapabilities.Supports16XDataBits">
            <summary>
            Port supports special wide data path through serial hardware lines
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.CommCapabilities.SupportsParityEven">
            <summary>
            Port supports even parity
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.CommCapabilities.SupportsParityMark">
            <summary>
            Port supports mark parity
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.CommCapabilities.SupportsParityNone">
            <summary>
            Port supports none parity
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.CommCapabilities.SupportsParityOdd">
            <summary>
            Port supports odd parity
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.CommCapabilities.SupportsParitySpace">
            <summary>
            Port supports space parity
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.CommCapabilities.SupportsStopBits10">
            <summary>
            Port supports 1 stop bit
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.CommCapabilities.SupportsStopBits15">
            <summary>
            Port supports 1.5 stop bits
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.CommCapabilities.SupportsStopBits20">
            <summary>
            Port supports 2 stop bits
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.CommCapabilities.HasBaud75">
            <summary>
            Port can be set to 75 bits per second
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.CommCapabilities.HasBaud110">
            <summary>
            Port can be set to 110 bits per second
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.CommCapabilities.HasBaud134_5">
            <summary>
            Port can be set to 134.5 bits per second
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.CommCapabilities.HasBaud150">
            <summary>
            Port can be set to 150 bits per second
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.CommCapabilities.HasBaud300">
            <summary>
            Port can be set to 300 bits per second
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.CommCapabilities.HasBaud600">
            <summary>
            Port can be set to 600 bits per second
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.CommCapabilities.HasBaud1200">
            <summary>
            Port can be set to 1,200 bits per second
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.CommCapabilities.HasBaud2400">
            <summary>
            Port can be set to 2,400 bits per second
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.CommCapabilities.HasBaud4800">
            <summary>
            Port can be set to 4,800 bits per second
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.CommCapabilities.HasBaud7200">
            <summary>
            Port can be set to 7,200 bits per second
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.CommCapabilities.HasBaud9600">
            <summary>
            Port can be set to 9,600 bits per second
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.CommCapabilities.HasBaud14400">
            <summary>
            Port can be set to 14,400 bits per second
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.CommCapabilities.HasBaud19200">
            <summary>
            Port can be set to 19,200 bits per second
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.CommCapabilities.HasBaud38400">
            <summary>
            Port can be set to 38,400 bits per second
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.CommCapabilities.HasBaud56K">
            <summary>
            Port can be set to 56 Kbits per second
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.CommCapabilities.HasBaud128K">
            <summary>
            Port can be set to 128 Kbits per second
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.CommCapabilities.HasBaud115200">
            <summary>
            Port can be set to 115,200 bits per second
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.CommCapabilities.HasBaud57600">
            <summary>
            Port can be set to 57,600 bits per second
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.Serial.CommCapabilities.HasBaudUser">
            <summary>
            Port can be set to user defined bit rate
            </summary>
        </member>
        <member name="T:OpenNETCF.IO.Serial.ASCII">
            <summary>
            Common ASCII Control Codes
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.ASCII.NULL">
            <summary>
            NULL
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.ASCII.SOH">
            <summary>
            Start of Heading
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.ASCII.STX">
            <summary>
            Start of Text
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.ASCII.ETX">
            <summary>
            End of Text
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.ASCII.EOT">
            <summary>
            End of Transmission
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.ASCII.ENQ">
            <summary>
            Enquiry
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.ASCII.ACK">
            <summary>
            Acknowledge
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.ASCII.BELL">
            <summary>
            Bell
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.ASCII.BS">
            <summary>
            Backspace
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.ASCII.HT">
            <summary>
            Horizontal tab
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.ASCII.LF">
            <summary>
            Line Feed
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.ASCII.VT">
            <summary>
            Vertical tab
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.ASCII.FF">
            <summary>
            Form Feed
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.ASCII.CR">
            <summary>
            Carriage Return
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.ASCII.SO">
            <summary>
            Shift out
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.ASCII.SI">
            <summary>
            Shift in
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.ASCII.DC1">
            <summary>
            Device Control 1
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.ASCII.DC2">
            <summary>
            Device Control 2
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.ASCII.DC3">
            <summary>
            Device Control 3
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.ASCII.DC4">
            <summary>
            Device Control 4
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.ASCII.NAK">
            <summary>
            No Acknowledge
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.ASCII.SYN">
            <summary>
            Synchronization
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.ASCII.ETB">
            <summary>
            End of Transmission Block
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.ASCII.CAN">
            <summary>
            Cancel
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.ASCII.EM">
            <summary>
            End of Medium
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.ASCII.SUB">
            <summary>
            Substitute Character
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.ASCII.ESC">
            <summary>
            Escape
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.ASCII.FS">
            <summary>
            Field Separator
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.ASCII.GS">
            <summary>
            Group Separator
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.ASCII.RS">
            <summary>
            Record Separator
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.ASCII.US">
            <summary>
            Unit Separator
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.ASCII.SP">
            <summary>
            Spare
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.ASCII.DEL">
            <summary>
            Delete
            </summary>
        </member>
        <member name="T:OpenNETCF.IO.Serial.Handshake">
            <summary>
            Common serial handshaking protocols
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.Handshake.none">
            <summary>
            No handshaking
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.Handshake.XonXoff">
            <summary>
            XOn/XOff handshaking
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.Handshake.CtsRts">
            <summary>
            CTS/RTS
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.Handshake.DsrDtr">
            <summary>
            DSR/DTR
            </summary>
        </member>
        <member name="T:OpenNETCF.IO.Serial.Parity">
            <summary>
            Parity
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.Parity.none">
            <summary>
            No parity
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.Parity.odd">
            <summary>
            Odd parity
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.Parity.even">
            <summary>
            Even parity
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.Parity.mark">
            <summary>
            Mark parity
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.Parity.space">
            <summary>
            Space parity
            </summary>
        </member>
        <member name="T:OpenNETCF.IO.Serial.StopBits">
            <summary>
            Stop bits
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.StopBits.one">
            <summary>
            One stop bit
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.StopBits.onePointFive">
            <summary>
            1.5 stop bits
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.StopBits.two">
            <summary>
            Two stop bits
            </summary>
        </member>
        <member name="T:OpenNETCF.IO.Serial.DTRControlFlows">
            <summary>
            DTR Flow Control
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.DTRControlFlows.disable">
            <summary>
            Disabled
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.DTRControlFlows.enable">
            <summary>
            Enabled
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.DTRControlFlows.handshake">
            <summary>
            Determined by handshaking
            </summary>
        </member>
        <member name="T:OpenNETCF.IO.Serial.RTSControlFlows">
            <summary>
            RTS Flow Control
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.RTSControlFlows.disable">
            <summary>
            Disabled
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.RTSControlFlows.enable">
            <summary>
            Enabled
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.RTSControlFlows.handshake">
            <summary>
            Determined by handshaking
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.RTSControlFlows.toggle">
            <summary>
            Toggle
            </summary>
        </member>
        <member name="T:OpenNETCF.IO.Serial.BaudRates">
            <summary>
            CE-supported baud rates (check your hardware for actual availability)
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.BaudRates.CBR_110">
            <summary>
            110bpb
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.BaudRates.CBR_300">
            <summary>
            300bps
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.BaudRates.CBR_600">
            <summary>
            600bps
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.BaudRates.CBR_1200">
            <summary>
            1200bps
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.BaudRates.CBR_2400">
            <summary>
            2400bps
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.BaudRates.CBR_4800">
            <summary>
            4800bps
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.BaudRates.CBR_9600">
            <summary>
            9600bps
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.BaudRates.CBR_14400">
            <summary>
            14.4kbps
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.BaudRates.CBR_19200">
            <summary>
            19.2kbps
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.BaudRates.CBR_38400">
            <summary>
            38.4kbps
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.BaudRates.CBR_56000">
            <summary>
            56kbps
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.BaudRates.CBR_57600">
            <summary>
            57.6kbps
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.BaudRates.CBR_115200">
            <summary>
            115kbps
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.BaudRates.CBR_128000">
            <summary>
            128kbps
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.BaudRates.CBR_230400">
            <summary>
            225kbps
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.BaudRates.CBR_256000">
            <summary>
            256kbps
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.BaudRates.CBR_460800">
            <summary>
            450kbps
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.BaudRates.CBR_921600">
            <summary>
            900kbps
            </summary>
        </member>
        <member name="T:OpenNETCF.IO.Serial.BasicPortSettings">
            <summary>
            Used for manipulating several basic Port settings of a Port class
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.BasicPortSettings.BaudRate">
            <summary>
            Baud rate (default = 19200bps)
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.BasicPortSettings.ByteSize">
            <summary>
            Byte Size of data (default = 8)
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.BasicPortSettings.Parity">
            <summary>
            Data Parity (default = none)
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.BasicPortSettings.StopBits">
            <summary>
            Number of stop bits (default = 1)
            </summary>
        </member>
        <member name="T:OpenNETCF.IO.Serial.DetailedPortSettings">
            <summary>
            Used for manipulating all settings of a Port class
            </summary>
        </member>
        <member name="M:OpenNETCF.IO.Serial.DetailedPortSettings.#ctor">
            <summary>
            Create a DetailedPortSettings class
            </summary>
        </member>
        <member name="M:OpenNETCF.IO.Serial.DetailedPortSettings.Init">
            <summary>
            These are the default port settings
            override Init() to create new defaults (i.e. common handshaking)
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.DetailedPortSettings.BasicSettings">
            <summary>
            Basic port settings
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.DetailedPortSettings.OutCTS">
            <summary>
            Specifies if the CTS (clear-to-send) signal is monitored for output flow control. If this member is TRUE and CTS is turned off, output is suspended until CTS is sent again.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.DetailedPortSettings.OutDSR">
            <summary>
            Specifies if the DSR (data-set-ready) signal is monitored for output flow control. If this member is TRUE and DSR is turned off, output is suspended until DSR is sent again. 
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.DetailedPortSettings.DTRControl">
            <summary>
            Specifies the DTR (data-terminal-ready) flow control.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.DetailedPortSettings.DSRSensitive">
            <summary>
            Specifies if the communications driver is sensitive to the state of the DSR signal. If this member is TRUE, the driver ignores any bytes received, unless the DSR modem input line is high.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.DetailedPortSettings.TxContinueOnXOff">
            <summary>
            Specifies if transmission stops when the input buffer is full and the driver has transmitted the XoffChar character. If this member is TRUE, transmission continues after the input buffer has come within XoffLim bytes of being full and the driver has transmitted the XoffChar character to stop receiving bytes. If this member is FALSE, transmission does not continue until the input buffer is within XonLim bytes of being empty and the driver has transmitted the XonChar character to resume reception.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.DetailedPortSettings.OutX">
            <summary>
            Specifies if XON/XOFF flow control is used during transmission. If this member is TRUE, transmission stops when the XoffChar character is received and starts again when the XonChar character is received.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.DetailedPortSettings.InX">
            <summary>
            Specifies if XON/XOFF flow control is used during reception. If this member is TRUE, the XoffChar character is sent when the input buffer comes within XoffLim bytes of being full, and the XonChar character is sent when the input buffer comes within XonLim bytes of being empty
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.DetailedPortSettings.ReplaceErrorChar">
            <summary>
            Specifies if bytes received with parity errors are replaced with the character specified by the ErrorChar member. If this member is TRUE and the fParity member is TRUE, replacement occurs.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.DetailedPortSettings.RTSControl">
            <summary>
            Specifies the RTS (request-to-send) flow control. If this value is zero, the default is RTS_CONTROL_HANDSHAKE. The following table shows possible values for this member.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.DetailedPortSettings.DiscardNulls">
            <summary>
            Specifies if null bytes are discarded. If this member is TRUE, null bytes are discarded when received. 
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.DetailedPortSettings.AbortOnError">
            <summary>
            Specifies if read and write operations are terminated if an error occurs. If this member is TRUE, the driver terminates all read and write operations with an error status if an error occurs. The driver will not accept any further communications operations until the application has acknowledged the error by calling the ClearError function.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.DetailedPortSettings.XonChar">
            <summary>
            Specifies the value of the XON character for both transmission and reception
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.DetailedPortSettings.XoffChar">
            <summary>
            Specifies the value of the XOFF character for both transmission and reception.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.DetailedPortSettings.ErrorChar">
            <summary>
            Specifies the value of the character used to replace bytes received with a parity error.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.DetailedPortSettings.EOFChar">
            <summary>
            Specifies the value of the character used to signal the end of data. 
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.Serial.DetailedPortSettings.EVTChar">
            <summary>
            Specifies the value of the character used to signal an event.
            </summary>
        </member>
        <member name="T:OpenNETCF.IO.Serial.HandshakeNone">
            <summary>
            A common implementation of DetailedPortSettings for non handshaking
            </summary>
        </member>
        <member name="M:OpenNETCF.IO.Serial.HandshakeNone.Init">
            <summary>
            Initialize the port
            </summary>
        </member>
        <member name="T:OpenNETCF.IO.Serial.HandshakeXonXoff">
            <summary>
            A common implementation of DetailedPortSettings for XON/XOFF handshaking
            </summary>
        </member>
        <member name="M:OpenNETCF.IO.Serial.HandshakeXonXoff.Init">
            <summary>
            Initialize the port
            </summary>
        </member>
        <member name="T:OpenNETCF.IO.Serial.HandshakeCtsRts">
            <summary>
            A common implementation of DetailedPortSettings for CTS/RTS handshaking
            </summary>
        </member>
        <member name="M:OpenNETCF.IO.Serial.HandshakeCtsRts.Init">
            <summary>
            Initialize the port
            </summary>
        </member>
        <member name="T:OpenNETCF.IO.Serial.HandshakeDsrDtr">
            <summary>
            A common implementation of DetailedPortSettings for DSR/DTR handshaking
            </summary>
        </member>
        <member name="M:OpenNETCF.IO.Serial.HandshakeDsrDtr.Init">
            <summary>
            Initialize the port
            </summary>
        </member>
        <member name="T:OpenNETCF.IO.ObjectStoreInformation">
            <summary>
            Describes the current status of the Object Store
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.ObjectStoreInformation.StoreSize">
            <summary>
            Size of the Object Store in Bytes
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.ObjectStoreInformation.FreeSize">
            <summary>
            Free space in the Object Store in Bytes
            </summary>
        </member>
        <member name="M:OpenNETCF.IO.ObjectStoreInformation.GetStoreInformation">
            <summary>
            This function retrieves the size of the object store and the amount of free space currently in the object store
            </summary>
            <returns>An <see cref="T:OpenNETCF.IO.ObjectStoreInformation"/> struct with the current status of the Object Store.</returns>
        </member>
        <member name="T:OpenNETCF.IO.FileEx">
            <summary>
            Provides additional file related functionality.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.FileEx.MaxPath">
            <summary>
            Maximum length of Filepath string (in characters)
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.FileEx.InvalidHandle">
            <summary>
            Represents an invalid native operating system handle.
            </summary>
        </member>
        <member name="M:OpenNETCF.IO.FileEx.AppendText(System.String)">
            <summary>
            Creates a StreamWriter that appends UTF-8 encoded text to an existing file.
            </summary>
            <param name="path">The path to the file to append to.</param>
            <returns>A StreamWriter that appends UTF-8 encoded text to an existing file.</returns>
        </member>
        <member name="M:OpenNETCF.IO.FileEx.Copy(System.String,System.String)">
            <summary>
            Copies an existing file to a new file.  Overwriting a file of the same name is not allowed.
            </summary>
            <param name="sourceFileName">The file to copy.</param>
            <param name="destFileName">The name of the destination file. This cannot be a directory or an existing file.</param>
        </member>
        <member name="M:OpenNETCF.IO.FileEx.Copy(System.String,System.String,System.Boolean)">
            <summary>
            Copies an existing file to a new file. Overwriting a file of the same name is allowed.
            </summary>
            <param name="sourceFileName">The file to copy.</param>
            <param name="destFileName">The name of the destination file. This cannot be a directory or an existing file.</param>
            <param name="overwrite"><b>true</b> if the destination file can be overwritten; otherwise, <b>false</b>.</param>
        </member>
        <member name="M:OpenNETCF.IO.FileEx.Create(System.String)">
            <summary>
            Creates or overwrites the specified file.
            </summary>
            <param name="path">The name of the file.</param>
            <returns>A FileStream that provides read/write access to the specified file.</returns>
        </member>
        <member name="M:OpenNETCF.IO.FileEx.Create(System.String,System.Int32)">
            <summary>
            Creates or overwrites the specified file.
            </summary>
            <param name="path">The name of the file.</param>
            <param name="bufferSize">The number of bytes buffered for reads and writes to the file.</param>
            <returns>A new file with the specified buffer size.</returns>
        </member>
        <member name="M:OpenNETCF.IO.FileEx.CreateText(System.String)">
            <summary>
            Creates or opens a file for writing UTF-8 encoded text.
            </summary>
            <param name="path">The file to be opened for writing.</param>
            <returns>A StreamWriter that writes to the specified file using UTF-8 encoding.</returns>
            <exception cref="T:System.ArgumentException">path is a zero-length string, contains only white space, or contains one or more invalid characters as defined by InvalidPathChars.</exception>
        </member>
        <member name="M:OpenNETCF.IO.FileEx.Delete(System.String)">
            <summary>
            Deletes the specified file. An exception is not thrown if the specified file does not exist.
            </summary>
            <param name="path">The name of the file to be deleted. </param>
        </member>
        <member name="M:OpenNETCF.IO.FileEx.Exists(System.String)">
            <summary>
            Determines whether the specified file exists.
            </summary>
            <param name="path">The file to check.</param>
            <returns><b>true</b> if the caller has the required permissions and path contains the name of an existing file; otherwise, <b>false</b>. This method also returns <b>false</b> if path is a null reference (Nothing in Visual Basic) or a zero-length string. If the caller does not have sufficient permissions to read the specified file, no exception is thrown and the method returns <b>false</b> regardless of the existence of path.</returns>
        </member>
        <member name="M:OpenNETCF.IO.FileEx.GetCreationTime(System.String)">
            <summary>
            Returns the creation date and time of the specified file or directory.
            </summary>
            <param name="path">The file or directory for which to obtain creation date and time information.</param>
            <returns><seealso cref="T:System.DateTime"/>A DateTime structure set to the creation date and time for the specified file or directory. This value is expressed in local time.</returns>
        </member>
        <member name="M:OpenNETCF.IO.FileEx.GetCreationTimeUtc(System.String)">
            <summary>
            Returns the creation date and time, in coordinated universal time (UTC), of the specified file or directory.
            </summary>
            <param name="path">The file or directory for which to obtain creation date and time information.</param>
            <returns>A DateTime structure set to the creation date and time for the specified file or directory. This value is expressed in UTC time.</returns>
        </member>
        <member name="M:OpenNETCF.IO.FileEx.GetLastAccessTime(System.String)">
            <summary>
            Returns the date and time the specified file or directory was last accessed.
            </summary>
            <param name="path">The file or directory for which to obtain access date and time information.</param>
            <returns>A DateTime structure set to the date and time that the specified file or directory was last accessed. This value is expressed in local time.</returns>
        </member>
        <member name="M:OpenNETCF.IO.FileEx.GetLastAccessTimeUtc(System.String)">
            <summary>
            Returns the date and time the specified file or directory was last accessed.
            </summary>
            <param name="path">The file or directory for which to obtain access date and time information.</param>
            <returns>A DateTime structure set to the date and time that the specified file or directory was last accessed. This value is expressed in UTC time.</returns>
        </member>
        <member name="M:OpenNETCF.IO.FileEx.GetLastWriteTime(System.String)">
            <summary>
            Returns the date and time the specified file or directory was last written to.
            </summary>
            <param name="path">The file or directory for which to obtain access date and time information.</param>
            <returns>A DateTime structure set to the date and time that the specified file or directory was last written to. This value is expressed in local time.</returns>
        </member>
        <member name="M:OpenNETCF.IO.FileEx.GetLastWriteTimeUtc(System.String)">
            <summary>
            Returns the date and time the specified file or directory was last written to.
            </summary>
            <param name="path">The file or directory for which to obtain access date and time information.</param>
            <returns>A DateTime structure set to the date and time that the specified file or directory was last written to. This value is expressed in UTC time.</returns>
        </member>
        <member name="M:OpenNETCF.IO.FileEx.Move(System.String,System.String)">
            <summary>
            Moves a specified file to a new location, providing the option to specify a new file name.
            </summary>
            <param name="sourceFileName">The name of the file to move.</param>
            <param name="destFileName">The new path for the file.</param>
        </member>
        <member name="M:OpenNETCF.IO.FileEx.Open(System.String,System.IO.FileMode)">
            <summary>
            Opens a FileStream on the specified path.
            </summary>
            <param name="path">The file to open.</param>
            <param name="mode">A FileMode value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten.</param>
            <returns>A FileStream on the specified path.</returns>
        </member>
        <member name="M:OpenNETCF.IO.FileEx.Open(System.String,System.IO.FileMode,OpenNETCF.IO.FileAccessEx)">
            <summary>
            Opens a FileStream on the specified path.
            </summary>
            <param name="path">The file to open.</param>
            <param name="mode">A FileMode value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten.</param>
            <param name="access">A FileAccess value that specifies the operations that can be performed on the file.</param>
            <returns>A FileStream on the specified path, having the specified mode with read, write, or read/write access.</returns>
        </member>
        <member name="M:OpenNETCF.IO.FileEx.Open(System.String,System.IO.FileMode,OpenNETCF.IO.FileAccessEx,OpenNETCF.IO.FileShare)">
            <summary>
            Opens a FileStream on the specified path.
            </summary>
            <param name="path">The file to open.</param>
            <param name="mode">A FileMode value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten.</param>
            <param name="access">A FileAccess value that specifies the operations that can be performed on the file.</param>
            <param name="share">A FileShare value specifying the type of access other threads have to the file. </param>
            <returns>A FileStream on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option.</returns>
        </member>
        <member name="M:OpenNETCF.IO.FileEx.OpenRead(System.String)">
            <summary>
            Opens an existing file for reading.
            </summary>
            <param name="path">The file to be opened for reading.</param>
            <returns>A read-only FileStream on the specified path.</returns>
        </member>
        <member name="M:OpenNETCF.IO.FileEx.OpenText(System.String)">
            <summary>
            Opens an existing UTF-8 encoded text file for reading.
            </summary>
            <param name="path">The file to be opened for reading.</param>
            <returns>A StreamReader on the specified path.</returns>
        </member>
        <member name="M:OpenNETCF.IO.FileEx.OpenWrite(System.String)">
            <summary>
            Opens an existing file for writing.
            </summary>
            <param name="path">The file to be opened for writing.</param>
            <returns>A read/write, unshared FileStream object on the specified path.</returns>
        </member>
        <member name="M:OpenNETCF.IO.FileEx.GetAttributes(System.String)">
            <summary>
            Gets the FileAttributes of the file on the path.
            <seealso cref="T:System.IO.FileAttributes"/>
            </summary>
            <param name="path">The path to the file.</param>
            <returns>The FileAttributes of the file on the path, or -1 if the path or file is not found.</returns>
            <exception cref="T:System.ArgumentException">path is empty, contains only white spaces, or contains invalid characters.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
            <exception cref="T:System.NotSupportedException">path is in an invalid format.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception>
        </member>
        <member name="M:OpenNETCF.IO.FileEx.SetAttributes(System.String,System.IO.FileAttributes)">
            <summary>
            Sets the specified FileAttributes of the file on the specified path.
            </summary>
            <param name="path">The path to the file.</param>
            <param name="fileAttributes"><seealso cref="T:System.IO.FileAttributes"/>The desired FileAttributes, such as Hidden, ReadOnly, Normal, and Archive.</param>
        </member>
        <member name="M:OpenNETCF.IO.FileEx.SetCreationTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the date and time, in coordinated universal time (UTC), that the file was created.</summary>
            <param name="path">The file for which to set the creation date and time information.</param>
            <param name="creationTimeUtc">A DateTime containing the value to set for the creation date and time of path. This value is expressed in UTC time.</param>
        </member>
        <member name="M:OpenNETCF.IO.FileEx.SetCreationTime(System.String,System.DateTime)">
            <summary>
            Sets the date and time, in local time, that the file was created.</summary>
            <param name="path">The file for which to set the creation date and time information.</param>
            <param name="creationTime">A DateTime containing the value to set for the creation date and time of path. This value is expressed in local time.</param>
        </member>
        <member name="M:OpenNETCF.IO.FileEx.SetLastAccessTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the date and time, in coordinated universal time (UTC), that the file was last accessed.</summary>
            <param name="path">The file for which to set the creation date and time information.</param>
            <param name="lastAccessTimeUtc">A DateTime containing the value to set for the last access date and time of path. This value is expressed in UTC time.</param>
        </member>
        <member name="M:OpenNETCF.IO.FileEx.SetLastAccessTime(System.String,System.DateTime)">
            <summary>
            Sets the date and time, in local time, that the file was last accessed.</summary>
            <param name="path">The file for which to set the creation date and time information.</param>
            <param name="lastAccessTime">A DateTime containing the value to set for the last access date and time of path. This value is expressed in local time.</param>
        </member>
        <member name="M:OpenNETCF.IO.FileEx.SetLastWriteTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the date and time, in coordinated universal time (UTC), that the file was last updated or written to.</summary>
            <param name="path">The file for which to set the creation date and time information.</param>
            <param name="lastWriteTimeUtc">A DateTime containing the value to set for the last write date and time of path. This value is expressed in UTC time.</param>
        </member>
        <member name="M:OpenNETCF.IO.FileEx.SetLastWriteTime(System.String,System.DateTime)">
            <summary>
            Sets the date and time, in local time, that the file was last updated or written to.</summary>
            <param name="path">The file for which to set the creation date and time information.</param>
            <param name="lastWriteTime">A DateTime containing the value to set for the last write date and time of path. This value is expressed in local time.</param>
        </member>
        <member name="M:OpenNETCF.IO.FileEx.CreateFile(System.String,OpenNETCF.IO.FileAccess,OpenNETCF.IO.FileShare,OpenNETCF.IO.FileCreateDisposition,System.Int32)">
            <summary>
            Wrapper around the CreateFile API
            </summary>
            <param name="fileName">Path to the file or CE port name</param>
            <param name="desiredAccess">Specifies the type of access to the object. An application can obtain read access, write access, read-write access, or device query access.</param>
            <param name="shareMode">Specifies how the object can be shared.</param>
            <param name="creationDisposition">Specifies which action to take on files that exist, and which action to take when files do not exist.</param>
            <param name="flagsAndAttributes">Specifies the file attributes and flags for the file.</param>
            <returns>Handle to the created file</returns>
        </member>
        <member name="M:OpenNETCF.IO.FileEx.WriteFile(System.IntPtr,System.Byte[],System.Int32,System.Int32@)">
            <summary>
            This function writes data to a file.
            </summary>
            <remarks> WriteFile starts writing data to the file at the position indicated by the file pointer. After the write operation has been completed, the file pointer is adjusted by the number of bytes actually written.</remarks>
            <param name="hFile">Handle to the file to be written to. The file handle must have been created with GENERIC_WRITE access to the file.</param>
            <param name="lpBuffer">Buffer containing the data to be written to the file.</param>
            <param name="nNumberOfBytesToWrite">Number of bytes to write to the file.</param>
            <param name="lpNumberOfBytesWritten">Number of bytes written by this function call. WriteFile sets this value to zero before doing any work or error checking.</param>
        </member>
        <member name="M:OpenNETCF.IO.FileEx.ReadFile(System.IntPtr,System.Byte[],System.Int32,System.Int32@)">
            <summary>
            This function reads data from a file, starting at the position indicated by the file pointer. After the read operation has been completed, the file pointer is adjusted by the number of bytes actually read.
            </summary>
            <param name="hFile">Handle to the file to be read. The file handle must have been created with GENERIC_READ access to the file. This parameter cannot be a socket handle.</param>
            <param name="lpBuffer">Buffer that receives the data read from the file.</param>
            <param name="nNumberOfBytesToRead">Number of bytes to be read from the file.</param>
            <param name="lpNumberOfBytesRead">number of bytes read. ReadFile sets this value to zero before doing any work or error checking.</param>
        </member>
        <member name="M:OpenNETCF.IO.FileEx.CloseHandle(System.IntPtr)">
            <summary>
            This function closes an open object handle
            </summary>
            <param name="hObject">Object Handle, Could be any of the following Objects:- Communications device, Mutex, Database, Process, Event, Socket, File or Thread</param>
        </member>
        <member name="M:OpenNETCF.IO.FileEx.DeviceIoControlCE(System.IntPtr,System.Int32,System.Byte[],System.Int32,System.Byte[],System.Int32,System.Int32@,System.IntPtr)">
            <summary>
            <i>New in SDF version 1.1</i>
            </summary>
            <param name="hDevice"></param>
            <param name="dwIoControlCode"></param>
            <param name="lpInBuffer"></param>
            <param name="nInBufferSize"></param>
            <param name="lpOutBuffer"></param>
            <param name="nOutBufferSize"></param>
            <param name="lpBytesReturned"></param>
            <param name="lpOverlapped"></param>
            <returns></returns>
        </member>
        <member name="M:OpenNETCF.IO.FileEx.SetFilePointerCE(System.IntPtr,System.Int32,System.Int32,OpenNETCF.IO.FileEx.MoveMethod)">
            <summary>
            <i>New in SDF version 1.1</i>
            </summary>
            <param name="hFile"></param>
            <param name="lDistanceToMove"></param>
            <param name="lpDistanceToMoveHigh"></param>
            <param name="dwMoveMethod"></param>
            <returns></returns>
        </member>
        <member name="T:OpenNETCF.IO.FileEx.MoveMethod">
            <summary>
            Use by Seek for determining move start position
            <i>New in SDF version 1.1</i>
            <seealso cref="M:OpenNETCF.IO.StreamInterfaceDriver.Seek(System.Int32,OpenNETCF.IO.FileEx.MoveMethod)"/>
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.FileEx.MoveMethod.FileBeginning">
            <summary>
            The start of the file
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.FileEx.MoveMethod.CurrentPosition">
            <summary>
            The current file pointer position
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.FileEx.MoveMethod.FileEnd">
            <summary>
            The end of the file
            </summary>
        </member>
        <member name="T:OpenNETCF.IO.FileAccess">
            <summary>
            CreateFile file access flags
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.FileAccess.Read">
            <summary>
            Read access to the file.  Data can be read from the file.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.FileAccess.Write">
            <summary>
            Write access to the file.  Data can be written to the file.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.FileAccess.Execute">
            <summary>
            Execute permission. The file can be executed.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.FileAccess.All">
            <summary>
            All permissions.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.FileAccessEx.Read">
            <summary>
            Read access to the file. Data can be read from the file. Combine with Write for read/write access.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.FileAccessEx.Write">
            <summary>
            Write access to the file.  Data can be written to the file.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.FileAccessEx.ReadWrite">
            <summary>
            Read and write access to the file. Data can be written to and read from the file.
            </summary>
        </member>
        <member name="T:OpenNETCF.IO.FileShare">
            <summary>
            CreateFile file share mode
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.FileShare.None">
            <summary>
            Declines sharing of the current file.
            Any request to open the file (by this process or another process) will fail until the file is closed.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.FileShare.Read">
            <summary>
            Allows subsequent opening of the file for reading.
            If this flag is not specified, any request to open the file for reading (by this process or another process) will fail until the file is closed.
            However, if this flag is specified additional permissions might still be needed to access the file.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.FileShare.Write">
            <summary>
            Allows subsequent opening of the file for writing.
            If this flag is not specified, any request to open the file for writing (by this process or another process) will fail until the file is closed.
            However, if this flag is specified additional permissions might still be needed to access the file.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.FileShare.ReadWrite">
            <summary>
            Allows subsequent opening of the file for reading or writing.
            If this flag is not specified, any request to open the file for writing or reading (by this process or another process) will fail until the file is closed.
            However, if this flag is specified additional permissions might still be needed to access the file.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.FileShare.Delete">
            <summary>
            Allows the file to be deleted.
            </summary>
        </member>
        <member name="T:OpenNETCF.IO.FileCreateDisposition">
            <summary>
            Specifies which action to take on files that exist, and which action to take when files do not exist.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.FileCreateDisposition.CreateNew">
            <summary>
            Creates a new file.
            The function fails if the specified file already exists.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.FileCreateDisposition.CreateAlways">
            <summary>
            Creates a new file.
            If the file exists, the function overwrites the file and clears the existing attributes.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.FileCreateDisposition.OpenExisting">
            <summary>
            Opens the file.
            The function fails if the file does not exist.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.FileCreateDisposition.OpenAlways">
            <summary>
            Opens the file, if it exists.
            If the file does not exist, the function creates the file as if dwCreationDisposition were <b>CreateNew</b>.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.FileCreateDisposition.TruncateExisting">
            <summary>
            Opens the file.
            Once opened, the file is truncated so that its size is zero bytes. The calling process must open the file with at least Write access.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.FileCreateDisposition.OpenForLoader">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenNETCF.IO.FileFlags">
            <summary>
            CreateFile file flags
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.FileFlags.WriteThrough">
            <summary>
            Instructs the system to write through any intermediate cache and go directly to disk.
            The system can still cache write operations, but cannot lazily flush them.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.FileFlags.Overlapped">
            <summary>
            This flag is not supported; however, multiple read/write operations pending on a device at a time are allowed.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.FileFlags.RandomAccess">
            <summary>
            Indicates that the file is accessed randomly.
            The system can use this as a hint to optimize file caching.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.FileFlags.SequentialScan">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.FileFlags.DeleteOnClose">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenNETCF.IO.FileSystemEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:OpenNETCF.IO.FileSystemWatcher.Changed"/>, <see cref="E:OpenNETCF.IO.FileSystemWatcher.Created"/>, or <see cref="E:OpenNETCF.IO.FileSystemWatcher.Deleted"/> event of a <see cref="T:OpenNETCF.IO.FileSystemWatcher"/> class.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:OpenNETCF.IO.FileSystemEventArgs"/> that contains the event data.</param>
            <seealso cref="T:OpenNETCF.IO.FileSystemEventArgs"/>
            <seealso cref="T:OpenNETCF.IO.RenamedEventArgs"/>
        </member>
        <member name="T:OpenNETCF.IO.RenamedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:OpenNETCF.IO.FileSystemWatcher.Renamed"/> event of a <see cref="T:OpenNETCF.IO.FileSystemWatcher"/> class.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:OpenNETCF.IO.RenamedEventArgs"/> that contains the event data.</param>
            <seealso cref="T:OpenNETCF.IO.RenamedEventArgs"/>
            <seealso cref="T:OpenNETCF.IO.FileSystemEventHandler"/>
            <seealso cref="T:OpenNETCF.IO.FileSystemEventArgs"/>
        </member>
        <member name="T:OpenNETCF.IO.WatcherChangeTypes">
            <summary>
            Changes that might occur to a file or directory.
            </summary>
            <remarks>Each <see cref="T:OpenNETCF.IO.WatcherChangeTypes"/> member is associated with an event in <see cref="T:OpenNETCF.IO.FileSystemWatcher"/>.
            For more information on the events, see <see cref="E:OpenNETCF.IO.FileSystemWatcher.Changed"/>, <see cref="E:OpenNETCF.IO.FileSystemWatcher.Created"/>, <see cref="E:OpenNETCF.IO.FileSystemWatcher.Deleted"/> and <see cref="E:OpenNETCF.IO.FileSystemWatcher.Renamed"/>.</remarks>
        </member>
        <member name="F:OpenNETCF.IO.WatcherChangeTypes.All">
            <summary>
            The creation, deletion, change, or renaming of a file or folder. 
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.WatcherChangeTypes.Changed">
            <summary>
            The change of a file or folder. The types of changes include: changes to size, attributes, security settings, last write, and last access time.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.WatcherChangeTypes.Created">
            <summary>
            The creation of a file or folder.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.WatcherChangeTypes.Deleted">
            <summary>
            The deletion of a file or folder.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.WatcherChangeTypes.Renamed">
            <summary>
            The renaming of a file or folder.
            </summary>
        </member>
        <member name="T:OpenNETCF.IO.NotifyFilters">
            <summary>
            Specifies changes to watch for in a file or folder.
            </summary>
            <remarks>You can combine the members of this enumeration to watch for more than one kind of change. For example, you can watch for changes in the size of a file or folder, and for changes in security settings. This raises an event anytime there is a change in size or security settings of a file or folder.</remarks>
            <seealso cref="T:OpenNETCF.IO.FileSystemWatcher"/>
            <seealso cref="T:OpenNETCF.IO.FileSystemEventArgs"/>
            <seealso cref="T:OpenNETCF.IO.FileSystemEventHandler"/>
            <seealso cref="T:OpenNETCF.IO.RenamedEventArgs"/>
            <seealso cref="T:OpenNETCF.IO.RenamedEventHandler"/>
            <seealso cref="T:OpenNETCF.IO.WatcherChangeTypes"/>
        </member>
        <member name="F:OpenNETCF.IO.NotifyFilters.Attributes">
            <summary>
            The attributes of the file or folder.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.NotifyFilters.CreationTime">
            <summary>
            The time the file or folder was created.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.NotifyFilters.DirectoryName">
            <summary>
            The name of the directory.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.NotifyFilters.FileName">
            <summary>
            The name of the file.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.NotifyFilters.LastAccess">
            <summary>
            The date the file or folder was last opened.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.NotifyFilters.LastWrite">
            <summary>
            The date the file or folder last had anything written to it.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.NotifyFilters.Security">
            <summary>
            The security settings of the file or folder.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.NotifyFilters.Size">
            <summary>
            The size of the file or folder.
            </summary>
        </member>
        <member name="T:OpenNETCF.IO.FileSystemEventArgs">
            <summary>
            Provides data for the directory events: <see cref="E:OpenNETCF.IO.FileSystemWatcher.Changed"/>, <see cref="E:OpenNETCF.IO.FileSystemWatcher.Created"/>, <see cref="E:OpenNETCF.IO.FileSystemWatcher.Deleted"/>.
            </summary>
            <remarks>The <b>FileSystemEventArgs</b> class is passed as a parameter to event handlers for these events:
            <para>The <see cref="E:OpenNETCF.IO.FileSystemWatcher.Changed"/> event occurs when changes are made to the size, system attributes, last write time, last access time, or security permissions in a file or directory in the specified <see cref="P:OpenNETCF.IO.FileSystemWatcher.Path"/> of a <see cref="T:OpenNETCF.IO.FileSystemWatcher"/>.</para>
            <para>The <see cref="E:OpenNETCF.IO.FileSystemWatcher.Created"/> event occurs when a file or directory in the specified <see cref="P:OpenNETCF.IO.FileSystemWatcher.Path"/> of a <see cref="T:OpenNETCF.IO.FileSystemWatcher"/> is created.</para>
            <para>The <see cref="E:OpenNETCF.IO.FileSystemWatcher.Deleted"/> event occurs when a file or directory in the specified <see cref="P:OpenNETCF.IO.FileSystemWatcher.Path"/> of a <see cref="T:OpenNETCF.IO.FileSystemWatcher"/> is deleted. For more information, see <see cref="T:OpenNETCF.IO.FileSystemWatcher"/>.</para></remarks>
        </member>
        <member name="M:OpenNETCF.IO.FileSystemEventArgs.#ctor(OpenNETCF.IO.WatcherChangeTypes,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenNETCF.IO.FileSystemEventArgs"/> class.
            </summary>
            <param name="changeType">One of the <see cref="T:OpenNETCF.IO.WatcherChangeTypes"/> values, which represents the kind of change detected in the file system.</param>
            <param name="directory">The root directory of the affected file or directory.</param>
            <param name="name">The name of the affected file or directory.</param>
        </member>
        <member name="P:OpenNETCF.IO.FileSystemEventArgs.ChangeType">
            <summary>
            Gets the type of directory event that occurred.
            </summary>
            <value>One of the <see cref="T:OpenNETCF.IO.WatcherChangeTypes"/> values that represents the kind of change detected in the file system.</value>
            <seealso cref="T:OpenNETCF.IO.FileSystemEventArgs"/>
            <seealso cref="T:OpenNETCF.IO.WatcherChangeTypes"/>
        </member>
        <member name="P:OpenNETCF.IO.FileSystemEventArgs.FullPath">
            <summary>
            Gets the fully qualifed path of the affected file or directory.
            </summary>
            <value>The path of the affected file or directory.</value>
        </member>
        <member name="P:OpenNETCF.IO.FileSystemEventArgs.Name">
            <summary>
            Gets the name of the affected file or directory.
            </summary>
            <value>The name of the affected file or directory.</value>
        </member>
        <member name="T:OpenNETCF.IO.RenamedEventArgs">
            <summary>
            Provides data for the Renamed event.
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.RenamedEventArgs.OldFullPath">
            <summary>
            Gets the previous fully qualified path of the affected file or directory.
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.RenamedEventArgs.OldName">
            <summary>
            Gets the old name of the affected file or directory.
            </summary>
        </member>
        <member name="T:OpenNETCF.IO.FileSystemWatcher">
            <summary>
            Listens to the file system change notifications and raises events when a directory, or file in a directory, changes.
            </summary>
        </member>
        <member name="M:OpenNETCF.IO.FileSystemWatcher.#ctor">
            <summary>
            Initializes a new instance of the <b>FileSystemWatcher</b> class.
            </summary>
        </member>
        <member name="M:OpenNETCF.IO.FileSystemWatcher.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <b>FileSystemWatcher</b> class, given the specified directory to monitor.
            </summary>
            <param name="path">The directory to monitor, in standard or Universal Naming Convention (UNC) notation.</param>
        </member>
        <member name="M:OpenNETCF.IO.FileSystemWatcher.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <b>FileSystemWatcher</b> class, given the specified directory and type of files to monitor.
            </summary>
            <param name="path">The directory to monitor, in standard or Universal Naming Convention (UNC) notation.</param>
            <param name="filter">The type of files to watch. For example, "*.txt" watches for changes to all text files.</param>
        </member>
        <member name="M:OpenNETCF.IO.FileSystemWatcher.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the <see cref="T:OpenNETCF.IO.FileSystemWatcher"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:OpenNETCF.IO.FileSystemWatcher.Dispose">
            <summary>
            Releases the resources used by the <see cref="T:OpenNETCF.IO.FileSystemWatcher"/>.
            </summary>
        </member>
        <member name="M:OpenNETCF.IO.FileSystemWatcher.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:OpenNETCF.IO.FileSystemWatcher"/> and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="E:OpenNETCF.IO.FileSystemWatcher.Created">
            <summary>
            Occurs when a file or directory in the specified <see cref="P:OpenNETCF.IO.FileSystemWatcher.Path"/> is created.
            </summary>
        </member>
        <member name="E:OpenNETCF.IO.FileSystemWatcher.Changed">
            <summary>
            Occurs when a file or directory in the specified <see cref="P:OpenNETCF.IO.FileSystemWatcher.Path"/> is changed.
            </summary>
        </member>
        <member name="E:OpenNETCF.IO.FileSystemWatcher.Deleted">
            <summary>
            Occurs when a file or directory in the specified <see cref="P:OpenNETCF.IO.FileSystemWatcher.Path"/> is deleted.
            </summary>
        </member>
        <member name="E:OpenNETCF.IO.FileSystemWatcher.Renamed">
            <summary>
            Occurs when a file or directory in the specified <see cref="P:OpenNETCF.IO.FileSystemWatcher.Path"/> is renamed.
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.FileSystemWatcher.EnableRaisingEvents">
            <summary>
            Gets or sets a value indicating whether the component is enabled.
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.FileSystemWatcher.IncludeSubdirectories">
            <summary>
            Gets or sets a value indicating whether subdirectories within the specified path should be monitored.
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.FileSystemWatcher.NotifyFilter">
            <summary>
            Gets or sets the type of changes to watch for.
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.FileSystemWatcher.Path">
            <summary>
            Gets or sets the path of the directory to watch.
            </summary>
        </member>
        <member name="P:OpenNETCF.IO.FileSystemWatcher.Filter">
            <summary>
            Gets or sets the filter string, used to determine what files are monitored in a directory.
            </summary>
        </member>
        <member name="T:OpenNETCF.IO.StorageCard">
            <summary>
            Provides access to removable storage cards on the device
            </summary>
        </member>
        <member name="M:OpenNETCF.IO.StorageCard.GetStorageCardNames">
            <summary>
            Returns the Storage Cards currently attached to the device 
            </summary>
            <returns>Array containing the names of Storage Cards currently attached to the device.</returns>
        </member>
        <member name="M:OpenNETCF.IO.StorageCard.GetStorageCards">
            <summary>
            Returns an array of <see cref="T:System.IO.DirectoryInfo"/> entries listing all the Storage Cards currently attached
            </summary>
            <returns>An array of <see cref="T:System.IO.DirectoryInfo"/> entries.</returns>
        </member>
        <member name="M:OpenNETCF.IO.StorageCard.GetDiskFreeSpace(System.String)">
            <summary>
            Obtains the following information about the amount of space available on a disk volume: the total amount of space, the total amount of free space, and the amount of free space available to the user associated with the calling thread.
            <para><b>New in v1.1</b></para>
            </summary>
            <param name="directoryName"><see cref="T:System.String"/> that specifies a directory on the specified disk.
            This string can be a Universal Naming Convention (UNC) name.</param>
            <returns>A <see cref="T:OpenNETCF.IO.StorageCard.DiskFreeSpace"/> structure containing details about the space available on the specified storage media.</returns>
        </member>
        <member name="P:OpenNETCF.IO.StorageCard.AutoRunPath">
            <summary>
            Returns the path Windows CE will use to search for an AutoRun application when a Storage Card is inserted
            </summary>
            <remarks>Requires a Pocket PC or Windows CE.NET 4.2 with AYGShell extensions.</remarks>
        </member>
        <member name="T:OpenNETCF.IO.StorageCard.DiskFreeSpace">
            <summary>
            Describes the free space on a storage card.
            <para><b>New in v1.1</b></para>
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.StorageCard.DiskFreeSpace.FreeBytesAvailable">
            <summary>
            The total number of free bytes on the disk that are available to the user associated with the calling thread.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.StorageCard.DiskFreeSpace.TotalBytes">
            <summary>
            The total number of bytes on the disk that are available to the user associated with the calling thread.
            </summary>
        </member>
        <member name="F:OpenNETCF.IO.StorageCard.DiskFreeSpace.TotalFreeBytes">
            <summary>
            The total number of free bytes on the disk.
            </summary>
        </member>
        <member name="T:OpenNETCF.IO.StreamInterfaceDriver">
            <summary>
            Use this abstract base class to create wrappers around Stream Interface
            Drivers that are not supported by the CF
            <para><b>New in v1.1</b></para>
            </summary>
        </member>
        <member name="M:OpenNETCF.IO.StreamInterfaceDriver.#ctor(System.String)">
            <summary>
            Create an instance of the StreamInterfaceDriver class
            </summary>
            <param name="portName">Name of port (prefix and index) to open</param>
        </member>
        <member name="M:OpenNETCF.IO.StreamInterfaceDriver.Open(OpenNETCF.IO.FileAccess,OpenNETCF.IO.FileShare)">
            <summary>
            Open the driver
            <see cref="T:OpenNETCF.IO.FileAccess"/>
            <see cref="T:OpenNETCF.IO.FileShare"/>
            </summary>
            <param name="access">File Access (Read, Write or Both)</param>
            <param name="share">Share Mode (Read, Write or both)</param>
        </member>
        <member name="M:OpenNETCF.IO.StreamInterfaceDriver.Read(System.Int32)">
            <summary>
            Read data from the driver
            </summary>
            <param name="bytesToRead">The number of bytes requested.</param>
            <returns>A byte array returned by the driver</returns>
        </member>
        <member name="M:OpenNETCF.IO.StreamInterfaceDriver.Write(System.Byte[])">
            <summary>
            Write data to the driver
            </summary>
            <param name="data">Data to write</param>
            <returns>Number of bytes actually written</returns>
        </member>
        <member name="M:OpenNETCF.IO.StreamInterfaceDriver.DeviceIoControl(System.Int32,System.Byte[],System.Byte[])">
            <summary>
            Call a device specific IOControl
            </summary>
            <param name="controlCode">The IOCTL code</param>
            <param name="inData">Data to pass into the IOCTL</param>
            <param name="outData">Data returned by the IOCTL</param>
        </member>
        <member name="M:OpenNETCF.IO.StreamInterfaceDriver.Seek(System.Int32,OpenNETCF.IO.FileEx.MoveMethod)">
            <summary>
            This function moves the file pointer of an open file
            <seealso cref="T:OpenNETCF.IO.FileEx.MoveMethod"/>
            </summary>
            <param name="distance">Bytes to move - a positive number moves forward, a negative moves backward</param>
            <param name="seekFrom">Starting position from where distance is measured</param>
            <returns>New file position</returns>
            <remarks>The current file position can be queried using seekFrom(0, MoveMethod.CurrentPosition)</remarks>
        </member>
        <member name="M:OpenNETCF.IO.StreamInterfaceDriver.Close">
            <summary>
            Close the driver
            </summary>
        </member>
        <member name="T:OpenNETCF.Multimedia.Audio.WaveOpenHandler">
            <summary>
            Handles generic wave device Open event
            </summary>
        </member>
        <member name="T:OpenNETCF.Multimedia.Audio.WaveCloseHandler">
            <summary>
            Handles generic wave device Close event
            </summary>
        </member>
        <member name="T:OpenNETCF.Multimedia.Audio.WaveDoneHandler">
            <summary>
            Handles generic wave device Operation Complete event (Record/Play)
            </summary>
        </member>
        <member name="T:OpenNETCF.Multimedia.Audio.WaveFinishedHandler">
            <summary>
            Handles wave device Recording Complete event
            </summary>
        </member>
        <member name="T:OpenNETCF.Multimedia.Audio.SoundFormats">
            <summary>
            Flags for the supported audio formats for recording and playback devices
            </summary>
        </member>
        <member name="F:OpenNETCF.Multimedia.Audio.SoundFormats.InvalidFormat">
            <summary>
            Format is not valid
            </summary>
        </member>
        <member name="F:OpenNETCF.Multimedia.Audio.SoundFormats.Mono8bit11kHz">
            <summary>
            Mono, 8 bit, 11025 Hz
            </summary>
        </member>
        <member name="F:OpenNETCF.Multimedia.Audio.SoundFormats.Stereo8bit11kHz">
            <summary>
            Stereo, 8 bit, 11025 Hz
            </summary>
        </member>
        <member name="F:OpenNETCF.Multimedia.Audio.SoundFormats.Mono16bit11kHz">
            <summary>
            Mono, 16 bit, 11025 Hz
            </summary>
        </member>
        <member name="F:OpenNETCF.Multimedia.Audio.SoundFormats.Stereo16bit11kHz">
            <summary>
            Stereo, 16 bit, 11025 Hz
            </summary>
        </member>
        <member name="F:OpenNETCF.Multimedia.Audio.SoundFormats.Mono8bit22kHz">
            <summary>
            Mono, 8 bit, 22050 Hz
            </summary>
        </member>
        <member name="F:OpenNETCF.Multimedia.Audio.SoundFormats.Stereo8bit22kHz">
            <summary>
            Stereo, 8 bit, 22050 Hz
            </summary>
        </member>
        <member name="F:OpenNETCF.Multimedia.Audio.SoundFormats.Mono16bit22kHz">
            <summary>
            Mono, 16 bit, 22050 Hz
            </summary>
        </member>
        <member name="F:OpenNETCF.Multimedia.Audio.SoundFormats.Stereo16bit22kHz">
            <summary>
            Stereo, 16 bit, 22050 Hz
            </summary>
        </member>
        <member name="F:OpenNETCF.Multimedia.Audio.SoundFormats.Mono8bit44kHz">
            <summary>
            Mono, 8 bit, 44100 Hz
            </summary>
        </member>
        <member name="F:OpenNETCF.Multimedia.Audio.SoundFormats.Stereo8bit44kHz">
            <summary>
            Stereo, 8 bit, 44100 Hz
            </summary>
        </member>
        <member name="F:OpenNETCF.Multimedia.Audio.SoundFormats.Mono16bit44kHz">
            <summary>
            Mono, 16 bit, 44100 Hz
            </summary>
        </member>
        <member name="F:OpenNETCF.Multimedia.Audio.SoundFormats.Stereo16bit44kHz">
            <summary>
            Stereo, 16 bit, 44100 Hz
            </summary>
        </member>
        <member name="T:OpenNETCF.Multimedia.Audio.Audio">
            <summary>
            Base class for Player/Recorder
            </summary>
        </member>
        <member name="T:OpenNETCF.Multimedia.Audio.ChunkType">
            <summary>
            Type of mm chunk.
            </summary>
        </member>
        <member name="F:OpenNETCF.Multimedia.Audio.ChunkType.List">
            <summary>
            Chunk is Riff chunk
            </summary>
        </member>
        <member name="F:OpenNETCF.Multimedia.Audio.ChunkType.Riff">
            <summary>
            Chunk is List chunk
            </summary>
        </member>
        <member name="T:OpenNETCF.Multimedia.Audio.Player">
            <summary>
            Wave Audio player class. Supports PCM waveform playback from the stream
            </summary>
        </member>
        <member name="M:OpenNETCF.Multimedia.Audio.Player.#ctor">
            <summary>
            Constructs Player object on the default wave device
            </summary>
        </member>
        <member name="M:OpenNETCF.Multimedia.Audio.Player.#ctor(System.Int32)">
            <summary>
            Constructs Player object on the given wave device
            </summary>
            <param name="AudioDeviceID">Wave device ID</param>
        </member>
        <member name="M:OpenNETCF.Multimedia.Audio.Player.Restart">
            <summary>
            Restart a paused wave file
            </summary>
        </member>
        <member name="M:OpenNETCF.Multimedia.Audio.Player.Pause">
            <summary>
            Pause Play
            </summary>
        </member>
        <member name="M:OpenNETCF.Multimedia.Audio.Player.Stop">
            <summary>
            Stop Play
            </summary>
        </member>
        <member name="M:OpenNETCF.Multimedia.Audio.Player.Play(System.IO.Stream)">
            <summary>
            Plays waveform contained in the given stream. Stream is exepcted to contain full riff header
            </summary>
            <param name="playStream">Stream with the waveform</param>
        </member>
        <member name="E:OpenNETCF.Multimedia.Audio.Player.WaveOpen">
            <summary>
            Raised when the wave device is opened
            </summary>
        </member>
        <member name="E:OpenNETCF.Multimedia.Audio.Player.WaveClose">
            <summary>
            Raised when the wave device is closed
            </summary>
        </member>
        <member name="E:OpenNETCF.Multimedia.Audio.Player.DonePlaying">
            <summary>
            Raised when the wave device has finished playback
            </summary>
        </member>
        <member name="P:OpenNETCF.Multimedia.Audio.Player.NumDevices">
            <summary>
            Number of the output wave devices in the system
            </summary>
        </member>
        <member name="P:OpenNETCF.Multimedia.Audio.Player.Volume">
            <summary>
            Gets or sets playback volume on the current wave device
            </summary>
        </member>
        <member name="P:OpenNETCF.Multimedia.Audio.Player.Playing">
            <summary>
            True, if the player is currently playing. False otherwise
            </summary>
        </member>
        <member name="T:OpenNETCF.Multimedia.Audio.Recorder">
            <summary>
            Recorder class. Wraps low-level WAVE API for recording purposes
            </summary>
        </member>
        <member name="M:OpenNETCF.Multimedia.Audio.Recorder.#ctor">
            <summary>
            Creates Recorder object and attaches it to the default wave device
            </summary>
        </member>
        <member name="M:OpenNETCF.Multimedia.Audio.Recorder.#ctor(System.Int32)">
            <summary>
            Creates Recorder object and attaches it to the given wave device
            </summary>
            <param name="AudioDeviceID">Wave device ID</param>
        </member>
        <member name="M:OpenNETCF.Multimedia.Audio.Recorder.SupportedRecordingFormats">
            <summary>
            A list of PCM wave formats supported by the default device
            </summary>
            <returns>SoundFormats collection</returns>
        </member>
        <member name="M:OpenNETCF.Multimedia.Audio.Recorder.SupportedRecordingFormats(System.Int32)">
            <summary>
            A list of PCM wave formats supported by the given device
            </summary>
            <param name="DeviceID">Wave device</param>
            <returns>SoundFormats collection</returns>
        </member>
        <member name="M:OpenNETCF.Multimedia.Audio.Recorder.Stop">
            <summary>
            Stop recording operation currently in progress. 
            Throws an error if no recording operation is in progress
            </summary>
        </member>
        <member name="M:OpenNETCF.Multimedia.Audio.Recorder.RecordFor(System.IO.Stream,System.Int16)">
            <summary>
            Record sound data for specified number of seconds at 11025 sps and 1 channel
            The stream will be a properly formatted RIFF file
            </summary>
            <param name="st">Stream into which recorded samples are written</param>
            <param name="Seconds">Seconds of data to record</param>
        </member>
        <member name="M:OpenNETCF.Multimedia.Audio.Recorder.RecordFor(System.IO.Stream,System.Int16,OpenNETCF.Multimedia.Audio.SoundFormats)">
            <summary>
            Record sound data for specified number of seconds using given wave format
            The stream will be a properly formatted RIFF file
            </summary>
            <param name="st">Stream into which recorded samples are written</param>
            <param name="Seconds">Seconds of data to record</param>
            <param name="SoundFormat">Sound format to record in.</param>
        </member>
        <member name="M:OpenNETCF.Multimedia.Audio.Recorder.GetNewRecordBuffer(System.Int32)">
            <summary>
            Creates a recording buffer
            </summary>
            <param name="dwBufferSize"></param>
            <returns>new buffer as WaveHeader</returns>
        </member>
        <member name="E:OpenNETCF.Multimedia.Audio.Recorder.WaveOpen">
            <summary>
            Handles the event that is fired when wave device is successfully opened
            </summary>
        </member>
        <member name="E:OpenNETCF.Multimedia.Audio.Recorder.WaveClose">
            <summary>
            Handles the event that is fired when wave device is successfully closed
            </summary>
        </member>
        <member name="E:OpenNETCF.Multimedia.Audio.Recorder.DoneRecording">
            <summary>
            Handles the event that is fired when recording is stopped (on timer or by calling <see cref="M:OpenNETCF.Multimedia.Audio.Recorder.Stop">Stop</see> method
            </summary>
        </member>
        <member name="P:OpenNETCF.Multimedia.Audio.Recorder.Recording">
            <summary>
            Whether the Recorder is presently recording
            </summary>
        </member>
        <member name="P:OpenNETCF.Multimedia.Audio.Recorder.NumDevices">
            <summary>
            Number of wave input devices in the system
            </summary>
        </member>
        <member name="T:OpenNETCF.Multimedia.Audio.WaveHeader">
            <summary>
            Internal wrapper around WAVEHDR
            Facilitates asynchronous operations
            </summary>
        </member>
        <member name="M:OpenNETCF.Multimedia.Audio.WaveHeader.#ctor(System.Byte[],System.Int32)">
            <summary>
            Creates WaveHeader and fills it with wave data
            <see cref="T:OpenNETCF.Win32.WaveHdr"/>
            </summary>
            <param name="data">wave data bytes</param>
            <param name="datalength">length of Wave data</param>
        </member>
        <member name="M:OpenNETCF.Multimedia.Audio.WaveHeader.#ctor(System.Int32)">
            <summary>
            Constructor for WaveHeader class
            Allocates a buffer of required size
            </summary>
            <param name="BufferSize"></param>
        </member>
        <member name="P:OpenNETCF.Multimedia.Audio.WaveHeader.Header">
            <summary>Ptr to WAVEHDR in the unmanaged memory</summary>
        </member>
        <member name="P:OpenNETCF.Multimedia.Audio.WaveHeader.Data">
            <summary>Ptr to wave data in the unmanaged memory</summary>
        </member>
        <member name="P:OpenNETCF.Multimedia.Audio.WaveHeader.DataLength">
            <summary>Wave data size</summary>
        </member>
        <member name="T:OpenNETCF.Runtime.InteropServices.AdvancedMarshaler">
            <summary>
            AdvancedMarshaler class implementation.
            </summary>
        </member>
        <member name="T:OpenNETCF.Runtime.InteropServices.MarshallingMethods">
            <summary>
            MarshallingMethods class implementation.
            </summary>
        </member>
        <member name="T:OpenNETCF.Runtime.InteropServices.CustomMarshalAsAttribute">
            <summary>
            CustomMarshalAsAttribute implementaion.
            </summary>
        </member>
        <member name="T:OpenNETCF.Runtime.InteropServices.FILETIME">
            <summary>
            This structure is a 64-bit value representing the number of 100-nanosecond intervals since January 1, 1601.
            <para><b>New in v1.1</b></para>
            </summary>
        </member>
        <member name="F:OpenNETCF.Runtime.InteropServices.FILETIME.dwLowDateTime">
            <summary>
            Specifies the low 32 bits of the FILETIME.
            </summary>
        </member>
        <member name="F:OpenNETCF.Runtime.InteropServices.FILETIME.dwHighDateTime">
            <summary>
            Specifies the high 32 bits of the FILETIME.
            </summary>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.FILETIME.ToDateTime">
            <summary>
            Returns the <see cref="T:System.DateTime"/> equivalent of this FILETIME value.
            </summary>
            <returns>A <see cref="T:System.DateTime"/> which equates this value.</returns>
        </member>
        <member name="T:OpenNETCF.Runtime.InteropServices.MarshalEx">
            <summary>
            Provides a collection of methods for allocating unmanaged memory, copying unmanaged memory blocks, and converting managed to unmanaged types, as well as other miscellaneous methods used when interacting with unmanaged code. 
            </summary>
        </member>
        <member name="F:OpenNETCF.Runtime.InteropServices.MarshalEx.SystemDefaultCharSize">
            <summary>
            Represents the default character size on the system; the default is 2 for Unicode systems and 1 for ANSI systems. This field is read-only.
            </summary>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.MarshalEx.ReadIntPtr(System.IntPtr,System.Int32)">
            <summary>
            Reads an IntPtr from an unmanaged pointer.   
            </summary>
            <param name="ptr">The address in unmanaged memory from which to read. </param>
            <param name="ofs">The offset from the ptr where the IntPtr is located.</param>
            <returns>The IntPtr read from the ptr parameter. </returns>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.MarshalEx.ReadInt32(System.IntPtr,System.Int32)">
            <summary>
            Reads an Int32 object from an unmanaged pointer.   
            </summary>
            <param name="ptr">The address in unmanaged memory from which to read. </param>
            <param name="ofs">The offset from the ptr where the Int32 is located.</param>
            <returns>The Int32 read from the ptr parameter. </returns>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.MarshalEx.ReadUInt32(System.IntPtr,System.Int32)">
            <summary>
            Reads a 32-bit unsigned integer from unmanaged memory.
            </summary>
            <param name="ptr">The base address in unmanaged memory from which to read.</param>
            <param name="ofs">An additional byte offset, added to the ptr parameter before reading.</param>
            <returns>The 32-bit unsigned integer read from the ptr parameter.</returns>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.MarshalEx.ReadInt16(System.IntPtr,System.Int32)">
            <summary>
            Reads a Int16 from an unmanaged pointer.   
            </summary>
            <param name="ptr">The address in unmanaged memory from which to read. </param>
            <param name="ofs">The offset from the ptr where the Int16 is located.</param>
            <returns>The Int16 read from the ptr parameter. </returns>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.MarshalEx.ReadUInt16(System.IntPtr,System.Int32)">
            <summary>
            
            </summary>
            <param name="ptr"></param>
            <param name="ofs"></param>
            <returns></returns>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.MarshalEx.PtrToStringUni(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Reads a string from an unmanaged pointer.   
            </summary>
            <param name="ptr">The address in unmanaged memory from which to read. </param>
            <param name="ofs">The offset from the ptr where the string is located.</param>
            <returns>The string read from the ptr parameter. </returns>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.MarshalEx.PtrToStringAnsi(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Allocates a managed System.String, copies a specified number of characters from an unmanaged ANSI string into it, and widens each ANSI character to Unicode.
            </summary>
            <param name="ptr">The address of the first character of the unmanaged string.</param>
            <param name="ofs"></param>
            <param name="len">The byte count of the input string to copy.</param>
            <returns>A managed System.String that holds a copy of the native ANSI string.</returns>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.MarshalEx.PtrToStringAnsi(System.IntPtr)">
            <summary>
            Copies all characters up to the first null from an unmanaged ANSI string to a managed System.String. Widens each ANSI character to Unicode.
            <para><b>New in v1.1</b></para>
            </summary>
            <param name="ptr">The address of the first character of the unmanaged string.</param>
            <returns>A managed <see cref="T:System.String"/> object that holds a copy of the unmanaged ANSI string.</returns>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.MarshalEx.PtrToStringUni(System.IntPtr)">
            <summary>
            Allocates a managed System.String and copies all characters up to the first null character from an unmanaged Unicode string into it.
            </summary>
            <param name="ptr">The address of the first character of the unmanaged string.</param>
            <returns>A managed string holding a copy of the native string.</returns>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.MarshalEx.PtrToStringAuto(System.IntPtr)">
            <summary>
            Allocates a managed <see cref="T:System.String"/> and copies all characters up to the first null character from a string stored in unmanaged memory into it.
            <para><b>New in v1.1</b></para>
            </summary>
            <param name="ptr">The address of the first character.</param>
            <returns>A managed string that holds a copy of the unmanaged string.</returns>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.MarshalEx.ReadChar(System.IntPtr,System.Int32)">
            <summary>
            Reads a single char from an unmanaged pointer.   
            </summary>
            <param name="ptr">The address in unmanaged memory from which to read. </param>
            <param name="ofs">The offset from the ptr where the char is located.</param>
            <returns>The char read from the ptr parameter. </returns>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.MarshalEx.ReadByteArray(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Reads a byte array from an unmanaged pointer.   
            </summary>
            <param name="ptr">The address in unmanaged memory from which to read. </param>
            <param name="ofs">The offset from the ptr where the byte array is located.</param>
            <returns>The byte array read from the ptr parameter. </returns>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.MarshalEx.ReadInt64(System.IntPtr,System.Int32)">
            <summary>
            Reads an Int64 object from an unmanaged pointer.   
            </summary>
            <param name="ptr">The address in unmanaged memory from which to read. </param>
            <param name="ofs">The offset from the ptr where the Int64 is located.</param>
            <returns>The Int64 read from the ptr parameter. </returns>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.MarshalEx.ReadUInt64(System.IntPtr,System.Int32)">
            <summary>
            
            </summary>
            <param name="ptr"></param>
            <param name="ofs"></param>
            <returns></returns>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.MarshalEx.ReadBool(System.IntPtr,System.Int32)">
            <summary>
            Reads a bool from an unmanaged pointer.   
            </summary>
            <param name="ptr">The address in unmanaged memory from which to read. </param>
            <param name="ofs">The offset from the ptr where the bool is located.</param>
            <returns>The bool read from the ptr parameter. </returns>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.MarshalEx.ReadByte(System.IntPtr,System.Int32)">
            <summary>
            Reads a single byte from an unmanaged pointer.   
            </summary>
            <param name="ptr">The address in unmanaged memory from which to read. </param>
            <param name="ofs">The offset from the ptr where the byte is located.</param>
            <returns>The byte read from the ptr parameter. </returns>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.MarshalEx.WriteIntPtr(System.IntPtr,System.Int32,System.IntPtr)">
            <summary>
            Writes an IntPtr value to unmanaged memory.   
            </summary>
            <param name="ptr">The address in unmanaged memory from which to write. </param>
            <param name="ofs">The offset of the IntPtr from the ptr.</param>
            <param name="val">The value to write. </param>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.MarshalEx.WriteInt32(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Writes an Int32 value to unmanaged memory.   
            </summary>
            <param name="ptr">The base address in unmanaged memory from which to write.</param>
            <param name="ofs">An additional byte offset, added to the ptr parameter before writing.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.MarshalEx.WriteUInt32(System.IntPtr,System.Int32,System.UInt32)">
            <summary>
            Writes a UInt32 value to unmanaged memory.
            </summary>
            <param name="ptr">The base address in unmanaged memory from which to write.</param>
            <param name="ofs">An additional byte offset, added to the ptr parameter before writing.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.MarshalEx.WriteInt16(System.IntPtr,System.Int32,System.Int16)">
            <summary>
            Writes an Int16 value to unmanaged memory.   
            </summary>
            <param name="ptr">The address in unmanaged memory from which to write. </param>
            <param name="ofs">An additional byte offset, added to the ptr parameter before writing.</param>
            <param name="val">The value to write. </param>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.MarshalEx.WriteUInt16(System.IntPtr,System.Int32,System.UInt16)">
            <summary>
            Writes a 16-bit unsigned integer value to unmanaged memory.
            </summary>
            <param name="ptr">The base address in unmanaged memory from which to write.</param>
            <param name="ofs">An additional byte offset, added to the ptr parameter before writing.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.MarshalEx.StringToHGlobalAnsi(System.String)">
            <summary>
            Copies the contents of a managed <see cref="T:System.String"/> into unmanaged memory, converting into ANSI format as it copies.
            </summary>
            <param name="s">A managed string to be copied. </param>
            <returns>The address, in unmanaged memory, to where s was copied, or 0 if a null reference (Nothing in Visual Basic) string was supplied.</returns>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.MarshalEx.StringToHGlobalUni(System.String)">
            <summary>
            Copies the contents of a managed <see cref="T:System.String"/> into unmanaged memory.
            </summary>
            <param name="s">A managed string to be copied.</param>
            <returns>The address, in unmanaged memory, to where s was copied, or 0 if a null reference (Nothing in Visual Basic) string was supplied.</returns>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.MarshalEx.WriteChar(System.IntPtr,System.Int32,System.Char)">
            <summary>
            Writes a single char value to unmanaged memory.   
            </summary>
            <param name="ptr">The address in unmanaged memory from which to write. </param>
            <param name="ofs">The offset of the char from the ptr.</param>
            <param name="val">The value to write. </param>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.MarshalEx.WriteByteArray(System.IntPtr,System.Int32,System.Byte[])">
            <summary>
            Writes a byte array to unmanaged memory.   
            </summary>
            <param name="ptr">The address in unmanaged memory from which to write. </param>
            <param name="ofs">The offset of the byte array from the ptr.</param>
            <param name="val">The value to write. </param>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.MarshalEx.WriteInt64(System.IntPtr,System.Int32,System.Int64)">
            <summary>
            Writes an Int64 value to unmanaged memory.   
            </summary>
            <param name="ptr">The address in unmanaged memory from which to write. </param>
            <param name="ofs">An additional byte offset, added to the ptr parameter before writing.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.MarshalEx.WriteUInt64(System.IntPtr,System.Int32,System.UInt64)">
            <summary>
            Writes a 64-bit unsigned integer value to unmanaged memory.
            </summary>
            <param name="ptr">The address in unmanaged memory from which to write.</param>
            <param name="ofs">An additional byte offset, added to the ptr parameter before writing.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.MarshalEx.WriteBool(System.IntPtr,System.Int32,System.Boolean)">
            <summary>
            Writes a bool value to unmanaged memory.   
            </summary>
            <param name="ptr">The address in unmanaged memory from which to write. </param>
            <param name="ofs">The offset of the bool from the ptr.</param>
            <param name="val">The value to write. </param>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.MarshalEx.WriteByte(System.IntPtr,System.Int32,System.Byte)">
            <summary>
            Writes a single byte value to unmanaged memory.   
            </summary>
            <param name="ptr">The address in unmanaged memory from which to write. </param>
            <param name="ofs">The offset of the byte from the ptr.</param>
            <param name="val">The value to write. </param>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.MarshalEx.Copy(System.IntPtr,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copies data from an unmanaged memory pointer to a managed 8-bit unsigned integer array.  
            </summary>
            <param name="source">The memory pointer to copy from.</param>
            <param name="destination">The array to copy to.</param>
            <param name="startIndex">The zero-based index into the array where Copy should start.</param>
            <param name="length">The number of array elements to copy.</param>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.MarshalEx.Copy(System.IntPtr,System.Double[],System.Int32,System.Int32)">
            <summary>
            Copies data from an unmanaged memory pointer to a managed double-precision floating-point number array.  
            </summary>
            <param name="source">The memory pointer to copy from.</param>
            <param name="destination">The array to copy to.</param>
            <param name="startIndex">The zero-based index into the array where Copy should start.</param>
            <param name="length">The number of array elements to copy.</param>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.MarshalEx.Copy(System.IntPtr,System.Single[],System.Int32,System.Int32)">
            <summary>
            Copies data from an unmanaged memory pointer to a managed single-precision floating-point number array.  
            </summary>
            <param name="source">The memory pointer to copy from.</param>
            <param name="destination">The array to copy to.</param>
            <param name="startIndex">The zero-based index into the array where Copy should start.</param>
            <param name="length">The number of array elements to copy.</param>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.MarshalEx.Copy(System.IntPtr,System.Int64[],System.Int32,System.Int32)">
            <summary>
            Copies data from an unmanaged memory pointer to a managed 64-bit signed integer array. 
            </summary>
            <param name="source">The memory pointer to copy from.</param>
            <param name="destination">The array to copy to.</param>
            <param name="startIndex">The zero-based index into the array where Copy should start.</param>
            <param name="length">The number of array elements to copy.</param>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.MarshalEx.Copy(System.IntPtr,System.Int16[],System.Int32,System.Int32)">
            <summary>
            Copies data from an unmanaged memory pointer to a managed 16-bit signed integer array. 
            </summary>
            <param name="source">The memory pointer to copy from.</param>
            <param name="destination">The array to copy to.</param>
            <param name="startIndex">The zero-based index into the array where Copy should start.</param>
            <param name="length">The number of array elements to copy.</param>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.MarshalEx.Copy(System.IntPtr,System.Char[],System.Int32,System.Int32)">
            <summary>
            Copies data from an unmanaged memory pointer to a managed character array.  
            </summary>
            <param name="source">The memory pointer to copy from.</param>
            <param name="destination">The array to copy to.</param>
            <param name="startIndex">The zero-based index into the array where Copy should start.</param>
            <param name="length">The number of array elements to copy.</param>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.MarshalEx.Copy(System.IntPtr,System.Int32[],System.Int32,System.Int32)">
            <summary>
            Copies data from an unmanaged memory pointer to a managed 32-bit signed integer array.  
            </summary>
            <param name="source">The memory pointer to copy from.</param>
            <param name="destination">The array to copy to.</param>
            <param name="startIndex">The zero-based index into the array where Copy should start.</param>
            <param name="length">The number of array elements to copy.</param>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.MarshalEx.Copy(System.Byte[],System.Int32,System.IntPtr,System.Int32)">
            <summary>
            Copies data from a one-dimensional, managed 8-bit unsigned integer array to an unmanaged memory pointer.
            </summary>
            <param name="source">The one-dimensional array to copy from.</param>
            <param name="startIndex">The zero-based index into the array where Copy should start.</param>
            <param name="destination">The memory pointer to copy to.</param>
            <param name="length">The number of array elements to copy.</param>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.MarshalEx.Copy(System.Double[],System.Int32,System.IntPtr,System.Int32)">
            <summary>
            Copies data from a one-dimensional, managed double-precision floating-point number array to an unmanaged memory pointer.  
            </summary>
            <param name="source">The one-dimensional array to copy from.</param>
            <param name="startIndex">The zero-based index into the array where Copy should start.</param>
            <param name="destination">The memory pointer to copy to.</param>
            <param name="length">The number of array elements to copy.</param>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.MarshalEx.Copy(System.Single[],System.Int32,System.IntPtr,System.Int32)">
            <summary>
            Copies data from a one-dimensional, managed single-precision floating-point number array to an unmanaged memory pointer
            </summary>
            <param name="source">The one-dimensional array to copy from.</param>
            <param name="startIndex">The zero-based index into the array where Copy should start.</param>
            <param name="destination">The memory pointer to copy to.</param>
            <param name="length">The number of array elements to copy.</param>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.MarshalEx.Copy(System.Int64[],System.Int32,System.IntPtr,System.Int32)">
            <summary>
            Copies data from a one-dimensional, managed 64-bit signed integer array to an unmanaged memory pointer. 
            </summary>
            <param name="source">The one-dimensional array to copy from.</param>
            <param name="startIndex">The zero-based index into the array where Copy should start.</param>
            <param name="destination">The memory pointer to copy to.</param>
            <param name="length">The number of array elements to copy.</param>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.MarshalEx.Copy(System.Int16[],System.Int32,System.IntPtr,System.Int32)">
            <summary>
            Copies data from a one-dimensional, managed 16-bit signed integer array to an unmanaged memory pointer. 
            </summary>
            <param name="source">The one-dimensional array to copy from.</param>
            <param name="startIndex">The zero-based index into the array where Copy should start.</param>
            <param name="destination">The memory pointer to copy to.</param>
            <param name="length">The number of array elements to copy.</param>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.MarshalEx.Copy(System.Char[],System.Int32,System.IntPtr,System.Int32)">
            <summary>
            Copies data from a one-dimensional, managed character array to an unmanaged memory pointer.  
            </summary>
            <param name="source">The one-dimensional array to copy from.</param>
            <param name="startIndex">The zero-based index into the array where Copy should start.</param>
            <param name="destination">The memory pointer to copy to.</param>
            <param name="length">The number of array elements to copy.</param>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.MarshalEx.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)">
            <summary>
            Copies data from a one-dimensional, managed 32-bit signed integer array to an unmanaged memory pointer. 
            </summary>
            <param name="source">The one-dimensional array to copy from.</param>
            <param name="startIndex">The zero-based index into the array where Copy should start.</param>
            <param name="destination">The memory pointer to copy to.</param>
            <param name="length">The number of array elements to copy.</param>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.MarshalEx.AllocHGlobal(System.Int32)">
            <summary>
            Allocates unmanaged memory.
            </summary>
            <param name="cb">The number of bytes in memory required. </param>
            <returns>An IntPtr to the newly allocated memory. This memory must be released using the Marshal.FreeHGlobal method.</returns>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.MarshalEx.AllocHGlobal(System.IntPtr)">
            <summary>
            Allocates unmanaged memory.
            </summary>
            <param name="cb">The number of bytes in memory required. </param>
            <returns>An IntPtr to the newly allocated memory. This memory must be released using the Marshal.FreeHGlobal method.</returns>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.MarshalEx.ReAllocHGlobal(System.IntPtr,System.IntPtr)">
            <summary>
            Resizes a block of memory previously allocated with <see cref="M:OpenNETCF.Runtime.InteropServices.MarshalEx.AllocHGlobal(System.IntPtr)"/>.
            <para><b>New in v1.2</b></para>
            </summary>
            <param name="pv">A pointer to memory allocated with <see cref="M:OpenNETCF.Runtime.InteropServices.MarshalEx.AllocHGlobal(System.IntPtr)"/>.</param>
            <param name="cb"> The new size of the allocated block.</param>
            <returns>An <see cref="T:System.IntPtr"/> to the reallocated memory.
            This memory must be released using <see cref="M:OpenNETCF.Runtime.InteropServices.MarshalEx.FreeHGlobal(System.IntPtr)"/>.</returns>
            <exception cref="T:System.OutOfMemoryException">There is insufficient memory to satisfy the request.</exception>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.MarshalEx.FreeHGlobal(System.IntPtr)">
            <summary>
            Frees memory previously allocated from unmanaged memory.
            </summary>
            <param name="hGlobal">The handle returned by the original matching call to AllocHGlobal.</param>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.MarshalEx.AllocHLocal(System.UInt32)">
            <summary>
            Allocates unmanaged memory.
            </summary>
            <param name="cb">The number of bytes in memory required. </param>
            <returns>An IntPtr to the newly allocated memory. This memory must be released using the <see cref="M:MarshalEx.FreeHLocal(System.IntPtr)"/> method.</returns>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.MarshalEx.AllocHLocal(System.Int32)">
            <summary>
            Allocates unmanaged memory.
            </summary>
            <param name="cb">The number of bytes in memory required. </param>
            <returns>An IntPtr to the newly allocated memory. This memory must be released using the <see cref="M:MarshalEx.FreeHLocal(System.IntPtr)"/> method.</returns>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.MarshalEx.FreeHLocal(System.IntPtr)">
            <summary>
            Frees memory previously allocated from unmanaged memory.
            </summary>
            <param name="hMem">The handle returned by the original matching call to AllocHGlobal.</param>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.MarshalEx.Time_tToDateTime(System.UInt32)">
            <summary>
            Converts a time_t value to a DateTime value.
            </summary>
            <param name="time_t">The time_t value to convert.</param>
            <returns>A DateTime value equivalent to the time_t suppled.</returns>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.MarshalEx.SizeOf(System.Object)">
            <summary>
            Returns the unmanaged size of an object in bytes.  
            </summary>
            <param name="structure">The object whose size is to be returned.</param>
            <returns>The size of the structure parameter in unmanaged code</returns>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.MarshalEx.SizeOf(System.Type)">
            <summary>
             Returns the size of an unmanaged type in bytes.  
            </summary>
            <param name="t">The System.Type whose size is to be returned.</param>
            <returns>The size of the structure parameter in unmanaged code</returns>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.MarshalEx.StructureToPtr(System.Object,System.IntPtr,System.Boolean)">
            <summary>
            Marshals data from a managed object to an unmanaged block of memory.  
            </summary>
            <param name="structure">A managed object holding the data to be marshaled. This object must be an instance of a formatted class.</param>
            <param name="ptr">A pointer to an unmanaged block of memory, which must be allocated before this method is called.</param>
            <param name="fDeleteOld">true to have the System.Runtime.InteropServices.Marshal.DestroyStructure(System.IntPtr,System.Type) method called on the ptr parameter before this method executes. Note that passing false can lead to a memory leak.</param>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.MarshalEx.lstrlenW(System.IntPtr)">
            <summary>
            Returns the length of the string at the pointer
            </summary>
            <param name="ptr">The pointer to the string to measure.</param>
            <returns>The length of the string at the pointer.</returns>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.MarshalEx.GetLastWin32Error">
            <summary>
             Returns the error code returned by the last unmanaged function called using platform invoke that has the System.Runtime.InteropServices.DllImportAttribute.SetLastError flag set.
            </summary>
            <returns>The last error code set by a call to the Win32 SetLastError API method. </returns>
        </member>
        <member name="M:OpenNETCF.Runtime.InteropServices.MarshalEx.IsComObject(System.Object)">
            <summary>
             Indicates whether a specified object represents a COM object.
            </summary>
            <param name="o">The object to check. </param>
            <returns> true if the o parameter is a COM type; otherwise, false.</returns>
        </member>
        <member name="M:OpenNETCF.Security.Cryptography.NativeMethods.Context.CpAcquireContext(System.String,OpenNETCF.Security.Cryptography.NativeMethods.ContextFlag)">
            <summary>
            MissingMethodException. call AcquireContext instead
            </summary>
        </member>
        <member name="M:OpenNETCF.Security.Cryptography.NativeMethods.Context.ContextAddRef(System.IntPtr)">
            <summary>
            INVALID_PARAMETER. no need to ever call this
            </summary>
        </member>
        <member name="M:OpenNETCF.Security.Cryptography.NativeMethods.Crypto.CeGenRandom(System.Int32,System.Byte[])">
            <summary>
            This function fills a buffer with random bytes. You can use this function when 
            Cryptography Services features are not available on your platform.
            </summary>
             <remarks>
             worked on the SmartPhone
             </remarks>
        </member>
        <member name="M:OpenNETCF.Security.Cryptography.NativeMethods.Crypto.CPAcquireContext(System.IntPtr@,System.Text.StringBuilder,System.UInt32,System.Byte[])">
            <summary>
            This function acquires a handle to the key container specified by the pszContainer 
            parameter.
            </summary>
             <remarks>
             does not work on smartPhone, MissingMethodException
             </remarks>
        </member>
        <member name="M:OpenNETCF.Security.Cryptography.NativeMethods.Crypto.CryptAcquireContext(System.IntPtr@,System.String,System.String,System.UInt32,System.UInt32)">
            <summary>
            This function acquires a handle to a specific key container within a particular 
            cryptographic service provider (CSP). This handle can be used to make calls to the 
            selected CSP.
            </summary>
             <remarks>
             raCrypto, mca / works on smartPhone
             </remarks>
        </member>
        <member name="M:OpenNETCF.Security.Cryptography.NativeMethods.Crypto.CryptContextAddRef(System.IntPtr,System.UInt32@,System.UInt32)">
            <summary>
            This function adds one to the reference count of an HCRYPTPROV handle. 
            </summary>
             <remarks>
             did not work on smartPhone, dont need it
             </remarks>
        </member>
        <member name="M:OpenNETCF.Security.Cryptography.NativeMethods.Crypto.CryptCreateHash(System.IntPtr,System.UInt32,System.IntPtr,System.UInt32,System.IntPtr@)">
            <summary>
            This function initiates the hashing of a stream of data. It creates and returns to 
            the calling application a handle to a cryptographic service provider (CSP) hash 
            object. This handle is used in subsequent calls to the CryptHashData function and 
            CryptHashSessionKey function to hash streams of data and session keys.
            </summary>
             <remarks>
             raCrypto, mca / worked on smartPhone
             </remarks>
        </member>
        <member name="M:OpenNETCF.Security.Cryptography.NativeMethods.Crypto.CryptDecrypt(System.IntPtr,System.IntPtr,System.Boolean,System.UInt32,System.Byte[],System.UInt32@)">
            <summary>
            This function decrypts data that was previously encrypted with the CryptEncrypt 
            function.
            </summary>
             <remarks>
             raCrypto, mca / works on smartPhone
             </remarks>
        </member>
        <member name="M:OpenNETCF.Security.Cryptography.NativeMethods.Crypto.CryptDeriveKey(System.IntPtr,System.UInt32,System.IntPtr,System.UInt32,System.IntPtr@)">
            <summary>
            This function generates cryptographic session keys derived from base data. This 
            function guarantees that all keys generated from the same base data are identical, 
            provided the same cryptographic service provider (CSP) and algorithms are used. 
            The base data can be a password or any other user data.
            This function is the same as the CryptGenKey function, except that the generated 
            session keys are derived from base data instead of being random. The CryptDeriveKey 
            function can only generate session keys and cannot be used to generate 
            public/private key pairs.
            A handle to the session key is returned in the phKey parameter. This handle can 
            then be used with any CryptoAPI functions that require key handles.
            </summary>
             <remarks>
             raCrypto, mca / works on smartPhone
             </remarks>
        </member>
        <member name="M:OpenNETCF.Security.Cryptography.NativeMethods.Crypto.CryptDestroyHash(System.IntPtr)">
            <summary>
            This function destroys the hash object referenced by the hHash parameter. Once a 
            hash object has been destroyed, it can no longer be used and its handle is useless 
            from then on.
            All hash objects should be destroyed with the CryptDestroyHash function when the 
            application is finished with them.
            </summary>
             <remarks>
             raCrypto / worked on smartPhone
             </remarks>
        </member>
        <member name="M:OpenNETCF.Security.Cryptography.NativeMethods.Crypto.CryptDestroyKey(System.IntPtr)">
            <summary>
            This function releases the handle referenced by the hKey parameter. Once a key 
            handle has been released, it becomes invalid and cannot be used again.
            If the handle refers to a session key, or to a public key that has been imported 
            into the cryptographic service provider (CSP) through CryptImportKey, the 
            CryptDestroyKey function destroys the key and frees the memory that the key 
            occupied. Many CSPs scrub the memory where the key was held before freeing it.																																																																															  
            On the other hand, if the handle refers to a public/private key pair obtained from 
            the CryptGetUserKey function, the underlying key pair is not destroyed by the 
            CryptDestroyKey function. Only the handle is destroyed.
            </summary>
             <remarks>
             raCrypto / works on smartPhone
             </remarks>
        </member>
        <member name="M:OpenNETCF.Security.Cryptography.NativeMethods.Crypto.CryptDuplicateHash(System.IntPtr,System.UInt32@,System.UInt32,System.IntPtr@)">
            <summary>
            This function makes an exact copy of a hash and the state the hash is in.
            A hash can be created in a piece-by-piece way. This function can create separate 
            hashes of two different contents that begin with the same content. 
            </summary>
             <remarks>
             did not work on smartPhone, dont need it
             </remarks>
        </member>
        <member name="M:OpenNETCF.Security.Cryptography.NativeMethods.Crypto.CryptDuplicateKey(System.IntPtr,System.UInt32@,System.UInt32,System.IntPtr@)">
            <summary>
            This function makes an exact copy of a key and the state the key is in. 
            Some keys have an associated state, for example, an initialization vector and/or 
            a salt value.
            </summary>
             <remarks>
             did not work on smartPhone, dont need it
             </remarks>
        </member>
        <member name="M:OpenNETCF.Security.Cryptography.NativeMethods.Crypto.CryptEncrypt(System.IntPtr,System.IntPtr,System.Boolean,System.UInt32,System.Byte[],System.UInt32@,System.UInt32)">
            <summary>
            This function encrypts data. The key held by the cryptographic service provider 
            (CSP) module and referenced by the hKey parameter specifies the algorithm used to 
            encrypt the data parameter.
            </summary>
             <remarks>
             raCrypto, mca / works on smartPhone
             </remarks>
        </member>
        <member name="M:OpenNETCF.Security.Cryptography.NativeMethods.Crypto.CryptEnumProviders(System.UInt32,System.UInt32@,System.UInt32,System.UInt32@,System.Text.StringBuilder,System.UInt32@)">
            <summary>
            This function retrieves the first or next available cryptographic service provider 
            (CSP). Used in a loop, this function can retrieve in sequence all of the CSPs 
            available on a computer.
            </summary>
             <remarks>
             works on smartPhone
             </remarks>
        </member>
        <member name="M:OpenNETCF.Security.Cryptography.NativeMethods.Crypto.CryptEnumProviderTypes(System.UInt32,System.UInt32@,System.UInt32,System.UInt32@,System.Text.StringBuilder,System.UInt32@)">
            <summary>
            This function retrieves the first or next type of cryptographic service provider 
            (CSP) supported on the computer. Used in a loop, this function retrieves in 
            sequence all of the CSP types available on a computer.
            </summary>
             <remarks>
             did not work on smartPhone
             used return values from CryptEnumProviders instead
             </remarks>
        </member>
        <member name="M:OpenNETCF.Security.Cryptography.NativeMethods.Crypto.CryptExportKey(System.IntPtr,System.IntPtr,System.UInt32,System.UInt32,System.Byte[],System.UInt32@)">
            <summary>
            This function exports cryptographic keys from of a cryptographic service provider 
            (CSP) in a secure manner.
            The caller passes to the CryptImportKey function a handle to the key to be exported 
            and gets a key binary large object (BLOB). This key BLOB can be sent over a 
            nonsecure transport or stored in a nonsecure storage location. The key BLOB is 
            useless until the intended recipient uses the CryptImportKey function, which 
            imports the key into the recipient's CSP.
            </summary>
             <remarks>
             mca / works on smartPhone
             </remarks>
        </member>
        <member name="M:OpenNETCF.Security.Cryptography.NativeMethods.Crypto.CryptGenKey(System.IntPtr,System.UInt32,System.UInt32,System.IntPtr@)">
            <summary>
            This function generates a random cryptographic session key or a public/private 
            key pair for use with the cryptographic service provider (CSP) module. 
            The function returns a handle to the key in the phKey parameter. 
            This handle can then be used as needed with any of the other CryptoAPI functions 
            requiring a key handle. 
            When calling this function, the application must specify the algorithm. 
            Because this algorithm type is kept bundled with the key, the application does not 
            need to specify the algorithm later when the actual cryptographic operations are 
            performed.
            </summary>
             <remarks>
             mca / works on smartPhone
             </remarks>
        </member>
        <member name="M:OpenNETCF.Security.Cryptography.NativeMethods.Crypto.CryptGenRandom(System.IntPtr,System.Int32,System.Byte[])">
            <summary>
            This function fills a buffer with random bytes.
            </summary>
             <remarks>
             raPocketGuid / worked on smartPhone
             </remarks>
        </member>
        <member name="M:OpenNETCF.Security.Cryptography.NativeMethods.Crypto.CryptGetDefaultProvider(System.UInt32,System.UInt32@,System.UInt32,System.Text.StringBuilder,System.UInt32@)">
            <summary>
            This function finds the default cryptographic service provider (CSP) of a specified 
            type either for the current user or the device. The name of the default CSP for 
            the type specified in the dwProvType parameter is returned in the pszProvName buffer.
            </summary>
             <remarks>
             this did not work on smartPhone
             can just use CryptAcquireContext and pass in alot of nulls
             </remarks>
        </member>
        <member name="M:OpenNETCF.Security.Cryptography.NativeMethods.Crypto.CryptGetHashParam(System.IntPtr,System.UInt32,System.Byte[],System.UInt32@,System.UInt32)">
            <summary>
            This function retrieves data that governs the operations of a hash object and 
            retrieves the actual hash value.
            </summary>
             <remarks>
             mca / worked on smartPhone
             </remarks>
        </member>
        <member name="M:OpenNETCF.Security.Cryptography.NativeMethods.Crypto.CryptGetKeyParam(System.IntPtr,System.UInt32,System.Byte[],System.UInt32@,System.UInt32)">
            <summary>
            This function lets applications retrieve data that governs the operations of a key. 
            In the Microsoft cryptographic service providers (CSPs), the base symmetric keying 
            material is not obtainable by this or any other function.
            </summary>
             <remarks>
             works on smartPhone
             </remarks>
        </member>
        <member name="M:OpenNETCF.Security.Cryptography.NativeMethods.Crypto.CryptGetProvParam(System.IntPtr,System.UInt32,System.Byte[],System.UInt32@,System.UInt32)">
            <summary>
            This function retrieves parameters that govern the operations of a cryptographic 
            service provider (CSP).
            </summary>
             <remarks>
             works on the smartPhone
             </remarks>
        </member>
        <member name="M:OpenNETCF.Security.Cryptography.NativeMethods.Crypto.CryptGetUserKey(System.IntPtr,System.UInt32,System.IntPtr@)">
            <summary>
            This function retrieves a handle to a permanent user key pair, such as the user's 
            signature key pair. This function also retrieves a handle to one of a user's two 
            public/private key pairs. Only the owner of the public/private key pairs uses the 
            function and only when the handle to a cryptographic service provider (CSP) and 
            its associated key container is available. Use the CryptAcquireCertificatePrivateKey 
            function if the user's certificate is available, but not the CSP handle.
            </summary>
             <remarks>
             mca / works on smartPhone
             </remarks>
        </member>
        <member name="M:OpenNETCF.Security.Cryptography.NativeMethods.Crypto.CryptHashData(System.IntPtr,System.Byte[],System.Int32,System.UInt32)">
            <summary>
            This function adds data to a specified hash object. This function and the 
            CryptHashSessionKey function can be called multiple times to compute the hash on 
            long streams or on discontinuous streams.
            Before calling this function, the CryptCreateHash function must be called to create 
            a handle to a hash object.
            </summary>
             <remarks>
             raCrypto, mca / worked on smartPhone
             </remarks>
        </member>
        <member name="M:OpenNETCF.Security.Cryptography.NativeMethods.Crypto.CryptHashSessionKey(System.IntPtr,System.IntPtr,System.UInt32)">
            <summary>
            This function computes the cryptographic hash of a session key object. This 
            function can be called multiple times with the same hash handle to compute the hash 
            of multiple keys. Calls to the CryptHashSessionKey function can be interspersed 
            with calls to the CryptHashData function.
            Before calling this function, the CryptCreateHash function must be called to get a 
            handle to a hash object. 
            </summary>
             <remarks>
             works on smartPhone
             </remarks>
        </member>
        <member name="M:OpenNETCF.Security.Cryptography.NativeMethods.Crypto.CryptImportKey(System.IntPtr,System.Byte[],System.UInt32,System.IntPtr,System.UInt32,System.IntPtr@)">
            <summary>
            This function transfers a cryptographic key from a key binary large object (BLOB) 
            to the cryptographic service provider (CSP). This function can be used to import 
            an Schannel session key, regular session key, public key, or public/private key 
            pair. For all but the public key, the key or key pair is encrypted. 
            </summary>
             <remarks>
             mca / works on smartPhone
             </remarks>
        </member>
        <member name="M:OpenNETCF.Security.Cryptography.NativeMethods.Crypto.CryptProtectData(OpenNETCF.Security.Cryptography.NativeMethods.CRYPTOAPI_BLOB@,System.Text.StringBuilder,System.IntPtr,System.IntPtr,System.IntPtr,System.UInt32,OpenNETCF.Security.Cryptography.NativeMethods.CRYPTOAPI_BLOB@)">
            <summary>
            This function performs encryption on the data in a DATA_BLOB structure. Typically, 
            only a user with the same logon credentials as the encrypter can decrypt the data. 
            In addition, the encryption and decryption usually must be done on the same 
            computer. For information about exceptions, see the Remarks section. 
            Note   An untrusted application can call the CryptProtectData function. The call 
            will fail only if CRYPTPROTECT_SYSTEM is specified for the dwFlags parameter.
            </summary>
             <remarks>
             works on smartPhone
             </remarks>
        </member>
        <member name="M:OpenNETCF.Security.Cryptography.NativeMethods.Crypto.CryptReleaseContext(System.IntPtr,System.UInt32)">
            <summary>
            This function releases the handle to a cryptographic service provider (CSP) and 
            the key container. At each call to this function, the reference count on the CSP 
            is reduced by one. When the reference count reaches zero, the context is fully 
            released and it can no longer be used by any function in the application. 
            The application calls this function when it is finished using the CSP. After this 
            function is called, the CSP handle specified by the hProv parameter is no longer 
            valid; however, the function does not destroy either the key container or any key 
            pairs.
            </summary>
             <remarks>
             raCrypto / works on smartPhone
             </remarks>
        </member>
        <member name="M:OpenNETCF.Security.Cryptography.NativeMethods.Crypto.CryptSetHashParam(System.IntPtr,System.UInt32,System.Byte[],System.UInt32)">
            <summary>
            This function customizes the operations of a hash object. Currently, only a single 
            parameter is defined for this function. 
            </summary>
             <remarks>
             works on smartPhone
             </remarks>
        </member>
        <member name="M:OpenNETCF.Security.Cryptography.NativeMethods.Crypto.CryptSetKeyParam(System.IntPtr,System.UInt32,System.Byte[],System.UInt32)">
            <summary>
            This function customizes various aspects of a key's operations. The values set by 
            this function are not persisted to memory and are used only within a single session. 
            The Microsoft cryptographic service providers (CSPs) do not allow setting the 
            values for key exchange or signature keys; however, custom providers may define 
            parameters that can be set on these keys.
            </summary>
             <remarks>
             worked on smartPhone
             </remarks>
        </member>
        <member name="M:OpenNETCF.Security.Cryptography.NativeMethods.Crypto.CryptSetProvider(System.String,System.UInt32)">
            <summary>
            This function specifies the current user default cryptographic service provider 
            (CSP). Typical applications do not use this function. It is intended for use solely 
            by administrative applications. 
            If a current user's default provider is set, that default provider is acquired by 
            any call by that user to the CryptAcquireContext function specifying a dwProvType 
            provider type but not a CSP name. 
            </summary>
             <remarks>
             worked on SmartPhone
             </remarks>
        </member>
        <member name="M:OpenNETCF.Security.Cryptography.NativeMethods.Crypto.CryptSetProviderEx(System.String,System.UInt32,System.UInt32@,System.UInt32)">
            <summary>
            This function specifies the default cryptographic service provider (CSP) for the 
            current user or the local device.
            If a current user's default provider is set, that default provider is acquired by 
            any call by that user to the CryptAcquireContext function specifying a dwProvType 
            provider type but not a CSP name.
            If a local computer default is set, calls to the CryptAcquireContext function by a 
            user not having a current user default set and not specifying a CSP result in the 
            use of the local computer's default CSP.
            Typical applications do not use this function. It is intended for use solely by 
            administrative applications. 
            </summary>
             <remarks>
             this did not work on smartPhone, dont need it
             </remarks>
        </member>
        <member name="M:OpenNETCF.Security.Cryptography.NativeMethods.Crypto.CryptSetProvParam(System.IntPtr,System.UInt32,System.Byte[],System.UInt32)">
            <summary>
            This function customizes the operations of a cryptographic service provider (CSP). 
            This function is commonly used to set a security descriptor on the key container 
            associated with a CSP to control access to the private keys in that key container.
            </summary>
             <remarks>
             works on smartPhone
             </remarks>
        </member>
        <member name="M:OpenNETCF.Security.Cryptography.NativeMethods.Crypto.CryptSignHash(System.IntPtr,System.UInt32,System.String,System.UInt32,System.Byte[],System.UInt32@)">
            <summary>
            This function signs data. Because all signature algorithms are asymmetric and 
            therefore slow, the CryptoAPI does not let data be signed directly. Instead, you 
            must first hash the data and then use the CryptSignHash function to sign the hash 
            value.
            </summary>
             <remarks>
             works on smartPhone
             </remarks>
        </member>
        <member name="M:OpenNETCF.Security.Cryptography.NativeMethods.Crypto.CryptUnprotectData(OpenNETCF.Security.Cryptography.NativeMethods.CRYPTOAPI_BLOB@,System.IntPtr@,System.IntPtr,System.IntPtr,System.IntPtr,System.UInt32,OpenNETCF.Security.Cryptography.NativeMethods.CRYPTOAPI_BLOB@)">
            <summary>
            This function decrypts and checks the integrity of the data in a DATA_BLOB 
            structure. Usually, only a user with the same logon credentials as the encrypter 
            can decrypt the data. In addition, the encryption and decryption must be done on 
            the same computer. 
            Note   An untrusted application can call the CryptUnprotectData function. The call 
            will fail only if CRYPTPROTECT_SYSTEM is specified for the dwFlags parameter.
            </summary>
             <remarks>
             works on smartPhone
             </remarks>
        </member>
        <member name="M:OpenNETCF.Security.Cryptography.NativeMethods.Crypto.CryptVerifySignature(System.IntPtr,System.Byte[],System.UInt32,System.IntPtr,System.String,System.UInt32)">
            <summary>
            This function verifies the signature of a hash object.
            Before calling this function, the CryptCreateHash function must be called to get a 
            handle to a hash object. The CryptHashData function or CryptHashSessionKey function 
            is then used to add the data or session keys to the hash object.
            After the call to the CryptVerifySignature function has been completed, only the 
            CryptDestroyHash function can be called using the hHash handle.
            </summary>
             <remarks>
             works on smartPhone
             </remarks>
        </member>
        <member name="M:OpenNETCF.Security.Cryptography.NativeMethods.Dsa.#ctor(System.Byte[])">
            <summary>
            rips apart rawKey into public byte [] for DsaParameters class
            </summary>
        </member>
        <member name="M:OpenNETCF.Security.Cryptography.NativeMethods.Dsa.ToXmlString(System.Boolean)">
            <summary>
            returns public byte arrays in xml format
            </summary>
        </member>
        <member name="M:OpenNETCF.Security.Cryptography.NativeMethods.Dsa.FromXmlString(System.String)">
            <summary>
            builds up public byte arrays, and rawKey from xml
            </summary>
        </member>
        <member name="M:OpenNETCF.Security.Cryptography.NativeMethods.Guid.NewGuid">
            <summary>
            returns preferred NewGuidXXX()
            </summary>
        </member>
        <member name="M:OpenNETCF.Security.Cryptography.NativeMethods.Guid.NewGuidOle">
            <summary>
            pInvokes ole32.dll
            </summary>
            <remarks>not on PPC 2002 device</remarks>
        </member>
        <member name="M:OpenNETCF.Security.Cryptography.NativeMethods.Guid.NewGuidCrypto">
            <summary>
            uses CryptoApi
            </summary>
        </member>
        <member name="M:OpenNETCF.Security.Cryptography.NativeMethods.Guid.NewGuidTicks">
            <summary>
            only uses TickCount and bit shifting
            </summary>
        </member>
        <member name="M:OpenNETCF.Security.Cryptography.NativeMethods.Hash.DuplicateHash(System.IntPtr)">
            <summary>
            INVALID_PARAMETER
            </summary>
        </member>
        <member name="M:OpenNETCF.Security.Cryptography.NativeMethods.Key.SetPaddingMode(System.IntPtr,OpenNETCF.Security.Cryptography.NativeMethods.PaddingMode)">
            <summary>
            BAD_DATA
            </summary>
        </member>
        <member name="M:OpenNETCF.Security.Cryptography.NativeMethods.Key.DuplicateKey(System.IntPtr)">
            <summary>
            INVALID_PARAMETER
            </summary>
        </member>
        <member name="M:OpenNETCF.Security.Cryptography.NativeMethods.Mem.CryptMemAlloc(System.Int32)">
            <summary>
            The CryptMemAlloc function allocates memory for a buffer. 
            It is used by all Crypt32.lib functions that return allocated buffers.
            </summary>
            <param name="cbSize">Number of bytes to be allocated. </param>
            <returns>Returns a pointer to the buffer allocated. 
            If the function fails, NULL is returned. </returns>
        </member>
        <member name="M:OpenNETCF.Security.Cryptography.NativeMethods.Mem.CryptMemFree(System.IntPtr)">
            <summary>
            The CryptMemFree function frees memory allocated by 
            CryptMemAlloc or CryptMemRealloc.
            </summary>
            <param name="pv">Pointer to the buffer to be freed. </param>
        </member>
        <member name="M:OpenNETCF.Security.Cryptography.NativeMethods.Mem.CryptMemRealloc(System.IntPtr,System.Int32)">
            <summary>
            The CryptMemRealloc function frees the memory currently allocated for a buffer 
            and allocates memory for a new buffer.
            </summary>
            <param name="pv">Pointer to a currently allocated buffer. </param>
            <param name="cbSize">Number of bytes to be allocated. </param>
            <returns>Returns a pointer to the buffer allocated. 
            If the function fails, NULL is returned. </returns>
        </member>
        <member name="M:OpenNETCF.Security.Cryptography.NativeMethods.Prov.SetProviderEx(System.String,OpenNETCF.Security.Cryptography.NativeMethods.ProvType,OpenNETCF.Security.Cryptography.NativeMethods.ProvDefaultFlag)">
            <summary>
            INVALID_PARAMETER. call SetProvider instead
            </summary>
        </member>
        <member name="M:OpenNETCF.Security.Cryptography.NativeMethods.Prov.GetDefaultProvider(OpenNETCF.Security.Cryptography.NativeMethods.ProvType,OpenNETCF.Security.Cryptography.NativeMethods.ProvDefaultFlag)">
            <summary>
            INVALID_PARAMETER. call Context.AcquireContext with minimal values instead
            </summary>
        </member>
        <member name="M:OpenNETCF.Security.Cryptography.NativeMethods.Prov.EnumProviderTypes">
            <summary>
            works by calling EnumProviders. otherwise INVALID_PARAMETER
            </summary>
        </member>
        <member name="M:OpenNETCF.Security.Cryptography.NativeMethods.Rand.CeGenRandom(System.Int32)">
            <summary>
            if crypto is not available
            </summary>
            <remarks>not on PPC 2002 device</remarks>
        </member>
        <member name="M:OpenNETCF.Security.Cryptography.NativeMethods.Rand.GetRandomBytes(System.Int32)">
            <summary>
            not seeded
            </summary>
        </member>
        <member name="M:OpenNETCF.Security.Cryptography.NativeMethods.Rand.GetRandomBytes(System.Byte[])">
            <summary>
            seeded, dont have to specify a provider
            </summary>
        </member>
        <member name="M:OpenNETCF.Security.Cryptography.NativeMethods.Rsa.#ctor(System.Byte[])">
            <summary>
            rips apart rawKey into public byte [] for RsaParameters class
            </summary>
        </member>
        <member name="M:OpenNETCF.Security.Cryptography.NativeMethods.Rsa.ToXmlString(System.Boolean)">
            <summary>
            returns public byte arrays in xml format
            </summary>
        </member>
        <member name="M:OpenNETCF.Security.Cryptography.NativeMethods.Rsa.FromXmlString(System.String)">
            <summary>
            builds up public byte arrays, and rawKey from xml
            </summary>
        </member>
        <member name="M:OpenNETCF.Security.Cryptography.NativeMethods.Rsa.ExponentOfOne">
            <summary>
            used to extract session keys in the clear
            </summary>
        </member>
        <member name="M:OpenNETCF.Security.Cryptography.PasswordDeriveBytes.CryptDeriveKey(System.String,System.String,System.Int32,System.Byte[])">
            <summary>
            Derives a cryptographic key from the PasswordDeriveBytes object.
            </summary>
            <remarks>
            If the keySize parameter is set to 0, the default key size for the specified algorithm is used.
            </remarks>
            <param name="algName">The algorithm name for which to derive the key. </param>
            <param name="algHashName">The hash algorithm name to use to derive the key. </param>
            <param name="keySize">The size of the key to derive. </param>
            <param name="IV">The initialization vector (IV) to use to derive the key.</param>
            <returns>The derived key.</returns>
        </member>
        <member name="M:OpenNETCF.Security.Cryptography.PasswordDeriveBytes.GetBytes(System.Int32)">
            <summary>
            Returns pseudo-random key bytes.
            </summary>
            <param name="cb">The number of pseudo-random key bytes to generate.</param>
            <returns>A byte array filled with pseudo-random key bytes.</returns>
        </member>
        <member name="M:OpenNETCF.Security.Cryptography.PasswordDeriveBytes.Reset">
            <summary>
            Resets the state of the operation.
            </summary>
        </member>
        <member name="T:OpenNETCF.Threading.MonitorEx">
            <summary>
            Enhanced alternative to the <see cref="T:System.Threading.Monitor"/> class.  Provides a mechanism that synchronizes access to objects.
            </summary>
            <seealso cref="T:System.Threading.Monitor"/>
        </member>
        <member name="F:OpenNETCF.Threading.MonitorEx.currentOwner">
            <summary>
            The owner of the monitor, or null if it's not owned
            by any thread.
            </summary>
        </member>
        <member name="F:OpenNETCF.Threading.MonitorEx.lockCount">
            <summary>
            Number of levels of locking (0 for an unowned
            monitor, 1 after a single call to Enter, etc).
            </summary>
        </member>
        <member name="F:OpenNETCF.Threading.MonitorEx.stateLock">
            <summary>
            Object to be used as a monitor for state changing.
            </summary>
        </member>
        <member name="F:OpenNETCF.Threading.MonitorEx.waitPulseEvent">
            <summary>
            AutoResetEvent used to implement Wait/Pulse/PulseAll.
            Initially not signalled, so that a call to Wait will
            block until the first pulse.
            </summary>
        </member>
        <member name="F:OpenNETCF.Threading.MonitorEx.waitCounter">
            <summary>
            Number of threads waiting on this monitor.
            </summary>
        </member>
        <member name="F:OpenNETCF.Threading.MonitorEx.enterExitEvent">
            <summary>
            Event used for Enter/Exit. Initially signalled
            to allow the first thread to come in.
            </summary>
        </member>
        <member name="M:OpenNETCF.Threading.MonitorEx.#ctor">
            <summary>
            Creates a new monitor, not owned by any thread.
            </summary>
        </member>
        <member name="M:OpenNETCF.Threading.MonitorEx.Enter">
            <summary>
            Enters the monitor (locks it), blocking until the
            lock is held. If the monitor is already held by the current thread,
            its lock count is incremented.
            </summary>
        </member>
        <member name="M:OpenNETCF.Threading.MonitorEx.TryEnter">
            <summary>
            Attempts to enter the monitor (locking it) but does not block
            if the monitor is already owned.
            </summary>
            <returns>Whether or not the current thread now owns the monitor.
            </returns>
        </member>
        <member name="M:OpenNETCF.Threading.MonitorEx.Exit">
            <summary>
            Releases a level of locking, unlocking the monitor itself
            if the lock count becomes 0.
            </summary>
            <exception cref="T:OpenNETCF.Threading.SynchronizationLockException">If the current 
            thread does not own the monitor.</exception>
        </member>
        <member name="M:OpenNETCF.Threading.MonitorEx.Pulse">
            <summary>
            Pulses the monitor once - a single waiting thread will be released
            and continue its execution after the current thread has exited the
            monitor. Unlike Pulse on the normal framework, no guarantee is
            made about which thread is woken.
            </summary>
            <exception cref="T:OpenNETCF.Threading.SynchronizationLockException">If the 
            current thread does not own the monitor.</exception>
        </member>
        <member name="M:OpenNETCF.Threading.MonitorEx.PulseAll">
            <summary>
            Pulses the monitor such that all waiting threads are woken up.
            All threads will then try to regain the lock on this monitor.
            No order for regaining the lock is specified.
            </summary>
            <exception cref="T:OpenNETCF.Threading.SynchronizationLockException">If the current 
            thread does not own the monitor.</exception>
        </member>
        <member name="M:OpenNETCF.Threading.MonitorEx.Wait">
            <summary>
            Relinquishes the lock on this monitor (whatever the lock count is)
            and waits for the monitor to be pulsed. After the monitor has been 
            pulsed, the thread blocks again until it has regained the lock (at 
            which point it will have the same lock count as it had before), and 
            then the method returns.
            </summary>
        </member>
        <member name="T:OpenNETCF.Threading.SynchronizationLockException">
            <summary>
            Exception thrown by <see cref="T:OpenNETCF.Threading.MonitorEx"/> when threading rules
            are violated (usually due to an operation being
            invoked on a monitor not owned by the current thread).
            </summary>
        </member>
        <member name="M:OpenNETCF.Threading.SynchronizationLockException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenNETCF.Threading.SynchronizationLockException"/> class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="T:OpenNETCF.Threading.ThreadEx">
            <summary>
            Creates and controls a thread, sets its priority, and gets its status.
            <para><b>New in v1.1</b></para>
            </summary>
        </member>
        <member name="M:OpenNETCF.Threading.ThreadEx.Sleep(System.Int32)">
            <summary>
            Blocks the current thread for the specified number of milliseconds.
            </summary>
            <param name="millisecondsTimeout">Amount of time to block</param>
        </member>
        <member name="M:OpenNETCF.Threading.ThreadEx.Sleep(System.TimeSpan)">
            <summary>
            Blocks the current thread for the specified span of time.
            </summary>
            <param name="timeout">Amount of time to block</param>
        </member>
        <member name="M:OpenNETCF.Threading.ThreadEx.AllocateDataSlot">
            <summary>
            Allocates an unnamed data slot on all the threads.
            </summary>
            <returns>A <see cref="T:System.LocalDataStoreSlot"/>.</returns>
        </member>
        <member name="M:OpenNETCF.Threading.ThreadEx.AllocateNamedDataSlot(System.String)">
            <summary>
            Allocates a named data slot on all threads.
            </summary>
            <param name="name">The name of the data slot to be allocated.</param>
            <returns>A <see cref="T:System.LocalDataStoreSlot"/>.</returns>
        </member>
        <member name="M:OpenNETCF.Threading.ThreadEx.FreeNamedDataSlot(System.String)">
            <summary>
            Eliminates the association between a name and a slot, for all threads in the process.
            </summary>
            <param name="name">The name of the data slot to be freed.</param>
        </member>
        <member name="M:OpenNETCF.Threading.ThreadEx.GetData(System.LocalDataStoreSlot)">
            <summary>
            Retrieves the value from the specified slot on the current thread.
            </summary>
            <param name="slot">The <see cref="T:System.LocalDataStoreSlot"/> from which to get the value.</param>
            <returns>The value retrieved</returns>
        </member>
        <member name="M:OpenNETCF.Threading.ThreadEx.GetNamedDataSlot(System.String)">
            <summary>
            Looks up a named data slot.
            </summary>
            <param name="name">The name of the local data slot.</param>
            <returns>A <see cref="T:System.LocalDataStoreSlot"/> allocated for this thread.</returns>
        </member>
        <member name="M:OpenNETCF.Threading.ThreadEx.SetData(System.LocalDataStoreSlot,System.Object)">
            <summary>
            Sets the data in the specified slot on the currently running thread, for that thread's current domain.
            </summary>
            <param name="slot">The <see cref="T:System.LocalDataStoreSlot"/> in which to set the value.</param>
            <param name="data">The value to be set.</param>
        </member>
        <member name="M:OpenNETCF.Threading.ThreadEx.op_Implicit(OpenNETCF.Threading.ThreadEx)~System.Threading.Thread">
            <summary>
            Returns a <see cref="T:System.Threading.Thread"/> equivalent for the ThreadEx instance
            </summary>
            <param name="threadEx">The ThreadEx to convert</param>
            <returns>A <see cref="T:System.Threading.Thread"/></returns>
        </member>
        <member name="M:OpenNETCF.Threading.ThreadEx.#ctor(System.Threading.ThreadStart)">
            <summary>
            Initializes a new instance of the Thread class.
            </summary>
            <param name="start">A <see cref="T:System.Threading.ThreadStart"/> delegate that references the methods to be invoked when this thread begins executing.</param>
        </member>
        <member name="M:OpenNETCF.Threading.ThreadEx.Start">
            <summary>
            Causes the operating system to change the state of the current instance to <see cref="F:OpenNETCF.Threading.ThreadState.Running"/>.
            </summary>
        </member>
        <member name="M:OpenNETCF.Threading.ThreadEx.Suspend">
            <summary>
            Either suspends the thread, or if the thread is already suspended, has no effect.
            </summary>
        </member>
        <member name="M:OpenNETCF.Threading.ThreadEx.Resume">
            <summary>
            Resumes a thread that has been suspended.
            </summary>
        </member>
        <member name="M:OpenNETCF.Threading.ThreadEx.Abort">
            <summary>
            Terminates the running thread.  This method will <b>always</b> throw a <see cref="T:OpenNETCF.BestPracticeViolationException"/>
            </summary>
        </member>
        <member name="M:OpenNETCF.Threading.ThreadEx.Join">
            <summary>
            Blocks the calling thread until a thread terminates or the specified time elapses.
            </summary>
            <returns><b>true</b> if the thread has terminated;</returns>
        </member>
        <member name="M:OpenNETCF.Threading.ThreadEx.Join(System.Int32)">
            <summary>
            Blocks the calling thread until a thread terminates or the specified time elapses.
            </summary>
            <param name="millisecondsTimeout">The number of milliseconds to wait for the thread to terminate.</param>
            <returns><b>true</b> if the thread has terminated; <b>false</b> if the thread has not terminated after the amount of time specified by the <i>millisecondsTimeout</i> parameter has elapsed.</returns>
        </member>
        <member name="M:OpenNETCF.Threading.ThreadEx.Join(System.TimeSpan)">
            <summary>
            Blocks the calling thread until a thread terminates or the specified time elapses.
            </summary>
            <param name="timeout"></param>
            <returns><b>true</b> if the thread has terminated; <b>false</b> if the thread has not terminated after the amount of time specified by the <i>timeout</i> parameter has elapsed.</returns>
        </member>
        <member name="P:OpenNETCF.Threading.ThreadEx.Name">
            <summary>
            Gets or sets the name of the thread.
            </summary>
            <value>A string containing the name of the thread, or a null reference (Nothing in Visual Basic) if no name was set.</value>
        </member>
        <member name="P:OpenNETCF.Threading.ThreadEx.IsAlive">
            <summary>
            Gets a value indicating the execution status of the current thread.
            </summary>
            <value><b>true</b> if this thread has been started and has not terminated normally or aborted; otherwise, <b>false</b>.</value>
        </member>
        <member name="P:OpenNETCF.Threading.ThreadEx.Priority">
            <summary>
            Gets or sets a value indicating the scheduling priority of a thread.
            </summary>
            <value>One of the <see cref="T:System.Threading.ThreadPriority"/> values. The default value is Normal.</value>
        </member>
        <member name="P:OpenNETCF.Threading.ThreadEx.State">
            <summary>
            Returns the ThreadEx instance's current <see cref="T:OpenNETCF.Threading.ThreadState"/>
            </summary>
        </member>
        <member name="T:OpenNETCF.Threading.ThreadState">
            <summary>
            Specifies the execution states of a <see cref="T:OpenNETCF.Threading.ThreadEx"/>.
            </summary>
        </member>
        <member name="F:OpenNETCF.Threading.ThreadState.Unstarted">
            <summary>
            Thread is unstarted
            </summary>
        </member>
        <member name="F:OpenNETCF.Threading.ThreadState.Running">
            <summary>
            Thread is running
            </summary>
        </member>
        <member name="F:OpenNETCF.Threading.ThreadState.WaitSleepJoin">
            <summary>
            Thread is waiting in a Join
            </summary>
        </member>
        <member name="F:OpenNETCF.Threading.ThreadState.SuspendRequested">
            <summary>
            Suspend has been called but not acted upon
            </summary>
        </member>
        <member name="F:OpenNETCF.Threading.ThreadState.Suspended">
            <summary>
            Thread is suspended
            </summary>
        </member>
        <member name="F:OpenNETCF.Threading.ThreadState.Stopped">
            <summary>
            Thread has either terminated or been Aborted
            </summary>
        </member>
        <member name="T:OpenNETCF.ToolHelp.ProcessEntry">
            <summary>
            Wrapper around the ToolHelp ProcessEntry information
            </summary>
            <remarks>
            This class requires the toolhelp32.dll
            </remarks>
        </member>
        <member name="M:OpenNETCF.ToolHelp.ProcessEntry.ToString">
            <summary>
            Get the short name of the current process
            </summary>
            <returns>The current process name</returns>
        </member>
        <member name="M:OpenNETCF.ToolHelp.ProcessEntry.Kill">
            <summary>
            Kill the Process
            </summary>
        </member>
        <member name="M:OpenNETCF.ToolHelp.ProcessEntry.GetProcesses">
            <summary>
            Rerieves an array of all running processes
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenNETCF.ToolHelp.ProcessEntry.BaseAddress">
            <summary>
            Base address for the process
            </summary>
        </member>
        <member name="P:OpenNETCF.ToolHelp.ProcessEntry.ThreadCount">
            <summary>
            Number of execution threads started by the process.
            </summary>
        </member>
        <member name="P:OpenNETCF.ToolHelp.ProcessEntry.Handle">
            <summary>
            Identifier of the process. The contents of this member can be used by Win32 API elements. 
            </summary>
        </member>
        <member name="P:OpenNETCF.ToolHelp.ProcessEntry.ExeFile">
            <summary>
            Null-terminated string that contains the path and file name of the executable file for the process. 
            </summary>
        </member>
        <member name="P:OpenNETCF.ToolHelp.ProcessEntry.PROCESSENTRY32.ProcessID">
            <summary>
            Identifier of the process. The contents of this member can be used by Win32 API elements.
            </summary>
        </member>
        <member name="T:OpenNETCF.Win32.Notify.Notify">
            <summary>
            Contains Notification related Methods
            </summary>
        </member>
        <member name="M:OpenNETCF.Win32.Notify.Notify.RunAppAtEvent(System.String,OpenNETCF.Win32.Notify.NotificationEvent)">
            <summary>   
            This function starts running an application when a specified event occurs.   
            </summary>   
            <param name="appName">Name of the application to be started.</param>   
            <param name="whichEvent">Event at which the application is to be started.</param>   
            <seealso cref="T:OpenNETCF.Win32.Core.EventNotifications"/>   
        </member>
        <member name="M:OpenNETCF.Win32.Notify.Notify.RunAppAtTime(System.String,System.DateTime)">
            <summary>   
            This function prompts the system to start running a specified application at a specified time.   
            </summary>   
            <param name="appName">Name of the application to be started.</param>   
            <param name="time">DateTime at which to run application.</param>
            <remarks>To cancel an existing RunAppATime request pass the application name and DateTime.MinValue</remarks>
        </member>
        <member name="M:OpenNETCF.Win32.Notify.Notify.SetUserNotification(System.String,System.DateTime,OpenNETCF.Win32.Notify.UserNotification)">
            <summary>
            Creates a new user notification.
            </summary>
            <param name="application">String that specifies the name of the application that owns this notification.</param>
            <param name="time">The time when the notification should occur.</param>
            <param name="notify">Notification object that describes the events that are to occur when the notification time is reached.</param>
            <returns>The handle to the notification indicates success.</returns>
        </member>
        <member name="M:OpenNETCF.Win32.Notify.Notify.SetUserNotification(System.Int32,System.String,System.DateTime,OpenNETCF.Win32.Notify.UserNotification)">
            <summary>
            Edit an existing user notification.
            </summary>
            <param name="handle">Handle to the notification to overwrite.</param>
            <param name="application">String that specifies the name of the application that owns this notification.</param>
            <param name="time">The time when the notification should occur.</param>
            <param name="notify">Notification object that describes the events that are to occur when the notification time is reached.</param>
            <returns>The handle to the notification indicates success.</returns>
        </member>
        <member name="M:OpenNETCF.Win32.Notify.Notify.SetUserNotification(OpenNETCF.Win32.Notify.UserNotificationTrigger,OpenNETCF.Win32.Notify.UserNotification)">
            <summary>
            This function creates a new user notification.
            </summary>
            <param name="trigger">A UserNotificationTrigger that defines what event activates a notification.</param>
            <param name="notification">A UserNotification that defines how the system should respond when a notification occurs.</param>
            <returns>Handle to the notification event if successful.</returns>
        </member>
        <member name="M:OpenNETCF.Win32.Notify.Notify.SetUserNotification(System.Int32,OpenNETCF.Win32.Notify.UserNotificationTrigger,OpenNETCF.Win32.Notify.UserNotification)">
            <summary>
            This function modifies an existing user notification.
            </summary>
            <param name="handle">Handle of the Notification to be modified</param>
            <param name="trigger">A UserNotificationTrigger that defines what event activates a notification.</param>
            <param name="notification">A UserNotification that defines how the system should respond when a notification occurs.</param>
            <returns>Handle to the notification event if successful.</returns>
        </member>
        <member name="M:OpenNETCF.Win32.Notify.Notify.ClearUserNotification(System.Int32)">
            <summary>
            Deletes a registered user notification that was created by a previous call to the SetUserNotification function.
            </summary>
            <param name="handle">Handle to the user notification to delete.</param>
            <returns>TRUE indicates success. FALSE indicates failure.</returns>
            <remarks>ClearNotification does not operate on notifications that have occurred.</remarks>
        </member>
        <member name="M:OpenNETCF.Win32.Notify.Notify.GetUserNotification(System.Int32)">
            <summary>
            Retrieves notification information associated with a handle.
            </summary>
            <param name="handle">Handle to the user notification to retrieve.</param>
            <returns>The requested UserNotification.</returns>
        </member>
        <member name="M:OpenNETCF.Win32.Notify.Notify.GetUserNotificationHandles">
            <summary>
            Returns an array of currently stored notifications.
            </summary>
            <returns>Array of currently stored notifications.</returns>
        </member>
        <member name="M:OpenNETCF.Win32.Notify.Notify.GetUserNotificationPreferences(System.IntPtr)">
            <summary>
            This function queries the user for notification settings by displaying a dialog box showing options that are valid for the current hardware platform.
            </summary>
            <param name="hWnd">Handle to the parent window for the notification settings dialog box.</param>
            <returns>A UserNotification structure containing the user's notification settings.</returns>
        </member>
        <member name="M:OpenNETCF.Win32.Notify.Notify.GetUserNotificationPreferences(System.IntPtr,OpenNETCF.Win32.Notify.UserNotification)">
            <summary>
            This function queries the user for notification settings by displaying a dialog box showing options that are valid for the current hardware platform.
            </summary>
            <param name="hWnd">Handle to the parent window for the notification settings dialog box.</param>
            <param name="template">UserNotification structure used to populate the default settings.</param>
            <returns>A UserNotification structure containing the user's notification settings.</returns>
        </member>
        <member name="M:OpenNETCF.Win32.Notify.Notify.HandleAppNotifications(System.String)">
            <summary>
            This function marks as "handled" all notifications previously registered by the given application that have occurred.
            </summary>
            <param name="application">The name of the application whose events are to be marked as "handled".
            This must be the name that was passed in to <see cref="M:OpenNETCF.Win32.Notify.Notify.SetUserNotification"/> as the owner of the notification.</param>
        </member>
        <member name="T:OpenNETCF.Win32.Notify.UserNotification">
            <summary>
            This structure contains information used to initialize the user notifications settings dialog box, and receives the user’s notification preferences entered by way of the dialog box.
            Also used when setting a user notification. 
            </summary>
        </member>
        <member name="M:OpenNETCF.Win32.Notify.UserNotification.#ctor">
            <summary>
            Create a new instance of the UserNotification class
            </summary>
        </member>
        <member name="M:OpenNETCF.Win32.Notify.UserNotification.FromPtr(System.IntPtr)">
            <summary>
            Returns a UserNotification object from a specified memory location.
            </summary>
            <param name="data">Pointer to UserNotification in unmanaged memory.</param>
            <returns>A new UserNotification object.</returns>
            <remarks>This method is used internally and should not be required in normal use.</remarks>
        </member>
        <member name="M:OpenNETCF.Win32.Notify.UserNotification.Finalize">
            <summary>
            This member overrides <see cref="M:System.Object.Finalize">Object.Finalize</see>.
            </summary>
        </member>
        <member name="P:OpenNETCF.Win32.Notify.UserNotification.Action">
            <summary>
            Any combination of the <see cref="T:OpenNETCF.Win32.Notify.NotificationAction"/> members.  
            </summary>
            <value>Flags which specifies the action(s) to be taken when the notification is triggered.</value>
            <remarks>Flags not valid on a given hardware platform will be ignored.</remarks>
        </member>
        <member name="P:OpenNETCF.Win32.Notify.UserNotification.Title">
            <summary>
            Required if NotificationAction.Dialog is set, ignored otherwise
            </summary>
        </member>
        <member name="P:OpenNETCF.Win32.Notify.UserNotification.Text">
            <summary>
            Required if NotificationAction.Dialog is set, ignored otherwise.
            </summary>
        </member>
        <member name="P:OpenNETCF.Win32.Notify.UserNotification.Sound">
            <summary>
            Sound string as supplied to PlaySound.
            </summary>
            <remarks>SetUserNotification() ignores it if the <see cref="P:OpenNETCF.Win32.Notify.UserNotification.Action">Action property</see> does not contain <see cref="T:OpenNETCF.Win32.Notify.NotifyAction">NotifyAction.Sound</see>.</remarks>
        </member>
        <member name="T:OpenNETCF.Win32.Notify.UserNotificationInfoHeader">
            <summary>
            Contains information about notification events.
            </summary>
        </member>
        <member name="M:OpenNETCF.Win32.Notify.UserNotificationInfoHeader.#ctor">
            <summary>
            Create a new instance of UserNotificationInfoHeader
            </summary>
        </member>
        <member name="M:OpenNETCF.Win32.Notify.UserNotificationInfoHeader.FromPtr(System.IntPtr)">
            <summary>
            
            </summary>
            <param name="pointer"></param>
            <returns></returns>
        </member>
        <member name="P:OpenNETCF.Win32.Notify.UserNotificationInfoHeader.Handle">
            <summary>
            Handle to the notification.
            </summary>
        </member>
        <member name="P:OpenNETCF.Win32.Notify.UserNotificationInfoHeader.Status">
            <summary>
            Indicates current state of the notification.
            </summary>
        </member>
        <member name="P:OpenNETCF.Win32.Notify.UserNotificationInfoHeader.UserNotificationTrigger">
            <summary>
            The UserNotificationTrigger object
            </summary>
        </member>
        <member name="P:OpenNETCF.Win32.Notify.UserNotificationInfoHeader.UserNotification">
            <summary>
            The UserNotification object.
            </summary>
        </member>
        <member name="T:OpenNETCF.Win32.Notify.UserNotificationTrigger">
            <summary>
            Defines what event activates a notification.
            </summary>
        </member>
        <member name="M:OpenNETCF.Win32.Notify.UserNotificationTrigger.#ctor">
            <summary>
            Create a new instance of UserNotificationTrigger
            </summary>
        </member>
        <member name="M:OpenNETCF.Win32.Notify.UserNotificationTrigger.FromPtr(System.IntPtr)">
            <summary>
            Returns a NotificationTrigger object from a native pointer.
            </summary>
            <param name="pointer">Native memory pointer.</param>
            <returns>New managed NotificationTrigger object.</returns>
        </member>
        <member name="P:OpenNETCF.Win32.Notify.UserNotificationTrigger.Type">
            <summary>
            Specifies the type of notification.
            </summary>
        </member>
        <member name="P:OpenNETCF.Win32.Notify.UserNotificationTrigger.Event">
            <summary>
            Specifies the type of event should Type = Event.
            </summary>
        </member>
        <member name="P:OpenNETCF.Win32.Notify.UserNotificationTrigger.Application">
            <summary>
            Name of the application to execute.
            </summary>
        </member>
        <member name="P:OpenNETCF.Win32.Notify.UserNotificationTrigger.Arguments">
            <summary>
            Command line (without the application name). 
            </summary>
        </member>
        <member name="P:OpenNETCF.Win32.Notify.UserNotificationTrigger.StartTime">
            <summary>
            Specifies the beginning of the notification period.
            </summary>
        </member>
        <member name="P:OpenNETCF.Win32.Notify.UserNotificationTrigger.EndTime">
            <summary>
            Specifies the end of the notification period. 
            </summary>
        </member>
        <member name="T:OpenNETCF.Win32.Notify.NotificationEvent">
            <summary>   
            System Event Flags   
            </summary>   
        </member>
        <member name="F:OpenNETCF.Win32.Notify.NotificationEvent.None">
            <summary>   
            No events—remove all event registrations for this application.   
            </summary>   
        </member>
        <member name="F:OpenNETCF.Win32.Notify.NotificationEvent.TimeChange">
            <summary>   
            When the system time is changed.   
            </summary>   
        </member>
        <member name="F:OpenNETCF.Win32.Notify.NotificationEvent.SyncEnd">
            <summary>   
            When data synchronization finishes.   
            </summary>   
        </member>
        <member name="F:OpenNETCF.Win32.Notify.NotificationEvent.DeviceChange">
            <summary>   
            When a PC Card device is changed.   
            </summary>   
        </member>
        <member name="F:OpenNETCF.Win32.Notify.NotificationEvent.RS232Detected">
            <summary>   
            When an RS232 connection is made.   
            </summary>   
        </member>
        <member name="F:OpenNETCF.Win32.Notify.NotificationEvent.RestoreEnd">
            <summary>   
            When a full device data restore completes.   
            </summary>   
        </member>
        <member name="F:OpenNETCF.Win32.Notify.NotificationEvent.Wakeup">
            <summary>   
            When the device wakes up.   
            </summary>   
        </member>
        <member name="F:OpenNETCF.Win32.Notify.NotificationEvent.TimeZoneChange">
            <summary>   
            When the time zone is changed.   
            </summary>   
        </member>
        <member name="F:OpenNETCF.Win32.Notify.NotificationEvent.MachineNameChange">
            <summary>
            When the machines name changes.
            Requires Windows CE.NET 4.2.
            </summary>
        </member>
        <member name="T:OpenNETCF.Win32.Notify.NotificationAction">
            <summary>
            Specifies the action to take when a notification event occurs.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Notify.NotificationAction.Led">
            <summary>
            Flashes the LED.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Notify.NotificationAction.Vibrate">
            <summary>
            Vibrates the device.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Notify.NotificationAction.Dialog">
            <summary>
            Displays the user notification dialog box.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Notify.NotificationAction.Sound">
            <summary>
            Plays the sound specified.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Notify.NotificationAction.Repeat">
            <summary>
            Repeats the sound for 10–15 seconds.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Notify.NotificationAction.Private">
            <summary>
            Dialog box z-order flag.
            Set if the notification dialog box should come up behind the password.
            </summary>
        </member>
        <member name="T:OpenNETCF.Win32.Notify.NotificationStatus">
            <summary>
            The status of the notification.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Notify.NotificationStatus.Inactive">
            <summary>
            The notification is not currently active.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Notify.NotificationStatus.Signalled">
            <summary>
            The notification is currently active.
            </summary>
        </member>
        <member name="T:OpenNETCF.Win32.Notify.NotificationType">
            <summary>
            Specifies the type of notification.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Notify.NotificationType.Event">
            <summary>
            System event notification.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Notify.NotificationType.Time">
            <summary>
            Time-based notification.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Notify.NotificationType.Period">
            <summary>
            Time-based notification that is active for the time period between <see cref="M:OpenNETCF.Win32.Notify.NotificationTrigger.StartTime"/> and <see cref="M:OpenNETCF.Win32.Notify.NotificationTrigger.EndTime"/>.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Notify.NotificationType.ClassicTime">
            <summary>
            Equivalent to using the SetUserNotification function.
            The standard command line is supplied.
            </summary>
        </member>
        <member name="T:OpenNETCF.Win32.Notify.NotificationCommandLine">
            <summary>
            Strings passed on the command line when an event occurs that the app has requested via CeRunAppAtEvent.  
            </summary>
            <remarks>Note that some of these strings will be used as the command line *prefix*, since the rest of the command line will be used as a parameter.</remarks>
        </member>
        <member name="F:OpenNETCF.Win32.Notify.NotificationCommandLine.AppRunAtTime">
            <summary>
            String passed on the command line when an app is run as the result of a call to <see cref="M:OpenNETCF.Win32.Notify.Notify.RunAppAtTime"/>.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Notify.NotificationCommandLine.AppRunToHandleNotification">
            <summary>
            Prefix of the command line when the user requests to run the application that "owns" a notification.  It is followed by a space, and the stringized version of the notification handle.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Notify.NotificationCommandLine.AppRunAfterTimeChange">
            <summary>
            Prefix of the command line when the user requests to run the application when the system time settings are changed.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Notify.NotificationCommandLine.AppRunAfterSync">
            <summary>
            Prefix of the command line when the user requests to run the application after synchronisation.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Notify.NotificationCommandLine.AppRunAtAcPowerOn">
            <summary>
            Prefix of the command line when the user requests to run the application when the device is connected to AC power.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Notify.NotificationCommandLine.AppRunAtAcPowerOff">
            <summary>
            Prefix of the command line when the user requests to run the application when the AC power is disconnected.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Notify.NotificationCommandLine.AppRunAtNetConnect">
            <summary>
            Prefix of the command line when the user requests to run the application when the device connects to a LAN.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Notify.NotificationCommandLine.AppRunAtNetDisconnect">
            <summary>
            Prefix of the command line when the user requests to run the application when the device disconnects from a LAN.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Notify.NotificationCommandLine.AppRunAtDeviceChange">
            <summary>
            Prefix of the command line when the user requests to run the application that "owns" a notification.  It is followed by a space, and the stringized version of the notification handle.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Notify.NotificationCommandLine.AppRunAtIrDiscovery">
            <summary>
            Prefix of the command line when the user requests to run the application when another device is discovered using IR.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Notify.NotificationCommandLine.AppRunAtRs232Detect">
            <summary>
            Prefix of the command line when the user requests to run the application when a serial port connection is attempted.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Notify.NotificationCommandLine.AppRunAfterRestore">
            <summary>
            Prefix of the command line when the user requests to run the application after a system restore.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Notify.NotificationCommandLine.AppRunAfterWakeup">
            <summary>
            Prefix of the command line when the user requests to run the application when the device wakes up from standby.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Notify.NotificationCommandLine.AppRunAfterTzChange">
            <summary>
            Prefix of the command line when the user requests to run the application when the device time-zone is changed.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Notify.NotificationCommandLine.AppRunAfterExtendedEvent">
            <summary>
            Prefix of the command line when the user requests to run the application after an extended event.
            </summary>
        </member>
        <member name="T:OpenNETCF.Win32.BitmapFileHeader">
            <summary>
            This structure contains information about the type, size, and layout of a file that containing a device-independent bitmap (DIB).
            </summary>
            <remarks>Wraps the native <b>BITMAPFILEHEADER</b> structure</remarks>
        </member>
        <member name="P:OpenNETCF.Win32.BitmapFileHeader.Type">
            <summary>
            Specifies the file type. It must be BM.
            </summary>
        </member>
        <member name="P:OpenNETCF.Win32.BitmapFileHeader.Size">
            <summary>
            Specifies the size, in bytes, of the bitmap file.
            </summary>
        </member>
        <member name="P:OpenNETCF.Win32.BitmapFileHeader.OffBits">
            <summary>
            Specifies the offset, in bytes, from the <b>BitmapFileHeader</b> structure to the bitmap bits.
            </summary>
        </member>
        <member name="T:OpenNETCF.Win32.BitmapInfoHeader">
            <summary>
            Contains information about the dimensions and color format of a device-independent bitmap (DIB).
            </summary>
            <remarks>Wrapper for Win32 <b>BITMAPINFOHEADER</b> structure</remarks>
        </member>
        <member name="P:OpenNETCF.Win32.BitmapInfoHeader.Size">
            <summary>
            Specifies the number of bytes required by the structure.
            </summary>
        </member>
        <member name="P:OpenNETCF.Win32.BitmapInfoHeader.Width">
            <summary>
            Specifies the width of the bitmap, in pixels.
            </summary>
        </member>
        <member name="P:OpenNETCF.Win32.BitmapInfoHeader.Height">
            <summary>
            Specifies the height of the bitmap, in pixels.
            If biHeight is positive, the bitmap is a bottom-up DIB and its origin is the lower-left corner.
            If biHeight is negative, the bitmap is a top-down DIB and its origin is the upper-left corner.
            If biHeight is negative, indicating a top-down DIB, biCompression must be either BI_RGB or BI_BITFIELDS.
            Top-down DIBs cannot be compressed.
            </summary>
        </member>
        <member name="P:OpenNETCF.Win32.BitmapInfoHeader.Planes">
            <summary>
            Specifies the number of planes for the target device.
            This value must be set to 1.
            </summary>
        </member>
        <member name="P:OpenNETCF.Win32.BitmapInfoHeader.BitCount">
            <summary>
            Specifies the number of bits per pixel.
            The biBitCount member determines the number of bits that define each pixel and the maximum number of colors in the bitmap.
            </summary>
        </member>
        <member name="P:OpenNETCF.Win32.BitmapInfoHeader.Compression">
            <summary>
            Specifies the type of compression for a compressed bottom-up bitmap (top-down DIBs cannot be compressed).
            </summary>
        </member>
        <member name="P:OpenNETCF.Win32.BitmapInfoHeader.SizeImage">
            <summary>
            Specifies the size, in bytes, of the image. This may be set to zero for BI_RGB bitmaps.
            </summary>
        </member>
        <member name="P:OpenNETCF.Win32.BitmapInfoHeader.XPelsPerMeter">
            <summary>
            Specifies the horizontal resolution, in pixels per meter, of the target device for the bitmap.
            An application can use this value to select a bitmap from a resource group that best matches the characteristics of the current device.
            </summary>
        </member>
        <member name="P:OpenNETCF.Win32.BitmapInfoHeader.YPelsPerMeter">
            <summary>
            Specifies the vertical resolution, in pixels per meter, of the target device for the bitmap
            </summary>
        </member>
        <member name="P:OpenNETCF.Win32.BitmapInfoHeader.ClrUsed">
            <summary>
            Specifies the number of color indexes in the color table that are actually used by the bitmap.
            If this value is zero, the bitmap uses the maximum number of colors corresponding to the value of the biBitCount member for the compression mode specified by biCompression.
            </summary>
        </member>
        <member name="P:OpenNETCF.Win32.BitmapInfoHeader.ClrImportant">
            <summary>
            Specifies the number of color indexes required for displaying the bitmap.
            If this value is zero, all colors are required.
            </summary>
        </member>
        <member name="T:OpenNETCF.Win32.Core">
            <summary>
            OpenNETCF Win32 API Wrapper Class for CoreDLL.dll
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.INVALID_HANDLE_VALUE">
            <summary>
            The returned handle is not valid.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.WM_LBUTTONDOWN">
            <summary>   
            This message is posted when the user presses the touch-screen in the client area of a window.   
            </summary>      
        </member>
        <member name="F:OpenNETCF.Win32.Core.WM_USER">
            <summary>   
            This message is used by applications to help define private messages.   
            </summary> 
        </member>
        <member name="F:OpenNETCF.Win32.Core.MK_LBUTTON">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.MK_RBUTTON">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.MK_SHIFT">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.MK_CONTROL">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.BatteryPercentageUnknown">
            <summary>
            The remaining battery power is unknown.
            </summary>
        </member>
        <member name="M:OpenNETCF.Win32.Core.SetVolume(System.Int32)">
            <summary>
            Set the volume for the default waveOut device (device ID = 0)
            </summary>
            <param name="Volume"></param>
        </member>
        <member name="M:OpenNETCF.Win32.Core.SetVolume(System.IntPtr,System.Int32)">
            <summary>
            Set the volume for an already-open waveOut device
            </summary>
            <param name="hWaveOut"></param>
            <param name="Volume"></param>
        </member>
        <member name="M:OpenNETCF.Win32.Core.GetVolume">
            <summary>
            Get the current volume setting for the default waveOut device (device ID = 0)
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenNETCF.Win32.Core.GetVolume(System.IntPtr)">
            <summary>
            Set the current volume setting for an already-open waveOut device
            </summary>
            <param name="hWaveOut"></param>
            <returns></returns>
        </member>
        <member name="M:OpenNETCF.Win32.Core.LocalAlloc(OpenNETCF.Win32.Core.MemoryAllocFlags,System.Int32)">
            <summary>
            Obsolete. Allocate unmanaged memory.  Memory allocated must be released with LocalFree
            </summary>
            <param name="uFlags"></param>
            <param name="uBytes"></param>
            <returns></returns>
            <seealso cref="M:OpenNETCF.Runtime.InteropServices.MarshalEx.AllocHGlobal(System.Int32)"/>
        </member>
        <member name="M:OpenNETCF.Win32.Core.LocalReAlloc(System.IntPtr,System.Int32)">
            <summary>
            Obsolete. This function changes the size or the attributes of a specified local memory object. The size can increase or decrease.
            </summary>
            <param name="hMemory"></param>
            <param name="uBytes"></param>
            <returns></returns>
            <remarks>Use <see cref="M:OpenNETCF.Runtime.InteropServices.MarshalEx.ReAllocHGlobal(System.IntPtr,System.IntPtr)"/> instead.</remarks>
        </member>
        <member name="M:OpenNETCF.Win32.Core.LocalFree(System.IntPtr)">
            <summary>
            Obsolete. Frees memory allocated with LocalAlloc
            </summary>
            <param name="hMem"></param>
            <remarks>Instead of using this function use <see cref="M:OpenNETCF.Runtime.InteropServices.MarshalEx.FreeHGlobal(System.IntPtr)"/> which follows the model of the full .NET framework.</remarks>
            <seealso cref="M:OpenNETCF.Runtime.InteropServices.MarshalEx.FreeHGlobal(System.IntPtr)"/>
        </member>
        <member name="M:OpenNETCF.Win32.Core.GlobalMemoryStatus">
            <summary>
            Retrieves the memory status of the device
            </summary>
        </member>
        <member name="M:OpenNETCF.Win32.Core.FindWindow(System.String,System.String)">
            <summary>
            Find a Window
            </summary>
            <param name="lpClassName">Can be empty</param>
            <param name="lpWindowName">Caption or text of Window to find</param>
            <returns>Handle to specified window.</returns>
        </member>
        <member name="M:OpenNETCF.Win32.Core.SetTextColor(System.IntPtr,System.Int32)">
            <summary>
            Set the forecolor of text in the selected DC
            </summary>
            <param name="hdc"></param>
            <param name="crColor"></param>
            <returns></returns>
        </member>
        <member name="M:OpenNETCF.Win32.Core.GetTextColor(System.IntPtr)">
            <summary>
            Get the forecolor of text in the selected DC
            </summary>
            <param name="hdc"></param>
            <returns></returns>
        </member>
        <member name="M:OpenNETCF.Win32.Core.SetBkColor(System.IntPtr,System.Int32)">
            <summary>
            Set the backcolor in the selected DC
            </summary>
            <param name="hdc"></param>
            <param name="crColor"></param>
            <returns></returns>
        </member>
        <member name="M:OpenNETCF.Win32.Core.SetBkMode(System.IntPtr,OpenNETCF.Win32.Core.BackMode)">
            <summary>
            Set the backmode in the selected DC
            </summary>
            <param name="hdc"></param>
            <param name="iBkMode"></param>
            <returns></returns>
        </member>
        <member name="M:OpenNETCF.Win32.Core.SelectObject(System.IntPtr,System.IntPtr)">
            <summary>
            Select a system object (FONT, DC, etc.)
            </summary>
            <param name="hdc"></param>
            <param name="hgdiobj"></param>
            <returns></returns>
        </member>
        <member name="M:OpenNETCF.Win32.Core.ReleaseDC(System.IntPtr,System.IntPtr)">
            <summary>
            Release a Device Context
            </summary>
            <param name="hWnd"></param>
            <param name="hDC"></param>
        </member>
        <member name="M:OpenNETCF.Win32.Core.GetWindowDC(System.IntPtr)">
            <summary>
            Get the DC for the specified window
            </summary>
            <param name="hWnd">Native window handle of the window.</param>
            <returns>Device Context Handle for specified window.</returns>
        </member>
        <member name="M:OpenNETCF.Win32.Core.GetDC(System.IntPtr)">
            <summary>
            Get the DC for the specified window handle
            </summary>
            <param name="hWnd"></param>
            <returns></returns>
        </member>
        <member name="M:OpenNETCF.Win32.Core.Rectangle(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draw a rectangle in a DC
            </summary>
            <param name="hdc"></param>
            <param name="nLeftRect"></param>
            <param name="nTopRect"></param>
            <param name="nRightRect"></param>
            <param name="nBottomRect"></param>
        </member>
        <member name="M:OpenNETCF.Win32.Core.CreateEvent(System.Boolean,System.Boolean,System.String)">
            <summary>
            Create a system event (*not* a managed event)
            </summary>
            <param name="bManualReset"></param>
            <param name="bInitialState"></param>
            <param name="lpName"></param>
            <returns></returns>
        </member>
        <member name="M:OpenNETCF.Win32.Core.SetEvent(System.IntPtr)">
            <summary>
            This function sets the state of the specified event object to signaled
            </summary>
            <param name="hEvent"></param>
            <returns></returns>
        </member>
        <member name="M:OpenNETCF.Win32.Core.ResetEvent(System.IntPtr)">
            <summary>
            This function sets the state of the specified event object to nonsignaled
            </summary>
            <param name="hEvent"></param>
            <returns></returns>
        </member>
        <member name="M:OpenNETCF.Win32.Core.PulseEvent(System.IntPtr)">
            <summary>
            This function provides a single operation that sets (to signaled) the state of the specified event object and then resets it (to nonsignaled) after releasing the appropriate number of waiting threads
            </summary>
            <param name="hEvent"></param>
            <returns></returns>
        </member>
        <member name="M:OpenNETCF.Win32.Core.WaitForSingleObject(System.IntPtr,System.UInt32)">
            <summary>
            This function returns when the specified object is in the signaled state or when the time-out interval elapses
            </summary>
            <param name="hHandle"></param>
            <param name="dwMilliseconds"></param>
            <returns></returns>
        </member>
        <member name="M:OpenNETCF.Win32.Core.WaitForMultipleObjects(System.IntPtr[],System.Boolean,System.Int32)">
            <summary>
            This function returns when one of the following occurs:
            <list type=""><item>Either any one of the specified objects are in the signaled state.</item><item>The time-out interval elapses.</item></list>
            <i>New in SDF version 1.1</i>
            </summary>
            <param name="Handles">An array of handles to wait on</param>
            <param name="WaitForAll">Wait for all handles before returning</param>
            <param name="Timeout">Timeout period in milliseconds</param>
            <returns>WAIT_FAILED indicates failure.</returns>
        </member>
        <member name="M:OpenNETCF.Win32.Core.CreateMutex(System.IntPtr,System.Boolean,System.String)">
            <summary>
            This function creates a named or unnamed mutex object
            </summary>
            <param name="lpMutexAttributes">Ignored. Must be null</param>
            <param name="bInitialOwner">Boolean that specifies the initial owner 
            of the mutex object. If this value is true and the caller created 
            the mutex, the calling thread obtains ownership of the mutex object. 
            Otherwise, the calling thread does not obtain ownership of the mutex.</param>
            <param name="lpName">String specifying the name of the mutex object.</param>
            <returns>A handle to the mutex object indicates success. If the 
            named mutex object existed before the function call, the function 
            returns a handle to the existing object. A return value of null 
            indicates failure. </returns>
        </member>
        <member name="M:OpenNETCF.Win32.Core.ReleaseMutex(System.IntPtr)">
            <summary>
            This function releases ownership of the specified mutex object
            </summary>
            <param name="hMutex"></param>
            <returns></returns>
        </member>
        <member name="M:OpenNETCF.Win32.Core.QueryPerformanceFrequency">
            <summary>
            This function retrieves the frequency of the high-resolution performance counter if one is provided by the OEM.
            </summary>
            <returns>The current performance-counter frequency. If the installed hardware does not support a high-resolution performance counter, this parameter can be to zero.</returns>
        </member>
        <member name="M:OpenNETCF.Win32.Core.QueryPerformanceCounter">
            <summary>
            This function retrieves the current value of the high-resolution performance counter if one is provided by the OEM
            </summary>
            <returns>The current performance-counter value. If the installed hardware does not support a high-resolution performance counter, this parameter can be set to zero.</returns>
        </member>
        <member name="M:OpenNETCF.Win32.Core.GetSystemInfo">
            <summary>
            This function returns information about the current system
            </summary>
        </member>
        <member name="M:OpenNETCF.Win32.Core.GetSystemPowerStatusEx(System.Boolean)">
            <summary>
            This function retrieves the power status of the system.
            </summary>
            <returns>A SystemPowerStatus structure containing power state information.</returns>
            <remarks>The status indicates whether the system is running on AC or DC power, whether or not the batteries are currently charging, and the remaining life of main and backup batteries.</remarks>
            <param name="update">If True retrieves latest state, otherwise retrieves cached information which may be out of date.</param>
        </member>
        <member name="M:OpenNETCF.Win32.Core.GetDeviceID">
            <summary>
            Returns a string containing a unique identifier for the device.
            </summary>
            <returns>Devices unique ID.</returns>
        </member>
        <member name="M:OpenNETCF.Win32.Core.ShellExecute(System.String,System.String)">
            <summary>
            This function performs an action on a file. The file can be an executable file or a document
            </summary>
            <param name="FileName">Filename of executable or document to run.</param>
            <param name="Parameters">Optional command line parameters.</param>
            <returns>Handle to created process</returns>
        </member>
        <member name="M:OpenNETCF.Win32.Core.CreateProcess(System.String,System.String)">
            <summary>
            This function is used to run a new program. It creates a new process and its primary thread. The new process executes the specified executable file
            </summary>
            <param name="FileName">Filename of executable to run.</param>
            <param name="CommandLine">Optional command line attributes.</param>
            <returns>Handle to created process</returns>
        </member>
        <member name="M:OpenNETCF.Win32.Core.TerminateProcess(System.IntPtr,System.Int32)">
            <summary>
            This function terminates the specified process and all of its threads
            </summary>
            <param name="hProcess">Handle of Process to be terminated.</param>
            <param name="ExitCode">Exit code to pass to process.</param>
        </member>
        <member name="M:OpenNETCF.Win32.Core.GetProcAddress(System.IntPtr,System.String)">
            <summary>
            Wrapper around GetProcAddress Win32 function
            </summary>
            <param name="hModule">Module handle (returned by GetModuleHandle or LoadLibrary</param>
            <param name="proc">Function name</param>
            <returns>The address of the DLL's exported function indicates success.
            Null indicates failure.</returns>
        </member>
        <member name="M:OpenNETCF.Win32.Core.GetModuleHandle(System.String)">
            <summary>
            Wrapper around GetModuleHandle Win32 function
            </summary>
            <param name="module">Module name</param>
            <returns>Module handle or IntPtr.Zero, if not in memory </returns>
        </member>
        <member name="M:OpenNETCF.Win32.Core.LoadLibrary(System.String)">
            <summary>
            Wrapper around LoadLibrary Win32 function
            </summary>
            <param name="library">Library module name</param>
            <returns>hModule or error code</returns>
        </member>
        <member name="M:OpenNETCF.Win32.Core.IsBadCodePtr(System.IntPtr)">
            <summary>
            This function determines whether the calling process has read access to the memory at the specified address.
            </summary>
            <param name="pfnCode">Pointer to an address in memory.</param>
            <returns>Zero indicates that the calling process has read access to the specified memory.
            Nonzero indicates that the calling process does not have read access to the specified memory.</returns>
        </member>
        <member name="M:OpenNETCF.Win32.Core.StringToPointer(System.String)">
            <summary>
            Obsolete - Allocates native memory and marshals the string.
            </summary>
            <param name="val">String value.</param>
            <returns>Pointer to native memory - must be freed with <see cref="M:OpenNETCF.Win32.Core.LocalFree(System.IntPtr)"/>.</returns>
        </member>
        <member name="M:OpenNETCF.Win32.Core.SendKeyboardString(System.String)">
            <summary>
            Send a string to the keyboard
            </summary>
            <param name="Keys"></param>
        </member>
        <member name="M:OpenNETCF.Win32.Core.SendKeyboardString(System.String,OpenNETCF.Win32.Core.KeyStateFlags)">
            <summary>
            Send a string to the keyboard
            </summary>
            <param name="Keys"></param>
            <param name="Flags"></param>
        </member>
        <member name="M:OpenNETCF.Win32.Core.SendKeyboardString(System.String,OpenNETCF.Win32.Core.KeyStateFlags,System.IntPtr)">
            <summary>
            Send a string to the keyboard
            </summary>
            <param name="Keys"></param>
            <param name="Flags"></param>
            <param name="hWnd"></param>
        </member>
        <member name="M:OpenNETCF.Win32.Core.SendKeyboardKey(System.Byte)">
            <summary>
            Send a key to the keyboard
            </summary>
            <param name="VirtualKey"></param>
        </member>
        <member name="M:OpenNETCF.Win32.Core.SendKeyboardKey(System.Byte,System.Boolean)">
            <summary>
            Send a key to the keyboard
            </summary>
            <param name="VirtualKey"></param>
            <param name="Silent"></param>
        </member>
        <member name="M:OpenNETCF.Win32.Core.GetObject(System.IntPtr,System.Int32,System.Byte[])">
            <summary>
            This function obtains information about a specified graphics object.
            </summary>
            <param name="hObj">Handle to the graphics object of interest.</param>
            <param name="cb">Specifies the number of bytes of information to be written to the buffer.</param>
            <param name="objdata">a buffer that is to receive the information about the specified graphics object.</param>
            <returns>If the function succeeds, and lpvObject is a valid pointer, the return value is the number of bytes stored into the buffer.</returns>
        </member>
        <member name="M:OpenNETCF.Win32.Core.GetObject(System.IntPtr,System.Int32,OpenNETCF.Win32.DibSection)">
            <summary>
            This function obtains information about a specified graphics object.
            </summary>
            <param name="hObj">Handle to the graphics object of interest.</param>
            <param name="cb">Specifies the number of bytes of information to be written to the buffer.</param>
            <param name="objdata">a buffer that is to receive the information about the specified graphics object.</param>
            <returns>If the function succeeds, and lpvObject is a valid pointer, the return value is the number of bytes stored into the buffer.</returns>
        </member>
        <member name="M:OpenNETCF.Win32.Core.CreateSolidBrush(System.Int32)">
            <summary>
            This function creates a logical brush that has the specified solid color.
            </summary>
            <param name="crColor">Specifies the color of the brush.</param>
            <returns>A handle that identifies a logical brush indicates success.</returns>
        </member>
        <member name="T:OpenNETCF.Win32.Core.Wait">
            <summary>
            Responses from <see cref="M:OpenNETCF.Win32.Core.WaitForSingleObject(System.IntPtr,System.UInt32)"/> function.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.Wait.Object">
            <summary>
            The state of the specified object is signaled.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.Wait.Abandoned">
            <summary>
            Wait abandoned.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.Wait.Failed">
            <summary>
            Wait failed.
            </summary>
        </member>
        <member name="T:OpenNETCF.Win32.Core.FormatMessageFlags">
            <summary>
            Specifies aspects of the formatting process and how to interpret the lpSource parameter.
            </summary>
            <remarks>The low-order byte of dwFlags specifies how the function handles line breaks in the output buffer.
            The low-order byte can also specify the maximum width of a formatted output line.</remarks>
        </member>
        <member name="F:OpenNETCF.Win32.Core.FormatMessageFlags.AllocateBuffer">
            <summary>
            The function allocates a buffer large enough to hold the formatted message, and places a pointer to the allocated buffer at the address specified by lpBuffer.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.FormatMessageFlags.IgnoreInserts">
            <summary>
            Insert sequences in the message definition are to be ignored and passed through to the output buffer unchanged.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.FormatMessageFlags.FromString">
            <summary>
            Specifies that lpSource is a pointer to a null-terminated message definition.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.FormatMessageFlags.FromHModule">
            <summary>
            Specifies that lpSource is a module handle containing the message-table resource(s) to search.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.FormatMessageFlags.FromSystem">
            <summary>
            Specifies that the function should search the system message-table resource(s) for the requested message.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.FormatMessageFlags.ArgumentArray">
            <summary>
            Specifies that the Arguments parameter is not a va_list structure, but instead is just a pointer to an array of 32-bit values that represent the arguments.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.FormatMessageFlags.MaxWidthMask">
            <summary>
            Use the <b>MaxWidthMask</b> constant and bitwise Boolean operations to set and retrieve this maximum width value.
            </summary>
        </member>
        <member name="T:OpenNETCF.Win32.Core.GDIRegion">
            <summary>
            Region type
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.GDIRegion.NULLREGION">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.GDIRegion.SIMPLEREGION">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.GDIRegion.COMPLEXREGION">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenNETCF.Win32.Core.BackMode">
            <summary>
            Background mode
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.BackMode.TRANSPARENT">
            <summary>
            Background is Transparent.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.BackMode.OPAQUE">
            <summary>
            Background is Opaque.
            </summary>
        </member>
        <member name="T:OpenNETCF.Win32.Core.MemoryAllocFlags">
            <summary>
            LocalAlloc flags
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.MemoryAllocFlags.Fixed">
            <summary>   
            Allocates fixed memory.   
            The return value is a pointer to the memory object.   
            </summary>   
        </member>
        <member name="F:OpenNETCF.Win32.Core.MemoryAllocFlags.ZeroInit">
            <summary>   
            Initializes memory contents to zero.   
            </summary>      
        </member>
        <member name="F:OpenNETCF.Win32.Core.MemoryAllocFlags.LPtr">
            <summary>   
            Combines the Fixed and ZeroInit flags.   
            </summary>     
        </member>
        <member name="T:OpenNETCF.Win32.Core.KeyStateFlags">
            <summary>
            KeyStateFlags for Keyboard methods
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.KeyStateFlags.Toggled">
            <summary>
            Key is toggled.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.KeyStateFlags.AsyncDown">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.KeyStateFlags.PrevDown">
            <summary>
            Key was previously down.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.KeyStateFlags.Down">
            <summary>
            Key is currently down.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.KeyStateFlags.AnyCtrl">
            <summary>
            Left or right CTRL key is down.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.KeyStateFlags.AnyShift">
            <summary>
            Left or right SHIFT key is down.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.KeyStateFlags.AnyAlt">
            <summary>
            Left or right ALT key is down.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.KeyStateFlags.Capital">
            <summary>
            VK_CAPITAL is toggled.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.KeyStateFlags.LeftCtrl">
            <summary>
            Left CTRL key is down.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.KeyStateFlags.LeftShift">
            <summary>
            Left SHIFT key is down.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.KeyStateFlags.LeftAlt">
            <summary>
            Left ALT key is down.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.KeyStateFlags.LeftWin">
            <summary>
            Left Windows logo key is down.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.KeyStateFlags.RightCtrl">
            <summary>
            Right CTRL key is down.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.KeyStateFlags.RightShift">
            <summary>
            Right SHIFT key is down
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.KeyStateFlags.RightAlt">
            <summary>
            Right ALT key is down
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.KeyStateFlags.RightWin">
            <summary>
            Right Windows logo key is down.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.KeyStateFlags.Dead">
            <summary>
            Corresponding character is dead character.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.KeyStateFlags.NoCharacter">
            <summary>
            No characters in pCharacterBuffer to translate.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.KeyStateFlags.Language1">
            <summary>
            Use for language specific shifts.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.KeyStateFlags.NumLock">
            <summary>
            NumLock toggled state.
            </summary>
        </member>
        <member name="T:OpenNETCF.Win32.Core.WaveInCaps">
            <summary>
            Class for getting audio device capabilities
            </summary>
        </member>
        <member name="T:OpenNETCF.Win32.Core.ProcessorArchitecture">
            <summary>
            Processor Architecture values (GetSystemInfo)
            </summary>
            <seealso cref="M:OpenNETCF.WinAPI.Core.GetSystemInfo(OpenNETCF.WinAPI.Core.SYSTEM_INFO)"/>
        </member>
        <member name="F:OpenNETCF.Win32.Core.ProcessorArchitecture.Intel">
            <summary>
            Processor is Intel x86 based.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.ProcessorArchitecture.MIPS">
            <summary>
            Processor is MIPS based.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.ProcessorArchitecture.Alpha">
            <summary>
            Processor is Alpha based.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.ProcessorArchitecture.PPC">
            <summary>
            Processor is Power PC based.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.ProcessorArchitecture.SHX">
            <summary>
            Processor is SH3, SH4 etc.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.ProcessorArchitecture.ARM">
            <summary>
            Processor is ARM based.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.ProcessorArchitecture.IA64">
            <summary>
            Processor is Intel 64bit.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.ProcessorArchitecture.Alpha64">
            <summary>
            Processor is Alpha 64bit.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.ProcessorArchitecture.Unknown">
            <summary>
            Unknown processor architecture.
            </summary>
        </member>
        <member name="T:OpenNETCF.Win32.Core.ProcessorType">
            <summary>
            Processor type values (GetSystemInfo)
            </summary>
            <seealso cref="M:OpenNETCF.Win32.Core.GetSystemInfo(OpenNETCF.Win32.Core.SYSTEM_INFO)"/>
        </member>
        <member name="F:OpenNETCF.Win32.Core.ProcessorType.Intel_386">
            <summary>
            Processor is Intel 80386.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.ProcessorType.Intel_486">
            <summary>
            Processor is Intel 80486.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.ProcessorType.Intel_Pentium">
            <summary>
            Processor is Intel Pentium (80586).
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.ProcessorType.Intel_PentiumII">
            <summary>
            Processor is Intel Pentium II (80686).
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.ProcessorType.Intel_IA64">
            <summary>
            Processor is Intel 64bit (IA64).
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.ProcessorType.MIPS_R4000">
            <summary>
            Processor is MIPS R4000.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.ProcessorType.Alpha_21064">
            <summary>
            Processor is Alpha 21064.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.ProcessorType.PPC_403">
            <summary>
            Processor is Power PC 403.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.ProcessorType.PPC_601">
            <summary>
            Processor is Power PC 601.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.ProcessorType.PPC_603">
            <summary>
            Processor is Power PC 603.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.ProcessorType.PPC_604">
            <summary>
            Processor is Power PC 604.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.ProcessorType.PPC_620">
            <summary>
            Processor is Power PC 620.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.ProcessorType.Hitachi_SH3">
            <summary>
            Processor is Hitachi SH3.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.ProcessorType.Hitachi_SH3E">
            <summary>
            Processor is Hitachi SH3E.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.ProcessorType.Hitachi_SH4">
            <summary>
            Processor is Hitachi SH4.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.ProcessorType.Motorola_821">
            <summary>
            Processor is Motorola 821.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.ProcessorType.SHx_SH3">
            <summary>
            Processor is SH3.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.ProcessorType.SHx_SH4">
            <summary>
            Processor is SH4.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.ProcessorType.StrongARM">
            <summary>
            Processor is StrongARM.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.ProcessorType.ARM720">
            <summary>
            Processor is ARM 720.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.ProcessorType.ARM820">
            <summary>
            Processor is ARM 820.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.ProcessorType.ARM920">
            <summary>
            Processor is ARM 920.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.ProcessorType.ARM_7TDMI">
            <summary>
            Processor is ARM 7 TDMI.
            </summary>
        </member>
        <member name="T:OpenNETCF.Win32.Core.SystemInfo">
            <summary>
            This structure contains information about the current computer system. This includes the processor type, page size, memory addresses, and OEM identifier.
            </summary>
            <seealso cref="M:OpenNETCF.Win32.Core.GetSystemInfo"/>
        </member>
        <member name="F:OpenNETCF.Win32.Core.SystemInfo.wProcessorArchitecture">
            <summary>
            The system's processor architecture.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.SystemInfo.PageSize">
            <summary>
            The page size and the granularity of page protection and commitment.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.SystemInfo.MinimumApplicationAddress">
            <summary>
            Pointer to the lowest memory address accessible to applications and dynamic-link libraries (DLLs). 
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.SystemInfo.MaximumApplicationAddress">
            <summary>
            Pointer to the highest memory address accessible to applications and DLLs.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.SystemInfo.ActiveProcessorMask">
            <summary>
            Specifies a mask representing the set of processors configured into the system. Bit 0 is processor 0; bit 31 is processor 31. 
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.SystemInfo.NumberOfProcessors">
            <summary>
            Specifies the number of processors in the system.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.SystemInfo.ProcessorType">
            <summary>
            Specifies the type of processor in the system.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.SystemInfo.AllocationGranularity">
            <summary>
            Specifies the granularity with which virtual memory is allocated.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.SystemInfo.ProcessorLevel">
            <summary>
            Specifies the system’s architecture-dependent processor level.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.SystemInfo.ProcessorRevision">
            <summary>
            Specifies an architecture-dependent processor revision.
            </summary>
        </member>
        <member name="T:OpenNETCF.Win32.Core.SystemParametersInfoAction">
            <summary>
            Specifies the system-wide parameter to query or set.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.SystemParametersInfoAction.GetMouse">
            <summary>
            Retrieves the two mouse threshold values and the mouse speed.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.SystemParametersInfoAction.SetMouse">
            <summary>
            Sets the two mouse threshold values and the mouse speed.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.SystemParametersInfoAction.SetDeskWallpaper">
            <summary>
            For Windows CE 2.12 and later, sets the desktop wallpaper.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.SystemParametersInfoAction.SetDeskPattern">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.SystemParametersInfoAction.SetWorkArea">
            <summary>
            Sets the size of the work area — the portion of the screen not obscured by the system taskbar or by toolbars displayed on the desktop by applications.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.SystemParametersInfoAction.GetWorkArea">
            <summary>
            Retrieves the size of the work area on the primary screen.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.SystemParametersInfoAction.GetShowSounds">
            <summary>
            Retrieves whether the show sounds option is on or off.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.SystemParametersInfoAction.SetShowSounds">
            <summary>
            Turns the show sounds accessibility option on or off.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.SystemParametersInfoAction.GetWheelScrollLines">
            <summary>
            Gets the number of lines to scroll when the mouse wheel is rotated.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.SystemParametersInfoAction.SetWheelScrollLines">
            <summary>
            Sets the number of lines to scroll when the mouse wheel is rotated.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.SystemParametersInfoAction.GetFontSmoothingContrast">
            <summary>
            Retrieves a contrast value that is used in smoothing text displayed using Microsoft® ClearType®.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.SystemParametersInfoAction.SetFontSmoothingContrast">
            <summary>
            Sets the contrast value used when displaying text in a ClearType font.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.SystemParametersInfoAction.GetScreenSaveTimeout">
            <summary>
            Retrieves the screen saver time-out value, in seconds.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.SystemParametersInfoAction.SetScreenSaveTimeout">
            <summary>
            Sets the screen saver time-out value to the value of the uiParam parameter.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.SystemParametersInfoAction.SetBatteryIdleTimeout">
            <summary>
            Sets the amount of time that Windows CE will stay on with battery power before it suspends due to user inaction.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.SystemParametersInfoAction.GetBatteryIdleTimeout">
            <summary>
            Retrieves the amount of time that Windows CE will stay on with battery power before it suspends due to user inaction.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.SystemParametersInfoAction.SetExternalIdleTimeout">
            <summary>
            Sets the amount of time that Windows CE will stay on with AC power before it suspends due to user inaction.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.SystemParametersInfoAction.GetExternalIdleTimeout">
            <summary>
            Retrieves the amount of time that Windows CE will stay on with AC power before it suspends due to user inaction.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.SystemParametersInfoAction.SetWakeupIdleTimeout">
            <summary>
            Sets the amount of time that Windows CE will stay on after a user notification that reactivates the suspended device.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.SystemParametersInfoAction.GetWakeupIdleTimeout">
            <summary>
            Retrieves the amount of time that Windows CE will stay on after a user notification that reactivates a suspended device.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.SystemParametersInfoAction.GetPlatformType">
            <summary>
            Get the platform name e.g. PocketPC, Smartphone etc.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.SystemParametersInfoAction.GetOemInfo">
            <summary>
            Get OEM specific information.
            </summary>
        </member>
        <member name="T:OpenNETCF.Win32.Core.SystemParametersInfoFlags">
            <summary>
            Specifies whether the user profile is to be updated, and if so, whether the WM_SETTINGCHANGE message is to be broadcast to all top-level windows to notify them of the change.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.SystemParametersInfoFlags.None">
            <summary>
            No notifications are sent on settings changed.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.SystemParametersInfoFlags.UpdateIniFile">
            <summary>
            Writes the new system-wide parameter setting to the user profile.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.SystemParametersInfoFlags.SendChange">
            <summary>
            Broadcasts the WM_SETTINGCHANGE message after updating the user profile.
            </summary>
        </member>
        <member name="T:OpenNETCF.Win32.Core.ACLineStatus">
            <summary>
            AC power status.
            </summary>
            <remarks>Used by <see cref="T:OpenNETCF.Win32.Core.SystemPowerStatus"/> Structure.</remarks>
        </member>
        <member name="F:OpenNETCF.Win32.Core.ACLineStatus.Offline">
            <summary>
            AC power is offline.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.ACLineStatus.Online">
            <summary>
            AC power is online.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.ACLineStatus.BackupPower">
            <summary>
            Unit is on backup power.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.ACLineStatus.Unknown">
            <summary>
            AC line status is unknown.
            </summary>
        </member>
        <member name="T:OpenNETCF.Win32.Core.BatteryFlag">
            <summary>
            Battery charge status.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.BatteryFlag.High">
            <summary>
            Battery is high.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.BatteryFlag.Low">
            <summary>
            Battery is low.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.BatteryFlag.Critical">
            <summary>
            Battery is critically low.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.BatteryFlag.Charging">
            <summary>
            Battery is currently charging.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.BatteryFlag.NoBattery">
            <summary>
            No battery is attached.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.BatteryFlag.Unknown">
            <summary>
            Battery charge status is unknown.
            </summary>
        </member>
        <member name="T:OpenNETCF.Win32.Core.SystemPowerStatus">
            <summary>
            This structure contains information about the power status of the system.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.SystemPowerStatus.ACLineStatus">
            <summary>
            AC power status.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.SystemPowerStatus.BatteryFlag">
            <summary>
            Battery charge status.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.SystemPowerStatus.BatteryLifePercent">
            <summary>
            Percentage of full battery charge remaining.
            This member can be a value in the range 0 to 100, or 255 if status is unknown.
            All other values are reserved.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.SystemPowerStatus.BatteryLifeTime">
            <summary>
            Number of seconds of battery life remaining, or 0xFFFFFFFF if remaining seconds are unknown.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.SystemPowerStatus.dwBatteryFullLifeTime">
            <summary>
            Number of seconds of battery life when at full charge, or 0xFFFFFFFF if full lifetime is unknown.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.SystemPowerStatus.BackupBatteryFlag">
            <summary>
            Battery charge status.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.SystemPowerStatus.BackupBatteryLifePercent">
            <summary>
            Percentage of full backup battery charge remaining. Must be in the range 0 to 100.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.SystemPowerStatus.dwBackupBatteryLifeTime">
            <summary>
            Number of seconds of backup battery life remaining.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.SystemPowerStatus.dwBackupBatteryFullLifeTime">
            <summary>
            Number of seconds of backup battery life when at full charge.
            </summary>
        </member>
        <member name="P:OpenNETCF.Win32.Core.SystemPowerStatus.BatteryFullLifeTime">
            <summary>
            Number of seconds of battery life when at full charge, or 0 if full lifetime is unknown.
            </summary>
        </member>
        <member name="P:OpenNETCF.Win32.Core.SystemPowerStatus.BackupBatteryLifeTime">
            <summary>
            Number of seconds of backup battery life remaining.
            </summary>
        </member>
        <member name="P:OpenNETCF.Win32.Core.SystemPowerStatus.BackupBatteryFullLifeTime">
            <summary>
            Number of seconds of backup battery life when at full charge.
            </summary>
        </member>
        <member name="T:OpenNETCF.Win32.Core.MemoryStatus">
            <summary>
            This structure contains information about current memory availability. The GlobalMemoryStatus function uses this structure.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.MemoryStatus.MemoryLoad">
            <summary>
            Specifies a number between 0 and 100 that gives a general idea of current memory utilization, in which 0 indicates no memory use and 100 indicates full memory use.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.MemoryStatus.TotalPhysical">
            <summary>
            Indicates the total number of bytes of physical memory.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.MemoryStatus.AvailablePhysical">
            <summary>
            Indicates the number of bytes of physical memory available.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.MemoryStatus.TotalPageFile">
            <summary>
            Indicates the total number of bytes that can be stored in the paging file. Note that this number does not represent the actual physical size of the paging file on disk.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.MemoryStatus.AvailablePageFile">
            <summary>
            Indicates the number of bytes available in the paging file.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.MemoryStatus.TotalVirtual">
            <summary>
            Indicates the total number of bytes that can be described in the user mode portion of the virtual address space of the calling process.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Core.MemoryStatus.AvailableVirtual">
            <summary>
            Indicates the number of bytes of unreserved and uncommitted memory in the user mode portion of the virtual address space of the calling process.
            </summary>
        </member>
        <member name="T:OpenNETCF.Win32.DateTimeEx">
            <summary>
            Provides additional <see cref="T:System.DateTime"/> functions
            </summary>
        </member>
        <member name="M:OpenNETCF.Win32.DateTimeEx.SetTimeZoneInformation(OpenNETCF.Win32.TimeZoneInformation)">
            <summary>
            This function sets the current time-zone parameters. These parameters control translations from Coordinated Universal Time (UTC) to local time
            </summary>
            <param name="tzi"></param>
        </member>
        <member name="M:OpenNETCF.Win32.DateTimeEx.GetTimeZoneInformation(OpenNETCF.Win32.TimeZoneInformation@)">
            <summary>
            This function gets the time-zone parameters for the active
            time-zone. These parameters control translations from Coordinated 
            Universal Time (UTC) to local time.
            </summary>
            <param name="tzi"></param>
        </member>
        <member name="M:OpenNETCF.Win32.DateTimeEx.SetLocalTime(System.DateTime)">
            <summary>
            This function sets the current local time and date
            </summary>
            <param name="dt">DateTime representing required Local Time</param>
        </member>
        <member name="M:OpenNETCF.Win32.DateTimeEx.SetSystemTime(System.DateTime)">
            <summary>
            This function sets the current system time and date. The system time is expressed in Coordinated Universal Time (UTC).
            </summary>
            <param name="dt">Required DateTime</param>
        </member>
        <member name="T:OpenNETCF.Win32.TZREG">
            <summary>
            Time-Zone
            </summary>
        </member>
        <member name="T:OpenNETCF.Win32.TimeZoneInformation">
            <summary>
            Time Zone information
            </summary>
            <remarks>Wraps the native <b>TIME_ZONE_INFORMATION</b> structure.</remarks>
        </member>
        <member name="M:OpenNETCF.Win32.TimeZoneInformation.#ctor">
            <summary>
            Create a new instance of the <b>TimeZoneInformation</b> class.
            </summary>
        </member>
        <member name="M:OpenNETCF.Win32.TimeZoneInformation.#ctor(System.Byte[])">
            <summary>
            Create a new instance of the TimeZoneInformation class based on data in the supplied Byte Array.
            </summary>
            <param name="bytes">Byte Array containing <b>TIME_ZONE_INFORMATION</b> data.</param>
        </member>
        <member name="M:OpenNETCF.Win32.TimeZoneInformation.ToString">
            <summary>
            Returns a String representing this instance of <b>TimeZoneInformation</b>.
            </summary>
            <returns>A string containing the name of the Time Zone.</returns>
        </member>
        <member name="M:OpenNETCF.Win32.TimeZoneInformation.ToByteArray">
            <summary>
            Returns the raw structure in a <see cref="T:System.Byte[]"/>.
            </summary>
            <returns>Byte array containing the <b>SYSTEMTIME</b> data.</returns>
        </member>
        <member name="P:OpenNETCF.Win32.TimeZoneInformation.DisplayName">
            <summary>
            Name used to describe the Time Zone.
            </summary>
        </member>
        <member name="P:OpenNETCF.Win32.TimeZoneInformation.Bias">
            <summary>
            Specifies the current bias, in minutes, for local time translation on this computer.
            </summary>
            <remarks>The bias is the difference, in minutes, between Coordinated Universal Time (UTC) and local time.
            All translations between UTC and local time are based on the following formula:
            <para>UTC = local time + bias</para></remarks>
        </member>
        <member name="P:OpenNETCF.Win32.TimeZoneInformation.StandardName">
            <summary>
            Name associated with standard time on this device.
            </summary>
            <remarks>For example, this member could contain “EST” to indicate Eastern Standard Time.</remarks>
        </member>
        <member name="P:OpenNETCF.Win32.TimeZoneInformation.StandardDate">
            <summary>
            The date and local time when the transition from Daylight time to Standard time occurs.
            </summary>
            <remarks>This member supports two date formats.
            Absolute format specifies an exact date and time when standard time begins.
            In this form, the wYear, wMonth, wDay, wHour, wMinute, wSecond, and wMilliseconds members of the SYSTEMTIME structure are used to specify an exact date.
            <para>Day-in-month format is specified by setting the wYear member to zero, setting the wDayOfWeek member to an appropriate weekday, and using a wDay value in the range 1 through 5 to select the correct day in the month.
            Using this notation, the first Sunday in April can be specified, as can the last Thursday in October (5 is equal to “the last”).</para></remarks>
        </member>
        <member name="P:OpenNETCF.Win32.TimeZoneInformation.StandardBias">
            <summary>
            Specifies a bias value to be used during local time translations that occur during standard time.
            </summary>
            <remarks>This member is ignored if a value for the StandardDate member is not supplied.
            This value is added to the value of the Bias member to form the bias used during standard time.
            In most time zones, the value of this member is zero.</remarks>
        </member>
        <member name="P:OpenNETCF.Win32.TimeZoneInformation.DaylightName">
            <summary>
            Specifies a string associated with daylight time.
            </summary>
        </member>
        <member name="P:OpenNETCF.Win32.TimeZoneInformation.DaylightDate">
            <summary>
            Specifies a date and local time when the transition from standard time to daylight time occurs. 
            </summary>
        </member>
        <member name="P:OpenNETCF.Win32.TimeZoneInformation.DaylightBias">
            <summary>
            Specifies a bias value to be used during local time translations that occur during daylight time.
            </summary>
        </member>
        <member name="T:OpenNETCF.Win32.TimeZoneState">
            <summary>
            Return values from <see cref="M:OpenNETCF.Win32.DateTimeEx.GetTimeZoneInformation"/>.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.TimeZoneState.Unknown">
            <summary>
            The system cannot determine the current time zone.
            This value is returned if daylight savings time is not used in the current time zone, because there are no transition dates.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.TimeZoneState.Standard">
            <summary>
            The system is operating in the range covered by the StandardDate member of the <see cref="T:OpenNETCF.Win32.TimeZoneInformation"/> structure.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.TimeZoneState.Daylight">
            <summary>
            The system is operating in the range covered by the DaylightDate member of the <see cref="T:OpenNETCF.Win32.TimeZoneInformation"/> structure.
            </summary>
        </member>
        <member name="T:OpenNETCF.Win32.DibSection">
            <summary>
            Wrapper for WIN32 <b>DIBSECTION</b> structure
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.DibSection.bmType">
            <summary>
            Specifies the bitmap type; set to zero.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.DibSection.bmWidth">
            <summary>
            Specifies the width, in pixels, of the bitmap.
            The width must be greater than zero.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.DibSection.bmHeight">
            <summary>
            Specifies the height, in pixels, of the bitmap.
            The height must be greater than zero.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.DibSection.bmWidthBytes">
            <summary>
            Specifies the number of bytes in each scan line.
            This value must be divisible by 2, because the system assumes that the bit values of a bitmap form an array that is word aligned.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.DibSection.bmBits">
            <summary>
            Pointer to the location of the bit values for the bitmap.
            The bmBits member must be a long pointer to an array of character (1-byte) values.
            </summary>
        </member>
        <member name="T:OpenNETCF.Win32.Registry">
            <summary>
            Supplies the base <b>RegistryKeys</b> that access values and subkeys in the registry.
            </summary>
            <remarks>This class provides the set of standard root keys found in the registry on machines running Windows CE.
            The registry is a storage facility for information about applications and default system settings.
            For example, applications can use the registry for storing information that needs to be preserved once the application is closed, and access that same information when the application is reloaded.
            For instance, you can store color preferences, screen locations, or the size of the window.
            The keys exposed by Registry are: 
            <list type="bullet">
            <item><term>CurrentUser</term><description>Stores information about user preferences.</description></item>
            <item><term>LocalMachine</term><description>Stores configuration information for the local machine.</description></item>
            <item><term>ClassesRoot</term><description>Stores information about types (and classes) and their properties.</description></item>  
            <item><term>Users</term><description>Stores information about the default user configuration.</description></item></list> 
            Once you have identified the root key under which you want to store/retrieve information from the registry, you can use the RegistryKey class to add or remove subkeys, and manipulate the values for a given key.</remarks>
        </member>
        <member name="F:OpenNETCF.Win32.Registry.LocalMachine">
            <summary>
            Contains the configuration data for the local machine. This field reads the Windows registry base key HKEY_LOCAL_MACHINE.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Registry.CurrentUser">
            <summary>
            Contains information about the current user preferences. This field reads the Windows registry base key HKEY_CURRENT_USER.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Registry.ClassesRoot">
            <summary>
             Defines the types (or classes) of documents and the properties associated with those types. This field reads the Windows registry base key HKEY_CLASSES_ROOT.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Registry.Users">
            <summary>
            Contains information about the default user configuration. This field reads the Windows registry base key HKEY_USERS.
            </summary>
        </member>
        <member name="T:OpenNETCF.Win32.RegistryKey">
            <summary>
            Represents a key level node in the Windows registry. This class is a registry encapsulation.
            </summary>
        </member>
        <member name="M:OpenNETCF.Win32.RegistryKey.ToString">
            <summary>
            Retrieves a string representation of this key.
            </summary>
            <returns>A string representing the key. If the specified key is invalid (cannot be found) then a null value is returned.</returns>
            <exception cref="T:System.ObjectDisposedException"> The RegistryKey being manipulated is closed (closed keys cannot be accessed).</exception>
        </member>
        <member name="M:OpenNETCF.Win32.RegistryKey.Flush">
            <summary>
            Writes all the attributes of the specified open registry key into the registry.
            </summary>
            <remarks>The Flush method may also write out parts of or all of the other keys.
            Calling this function excessively can have a negative effect on an application’s performance.</remarks>
        </member>
        <member name="M:OpenNETCF.Win32.RegistryKey.Close">
            <summary>
            Closes the key and flushes it to storage if the contents have been modified.
            </summary>
            <remarks>Calling this method on system keys will have no effect, since system keys should never be closed.
            This method does nothing if you call it on an instance of <b>RegistryKey</b> that is already closed.</remarks>
        </member>
        <member name="M:OpenNETCF.Win32.RegistryKey.CreateSubKey(System.String)">
            <summary>
             Creates a new subkey or opens an existing subkey.
             The string subKey is not case-sensitive.
            </summary>
            <param name="subkey">Name or path of subkey to create or open.</param>
            <returns>Returns the subkey, or null if the operation failed.</returns>
            <exception cref="T:System.ArgumentNullException">The specified subkey is null.</exception>
            <exception cref="T:System.ArgumentException">The length of the specified subkey is longer than the maximum length allowed (255 characters).</exception>
            <exception cref="T:System.ObjectDisposedException">The RegistryKey on which this method is being invoked is closed (closed keys cannot be accessed).</exception>
        </member>
        <member name="M:OpenNETCF.Win32.RegistryKey.OpenSubKey(System.String)">
            <summary>
            Retrieves a subkey as read-only.
            </summary>
            <param name="name">Name or path of subkey to open.</param>
            <returns>The subkey requested, or null if the operation failed.</returns>
        </member>
        <member name="M:OpenNETCF.Win32.RegistryKey.OpenSubKey(System.String,System.Boolean)">
            <summary>
            Retrieves a specified subkey.
            </summary>
            <param name="name">Name or path of subkey to open.</param>
            <param name="writable">Set to true if you need write access to the key.</param>
            <returns>The subkey requested, or null if the operation failed.</returns>
            <exception cref="T:System.ArgumentNullException">name is null.</exception>
            <exception cref="T:System.ArgumentException">The length of the specified subkey is longer than the maximum length allowed (255 characters).</exception>
            <exception cref="T:System.ObjectDisposedException">The RegistryKey being manipulated is closed (closed keys cannot be accessed).</exception>
        </member>
        <member name="M:OpenNETCF.Win32.RegistryKey.DeleteSubKey(System.String)">
            <summary>
            Deletes the specified subkey. The string subkey is not case-sensitive.
            </summary>
            <param name="subkey">Name of the subkey to delete.</param>
            <exception cref="T:System.ArgumentException">The specified subkey is not a valid reference to a registry key.</exception>
            <exception cref="T:System.ArgumentNullException">The subkey is null.</exception>
            <exception cref="T:System.ObjectDisposedException">The RegistryKey on which this method is being invoked is closed (closed keys cannot be accessed).</exception>
        </member>
        <member name="M:OpenNETCF.Win32.RegistryKey.DeleteSubKey(System.String,System.Boolean)">
            <summary>
            Deletes the specified subkey. The string subkey is not case-sensitive.
            </summary>
            <param name="subkey">Name of the subkey to delete.</param>
            <param name="throwOnMissingSubKey">Indicates whether an exception should be raised if the specified subkey cannot be found.
            If this argument is true and the specified subkey does not exist then an exception is raised.
            If this argument is false and the specified subkey does not exist, then no action is taken</param>
            <exception cref="T:System.ArgumentException">The specified subkey is not a valid reference to a registry key (and throwOnMissingSubKey is true).</exception>
            <exception cref="T:System.ArgumentNullException">The subkey is null.</exception>
            <exception cref="T:System.ObjectDisposedException">The RegistryKey on which this method is being invoked is closed (closed keys cannot be accessed).</exception>
        </member>
        <member name="M:OpenNETCF.Win32.RegistryKey.DeleteSubKeyTree(System.String)">
            <summary>
             Deletes a subkey and any child subkeys recursively.
             The string subKey is not case-sensitive.
            </summary>
            <param name="subkey">Subkey to delete.</param>
            <exception cref="T:System.ArgumentNullException">The subkey parameter is null.</exception>
            <exception cref="T:System.ArgumentException">Deletion of a root hive is attempted. 
            The subkey parameter does not match a valid registry subkey.</exception>
            <exception cref="T:System.ObjectDisposedException">The RegistryKey being manipulated is closed (closed keys cannot be accessed).</exception>
        </member>
        <member name="M:OpenNETCF.Win32.RegistryKey.GetSubKeyNames">
            <summary>
            Retrieves an array of strings that contains all the subkey names.
            </summary>
            <returns>An array of strings that contains the names of the subkeys for the current key.</returns>
            <exception cref="T:System.ObjectDisposedException">The RegistryKey being manipulated is closed (closed keys cannot be accessed).</exception>
        </member>
        <member name="M:OpenNETCF.Win32.RegistryKey.GetValue(System.String)">
            <summary>
            Retrieves the data associated with the specified value, or null if the value does not exist.
            </summary>
            <param name="name">Name of the value to retrieve.</param>
            <returns>The data associated with name , or null if the value does not exist.</returns>
            <exception cref="T:System.ArgumentException">The RegistryKey being manipulated does not exist.</exception>
            <exception cref="T:System.ObjectDisposedException">The RegistryKey being manipulated is closed (closed keys cannot be accessed).</exception>
        </member>
        <member name="M:OpenNETCF.Win32.RegistryKey.GetValue(System.String,System.Object)">
            <summary>
            Retrieves the specified value, or the default value you provide if the specified value is not found. 
            </summary>
            <param name="name">Name of the value to retrieve.</param>
            <param name="defaultValue">Value to return if name does not exist.</param>
            <returns>The data associated with name, or defaultValue if name is not found.</returns>
            <exception cref="T:System.ArgumentException">The RegistryKey being manipulated does not exist.</exception>
            <exception cref="T:System.ObjectDisposedException">The RegistryKey being manipulated is closed (closed keys cannot be accessed).</exception>
        </member>
        <member name="M:OpenNETCF.Win32.RegistryKey.SetValue(System.String,System.Object)">
            <summary>
            Sets the specified value.
            </summary>
            <param name="name">Name of value to store data in.</param>
            <param name="value">Data to store.</param>
            <exception cref="T:System.ArgumentException">The length of the specified value is longer than the maximum length allowed (255 characters).</exception>
            <exception cref="T:System.ArgumentNullException">value is null.</exception>
            <exception cref="T:System.ObjectDisposedException">The RegistryKey being set is closed (closed keys cannot be accessed).</exception>
            <exception cref="T:System.UnauthorizedAccessException">The RegistryKey being set is readonly, and cannot be written to (for example, it is a root-level node, or the key has not been opened with write-access).</exception>
        </member>
        <member name="M:OpenNETCF.Win32.RegistryKey.DeleteValue(System.String)">
            <summary>
            Deletes the specified value from this key.
            </summary>
            <param name="name">Name of the value to delete.</param>
            <exception cref="T:System.ArgumentException">name is not a valid reference to a value (and throwOnMissingValue is true) or name is null</exception>
            <exception cref="T:System.ObjectDisposedException">The RegistryKey being manipulated is closed (closed keys cannot be accessed).</exception>
            <exception cref="T:System.UnauthorizedAccessException">The RegistryKey being manipulated is readonly.</exception>
        </member>
        <member name="M:OpenNETCF.Win32.RegistryKey.DeleteValue(System.String,System.Boolean)">
            <summary>
            Deletes the specified value from this key.
            </summary>
            <param name="name">Name of the value to delete.</param>
            <param name="throwOnMissingValue">Indicates whether an exception should be raised if the specified value cannot be found.
            If this argument is true and the specified value does not exist then an exception is raised.
            If this argument is false and the specified value does not exist, then no action is taken</param>
            <exception cref="T:System.ArgumentException">name is not a valid reference to a value (and throwOnMissingValue is true) or name is null</exception>
            <exception cref="T:System.ObjectDisposedException">The RegistryKey being manipulated is closed (closed keys cannot be accessed).</exception>
            <exception cref="T:System.UnauthorizedAccessException">The RegistryKey being manipulated is readonly.</exception>
        </member>
        <member name="M:OpenNETCF.Win32.RegistryKey.GetValueNames">
            <summary>
            Retrieves an array of strings that contains all the value names associated with this key.
            </summary>
            <returns>An array of strings that contains the value names for the current key.</returns>
            <remarks>If no value names for the key are found, an empty array is returned.
            <para>All RegistryKeys are assigned a default value.
            This is not counted as a value name, and is not returned as part of the result set.</para></remarks>
            <exception cref="T:System.ObjectDisposedException">The RegistryKey being manipulated is closed (closed keys cannot be accessed).</exception>
        </member>
        <member name="M:OpenNETCF.Win32.RegistryKey.Dispose">
            <summary>
            Free up resources used by the RegistryKey
            </summary>
        </member>
        <member name="P:OpenNETCF.Win32.RegistryKey.Name">
            <summary>
            Retrieves the name of the key.
            </summary>
        </member>
        <member name="P:OpenNETCF.Win32.RegistryKey.SubKeyCount">
            <summary>
            Retrieves the count of subkeys at the base level, for the current key.
            </summary>
            <exception cref="T:System.ObjectDisposedException"> The RegistryKey being manipulated is closed (closed keys cannot be accessed).</exception>
        </member>
        <member name="P:OpenNETCF.Win32.RegistryKey.ValueCount">
            <summary>
            Retrieves the count of values in the key.
            </summary>
            <exception cref="T:System.ObjectDisposedException"> The RegistryKey being manipulated is closed (closed keys cannot be accessed).</exception>
        </member>
        <member name="T:OpenNETCF.Win32.RegistryKey.KeyType">
            <summary>
            Key type for RegCreateKey(Ex)
            </summary>
        </member>
        <member name="T:OpenNETCF.Win32.Sound">
            <summary>
            Contains Sound-related P/Invokes
            </summary>
        </member>
        <member name="M:OpenNETCF.Win32.Sound.PlaySound(System.String)">
            <summary>
            Plays a sound specified by the specified file name, resource, or system event.
            </summary>
            <param name="name">String that specifies the sound to play. If this parameter is NULL, any currently playing waveform sound is stopped.</param>
        </member>
        <member name="M:OpenNETCF.Win32.Sound.PlaySound(System.String,OpenNETCF.Win32.Sound.SoundFlags)">
            <summary>
            Plays a sound specified by the specified file name, resource, or system event.
            </summary>
            <param name="name">String that specifies the sound to play. If this parameter is NULL, any currently playing waveform sound is stopped.</param>
            <param name="flags">Flags for playing the sound.</param>
            <seealso cref="T:OpenNETCF.Win32.Sound.SoundFlags"/>
        </member>
        <member name="M:OpenNETCF.Win32.Sound.PlaySound(System.String,System.IntPtr,OpenNETCF.Win32.Sound.SoundFlags)">
            <summary>   
            Plays a sound specified by the specified file name, resource, or system event.   
            </summary>   
            <param name="name">String that specifies the sound to play. If this parameter is NULL, any currently playing waveform sound is stopped.</param>   
            <param name="hModule">Handle to the executable file that contains the resource to be loaded. This parameter must be NULL unless SoundFlags.Resource is specified in <paramref>dwFlags</paramref>.</param>   
            <param name="flags">Flags for playing the sound.</param>   
            <seealso cref="T:OpenNETCF.Win32.Sound.SoundFlags"/> 
        </member>
        <member name="M:OpenNETCF.Win32.Sound.Beep">
            <summary>
            This function plays a default system waveform sound.
            </summary>
            <remarks>Uses native MessageBeep function.</remarks>
        </member>
        <member name="M:OpenNETCF.Win32.Sound.Beep(OpenNETCF.Win32.Sound.BeepType)">
            <summary>
            This function plays a system waveform sound.
            </summary>
            <param name="type">Specifies the sound type.</param>
            <remarks>Uses native MessageBeep function.</remarks>
            <seealso cref="T:OpenNETCF.Win32.Sound.BeepFlags"/>
        </member>
        <member name="T:OpenNETCF.Win32.Sound.SoundFlags">
            <summary>
            PlaySound flags
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Sound.SoundFlags.Alias">
            <summary>
            <b>name</b> is a WIN.INI [sounds] entry
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Sound.SoundFlags.FileName">
            <summary>
            <b>name</b> is a file name
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Sound.SoundFlags.Resource">
            <summary>
            <b>name</b> is a resource name or atom
            </summary>   
        </member>
        <member name="F:OpenNETCF.Win32.Sound.SoundFlags.Sync">
            <summary>   
            Play synchronously (default)   
            </summary>   
        </member>
        <member name="F:OpenNETCF.Win32.Sound.SoundFlags.Async">
            <summary>   
             Play asynchronously   
            </summary>   
        </member>
        <member name="F:OpenNETCF.Win32.Sound.SoundFlags.NoDefault">
            <summary>   
            Silence not default, if sound not found   
            </summary>   
        </member>
        <member name="F:OpenNETCF.Win32.Sound.SoundFlags.Memory">
            <summary>   
            <b>name</b> points to a memory file   
            </summary>   
        </member>
        <member name="F:OpenNETCF.Win32.Sound.SoundFlags.Loop">
            <summary>   
            Loop the sound until next sndPlaySound   
            </summary>   
        </member>
        <member name="F:OpenNETCF.Win32.Sound.SoundFlags.NoStop">
            <summary>   
            Don't stop any currently playing sound   
            </summary>   
        </member>
        <member name="F:OpenNETCF.Win32.Sound.SoundFlags.NoWait">
            <summary>   
            Don't wait if the driver is busy   
            </summary>   
        </member>
        <member name="T:OpenNETCF.Win32.Sound.BeepType">
            <summary>
            Specifies the sound type for the Beep function.
            </summary>
            <seealso cref="T:System.Windows.Forms.MessageBoxIcon"/>
        </member>
        <member name="F:OpenNETCF.Win32.Sound.BeepType.Default">
            <summary>
            Default beep sound.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Sound.BeepType.Asterisk">
            <summary>
            Sound played during an Asterisk MessageBox.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Sound.BeepType.Exclamation">
            <summary>
            Sound played during an Exclamation MessageBox.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Sound.BeepType.Question">
            <summary>
            Sound played during a Question MessageBox.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Sound.BeepType.Hand">
            <summary>
            Sound played during a Hand MessageBox.
            </summary>
        </member>
        <member name="T:OpenNETCF.Win32.SystemTime">
            <summary>   
            This structure represents a date and time using individual members for the month, day, year, weekday, hour, minute, second, and millisecond.   
            </summary>
            <remarks>Wraps the native <b>SYSTEMTIME</b> structure.</remarks>
        </member>
        <member name="F:OpenNETCF.Win32.SystemTime.wYearOffset">
            <summary>
            Offset within structure to Year value.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.SystemTime.wMonthOffset">
            <summary>
            Offset within structure to Month value.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.SystemTime.wDayOfWeekOffset">
            <summary>
            Offset within structure to DayOfWeek value.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.SystemTime.wDayOffset">
            <summary>
            Offset within structure to Day value.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.SystemTime.wHourOffset">
            <summary>
            Offset within structure to Hour value.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.SystemTime.wMinuteOffset">
            <summary>
            Offset within structure to Minute value.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.SystemTime.wSecondOffset">
            <summary>
            Offset within structure to Second value.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.SystemTime.wMillisecondsOffset">
            <summary>
            Offset within structure to Millisecond value.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.SystemTime.Empty">
            <summary>
            Represents an empty SystemTime structure.
            </summary>
        </member>
        <member name="M:OpenNETCF.Win32.SystemTime.#ctor(System.Byte[])">
            <summary>
            Construct a SystemTime from a byte array
            </summary>   
            <remarks>This is used when setting a time zone,   
            which contains two embedded SystemTime structures.</remarks>   
            <param name="bytes">Byte Array containing SystemTime data.</param> 
        </member>
        <member name="M:OpenNETCF.Win32.SystemTime.#ctor(System.Byte[],System.Int32)">
            <summary>
            Construct a SystemTime from a portion of a byte array.
            </summary>   
            <remarks>This is used when setting a time zone,   
            which contains two embedded SystemTime structures.</remarks>   
            <param name="bytes">Byte Array containing SystemTime data.</param>   
            <param name="offset">Offset (in bytes) to SystemTime data.</param> 
        </member>
        <member name="M:OpenNETCF.Win32.SystemTime.#ctor(System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            Initializes a new SystemTime object with the specified parameters.                          /// Initializes a new SYSTEMTIME object with the specified parameters. 
            <param name="year">Specifies the current year.</param>
            <param name="month">Specifies the current month; January = 1, February = 2, and so on</param>
            <param name="day">Specifies the current day of the month.</param>
            <param name="hour">Specifies the current hour.</param>
            <param name="minute">Specifies the current minute.</param>
            <param name="second">Specifies the current second.</param>  
            </summary>
        </member>
        <member name="M:OpenNETCF.Win32.SystemTime.ToByteArray">
            <summary>
            Method to extract marshal-compatible 'structure' from the class.   
            </summary>   
            <returns>Byte Array containing the SystemTime data.</returns>   
        </member>
        <member name="M:OpenNETCF.Win32.SystemTime.#ctor(System.DateTime)">
            <summary>
            Create a new SystemTime instance from an existing DateTime instance.
            </summary>
            <param name="dt">DateTime to create SystemTime from.</param>
        </member>
        <member name="M:OpenNETCF.Win32.SystemTime.#ctor">
            <summary>
            Create a new empty SystemTime instance.
            </summary>
        </member>
        <member name="M:OpenNETCF.Win32.SystemTime.op_Implicit(OpenNETCF.Win32.SystemTime)~System.DateTime">
            <summary>
            Converts a SystemTime structure to a DateTime object.
            </summary>
            <param name="st">A SystemTime structure.</param>
            <returns>Equivalent date in the form of a <see cref="T:System.DateTime"/></returns>
        </member>
        <member name="M:OpenNETCF.Win32.SystemTime.op_Implicit(System.Int64)~OpenNETCF.Win32.SystemTime">
            <summary>
            Converts a 64bit FileTime value to a SystemTime structure.
            </summary>
            <param name="FileTime">FileTime.</param>
            <returns>A SystemTime structure.</returns>
        </member>
        <member name="M:OpenNETCF.Win32.SystemTime.op_Implicit(OpenNETCF.Win32.SystemTime)~System.Int64">
            <summary>
            Converts a SystemTime structure to the equivalent FileTime 64bit integer.
            </summary>
            <param name="st"></param>
            <returns></returns>
        </member>
        <member name="M:OpenNETCF.Win32.SystemTime.FromFileTime(System.Int64)">
            <summary>
            Returns a SystemTime equivalent to the specified operating system file timestamp.
            </summary>
            <param name="fileTime">A Windows file time.</param>
            <returns>A SystemTime value representing the date and time of fileTime.</returns>
        </member>
        <member name="M:OpenNETCF.Win32.SystemTime.ToFileTime">
            <summary>
            Converts the value of this instance to the format of a local operating system file time.
            </summary>
            <returns>The value of this SystemTime in the format of a local operating system file time.</returns>
        </member>
        <member name="M:OpenNETCF.Win32.SystemTime.op_Implicit(OpenNETCF.Win32.SystemTime)~System.Byte[]">
            <summary>
            Converts a SystemTime structure to the equivalent binary data.
            </summary>
            <param name="st"></param>
            <returns></returns>
        </member>
        <member name="M:OpenNETCF.Win32.SystemTime.FromDateTime(System.DateTime)">
            <summary>   
            Creates a new instance of SystemTime from an existing System.DateTime object   
            </summary>   
            <param name="dt">DateTime object to copy.</param>   
            <returns>SystemTime class matching the DateTime object.</returns>   
        </member>
        <member name="M:OpenNETCF.Win32.SystemTime.ToDateTime">
            <summary>   
            Returns a <see cref="T:System.DateTime"/> object with the same Date and time as this instance.   
            </summary>   
            <returns>A <see cref="T:System.DateTime"/> copy of the SystemTime object.</returns>   
        </member>
        <member name="P:OpenNETCF.Win32.SystemTime.Year">
            <summary>   
            Gets the year component of the date represented by this instance.   
            </summary> 
        </member>
        <member name="P:OpenNETCF.Win32.SystemTime.Month">
            <summary>   
            Gets the month component of the date represented by this instance.   
            </summary> 
        </member>
        <member name="P:OpenNETCF.Win32.SystemTime.DayOfWeek">
            <summary>   
            The Day of the week. Sunday = 0, Monday = 1, and so on.   
            </summary>   
            <remarks>Because the numbering scheme matches the System.DayOfWeek enumeration,   
            it is possible to cast this field to DayOfWeek.</remarks> 
        </member>
        <member name="P:OpenNETCF.Win32.SystemTime.Day">
            <summary>   
            Gets the day of the month represented by this instance.   
            </summary> 
        </member>
        <member name="P:OpenNETCF.Win32.SystemTime.Hour">
            <summary>   
            Gets the hour component of the date represented by this instance.   
            </summary> 
        </member>
        <member name="P:OpenNETCF.Win32.SystemTime.Minute">
            <summary>   
            Gets the minute component of the date represented by this instance.   
            </summary> 
        </member>
        <member name="P:OpenNETCF.Win32.SystemTime.Second">
            <summary>   
            Gets the seconds component of the date represented by this instance.   
            </summary> 
        </member>
        <member name="P:OpenNETCF.Win32.SystemTime.Milliseconds">
            <summary>   
            Gets the milliseconds component of the date represented by this instance.   
            </summary> 
        </member>
        <member name="T:OpenNETCF.Win32.TimeZoneCollection">
            <summary>
            Define a TimeZoneCollection which can return a list of all
            of the TimeZones known to the OS.  This should help make
            time zone picker controls, etc.
            </summary>
        </member>
        <member name="M:OpenNETCF.Win32.TimeZoneCollection.#ctor">
            <summary>
            Creates a new instance of TimeZoneCollection
            </summary>
        </member>
        <member name="M:OpenNETCF.Win32.TimeZoneCollection.Refresh">
            <summary>
            Refreshes the contents of the TimeZoneCollection
            </summary>
        </member>
        <member name="M:OpenNETCF.Win32.TimeZoneCollection.Initialize">
            <summary>
            The Initialize() method is equivalent to calling
            Initialize( ALL_TIMEZONES_LIST ).  It populates the
            collection with all OS-known timezones.
            </summary>
        </member>
        <member name="M:OpenNETCF.Win32.TimeZoneCollection.Initialize(System.Int32)">
            <summary>
            Use the Initialize method with the gmtOffset parameter
            to create a list of timezones which have a specific
            offset value.  For example, for all timezones at 
            GMT-5:00, pass -300 (minutes).  To get all of the time
            zones known to the OS, pass ALL_TIMEZONES_LIST or call
            the method with no parameters.
            </summary>
            <param name="gmtOffset">Offset of the target timezones
            from GMT (in minutes).</param>
        </member>
        <member name="T:OpenNETCF.Win32.WaveFormatEx">
            <summary>
            This class defines the format of waveform-audio data. 
            Only format information common to all waveform-audio data formats is included in this class. 
            For formats that require additional information, this class is included 
            as the first member in another class, along with the additional information
            </summary>
            <remarks>Equivalent to native <b>WAVEFORMATEX</b> structure.</remarks>
        </member>
        <member name="M:OpenNETCF.Win32.WaveFormatEx.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:OpenNETCF.Win32.WaveFormatEx.#ctor(System.Byte[])">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:OpenNETCF.Win32.WaveFormatEx.GetBytes">
            <summary>
            Get bytes
            </summary>
            <returns>byte array representation of this instance</returns>
        </member>
        <member name="T:OpenNETCF.Win32.WaveHdr">
            <summary>
            This class defines the header used to identify a waveform-audio buffer
            </summary>
        </member>
        <member name="T:OpenNETCF.Win32.WinAPIException">
            <summary>
            Exception class for OpenNETCF WinAPI classes
            </summary>
        </member>
        <member name="T:OpenNETCF.Win32.Win32Window">
            <summary>
            A helper class for working with native windows.
            </summary>
        </member>
        <member name="M:OpenNETCF.Win32.Win32Window.DestroyWindow(System.IntPtr)">
            <summary>
            This function destroys the specified window.
            </summary>
            <param name="hWnd">Handle to the window to be destroyed.</param>
            <returns>Nonzero indicates success.</returns>
        </member>
        <member name="M:OpenNETCF.Win32.Win32Window.FindWindow(System.String,System.String)">
            <summary>
            This function retrieves the handle to the top-level window whose class name and window name match the specified strings.
            </summary>
            <param name="className">The class name.</param>
            <param name="wndName">The window name (the window's title). If this parameter is NULL, all window names match.</param>
            <returns>A handle to the window that has the specified class name and window name indicates success. NULL indicates failure.</returns>
        </member>
        <member name="M:OpenNETCF.Win32.Win32Window.GetWindow(System.IntPtr,OpenNETCF.Win32.Win32Window.GetWindowParam)">
            <summary>
            Retrieves the handle to a window that has the specified relationship to the specified window.
            </summary>
            <param name="hWnd">Handle to a window.</param>
            <param name="nCmd">Specifies the relationship between the specified window and the window whose handle is to be retrieved.</param>
            <returns>A window handle indicates success. NULL indicates that no window exists with the specified relationship to the specified window.</returns>
        </member>
        <member name="M:OpenNETCF.Win32.Win32Window.GetWindow(OpenNETCF.Win32.Win32Window.GetWindowParam)">
            <summary>
            Retrieves the handle to a window that has the specified relationship to the Win32Window.
            </summary>
            <param name="nCmd">Specifies the relationship between the specified window and the window which is to be retrieved.</param>
            <returns></returns>
        </member>
        <member name="M:OpenNETCF.Win32.Win32Window.GetWindowText">
            <summary>
            Copies the text of the specified window's title bar or controls body.
            </summary>
            <returns>The window text.</returns>
        </member>
        <member name="M:OpenNETCF.Win32.Win32Window.GetWindowRect(System.IntPtr)">
            <summary>
            Returns a Rectangle representing the bounds of the window
            </summary>
            <param name="hWnd">a valid window handle</param>
            <returns>A <see cref="T:System.Drawing.Rectangle"/> representing the bounds of the specified window.</returns>
        </member>
        <member name="M:OpenNETCF.Win32.Win32Window.GetActiveWindow">
            <summary>
            Retrieves the window handle to the active window associated with the thread that calls the function.
            </summary>
            <returns>The handle to the active window associated with the calling thread's message queue indicates success. NULL indicates failure.</returns>
        </member>
        <member name="M:OpenNETCF.Win32.Win32Window.GetFocus">
            <summary>
            Retrieves the handle to the keyboard focus window associated with the thread that called the function.
            </summary>
            <returns>The handle to the window with the keyboard focus indicates success. NULL indicates that the calling thread's message queue does not have an associated window with the keyboard focus.</returns>
        </member>
        <member name="M:OpenNETCF.Win32.Win32Window.GetCapture">
            <summary>
            Retrieves the handle to the window, if any, that has captured the mouse or stylus input. Only one window at a time can capture the mouse or stylus input.
            </summary>
            <returns>The handle of the capture window associated with the current thread indicates success. NULL indicates that no window in the current thread has captured the mouse.</returns>
        </member>
        <member name="M:OpenNETCF.Win32.Win32Window.GetWindowLong(System.IntPtr,OpenNETCF.Win32.Win32Window.GetWindowLongParam)">
            <summary>
            Retrieves information about the specified window.
            </summary>
            <param name="hWnd">Handle to the window and, indirectly, the class to which the window belongs.</param>
            <param name="nItem">Specifies the zero-based offset to the value to be retrieved. Valid values are in the range zero through the number of bytes of extra window memory, minus four; for example, if you specified 12 or more bytes of extra memory, a value of 8 would be an index to the third 32-bit integer.</param>
            <returns>The requested 32-bit value indicates success. Zero indicates failure.</returns>
        </member>
        <member name="M:OpenNETCF.Win32.Win32Window.MoveWindow(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            This function changes the position and dimensions of the specified window. For a top-level window, the position and dimensions are relative to the upper-left corner of the screen. For a child window, they are relative to the upper-left corner of the parent window's client area.
            </summary>
            <param name="hWnd">Handle to the window.</param>
            <param name="X">Specifies the new position of the left side of the window.</param>
            <param name="Y">Specifies the new position of the top of the window.</param>
            <param name="cx">Specifies the new width of the window.</param>
            <param name="cy">Specifies the new height of the window.</param>
            <returns>Nonzero indicates success. Zero indicates failure.</returns>
        </member>
        <member name="M:OpenNETCF.Win32.Win32Window.PostMessage(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            Places a message in the message queue associated with the thread that created the specified window and then returns without waiting for the thread to process the message.
            </summary>
            <param name="hWnd">Handle to the window whose window procedure is to receive the message.</param>
            <param name="msg">Specifies the message to be posted.</param>
            <param name="wParam">Specifies additional message-specific information.</param>
            <param name="lParam">Specifies additional message-specific information.</param>
            <returns>Nonzero indicates success. Zero indicates failure.</returns>
        </member>
        <member name="M:OpenNETCF.Win32.Win32Window.SetWindowLong(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Changes an attribute of the specified window.
            </summary>
            <param name="hWnd">Handle to the window and, indirectly, the class to which the window belongs.</param>
            <param name="GetWindowLongParam">Specifies the zero-based offset to the value to be set.</param>
            <param name="nValue">Specifies the replacement value.</param>
        </member>
        <member name="M:OpenNETCF.Win32.Win32Window.EnableWindow(System.IntPtr,System.Boolean)">
            <summary>
            enables or disables mouse and keyboard input to the specified window or control. When input is disabled, the window does not receive input such as mouse clicks and key presses. When input is enabled, the window receives all input.
            </summary>
            <param name="hWnd">Handle to the window to be enabled or disabled.</param>
            <param name="bEnable">Boolean that specifies whether to enable or disable the window. If this parameter is TRUE, the window is enabled. If the parameter is FALSE, the window is disabled.</param>
            <returns>Nonzero indicates that the window was previously disabled. Zero indicates that the window was not previously disabled.</returns>
        </member>
        <member name="M:OpenNETCF.Win32.Win32Window.RegisterWindowMessage(System.String)">
            <summary>
            Defines a new window message that is guaranteed to be unique throughout the system. The returned message value can be used when calling the SendMessage or PostMessage function.
            </summary>
            <param name="lpMsg">String that specifies the message to be registered.</param>
            <returns>A message identifier in the range 0xC000 through 0xFFFF indicates that the message is successfully registered. Zero indicates failure.</returns>
        </member>
        <member name="M:OpenNETCF.Win32.Win32Window.SetFocus(System.IntPtr)">
            <summary>
            Sets the keyboard focus to the specified window. All subsequent keyboard input is directed to this window. The window, if any, that previously had the keyboard focus loses it.
            </summary>
            <param name="hWnd">Handle to the window that will receive the keyboard input.
            If this parameter is NULL, keystrokes are ignored.</param>
            <returns>The handle to the window that previously had the keyboard focus indicates success. NULL indicates that the hWnd parameter is invalid or the window is not associated with the calling thread's message queue.</returns>
        </member>
        <member name="M:OpenNETCF.Win32.Win32Window.SetForegroundWindow(System.IntPtr)">
            <summary>
            Puts the thread that created the specified window into the foreground and activates the window.
            </summary>
            <param name="hWnd">Handle to the window that should be activated and brought to the foreground.</param>
            <returns>Nonzero indicates that the window was brought to the foreground. Zero indicates that the window was not brought to the foreground.</returns>
        </member>
        <member name="T:OpenNETCF.Win32.Win32Window.GetWindowParam">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Win32Window.GetWindowParam.GW_HWNDFIRST">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Win32Window.GetWindowParam.GW_HWNDLAST">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Win32Window.GetWindowParam.GW_HWNDNEXT">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Win32Window.GetWindowParam.GW_HWNDPREV">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Win32Window.GetWindowParam.GW_OWNER">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Win32Window.GetWindowParam.GW_CHILD">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenNETCF.Win32.Win32Window.GetWindowLongParam">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Win32Window.GetWindowLongParam.GWL_WNDPROC">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Win32Window.GetWindowLongParam.GWL_HINSTANCE">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Win32Window.GetWindowLongParam.GWL_HWNDPARENT">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Win32Window.GetWindowLongParam.GWL_STYLE">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Win32Window.GetWindowLongParam.GWL_EXSTYLE">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Win32Window.GetWindowLongParam.GWL_USERDATA">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Win32Window.GetWindowLongParam.GWL_ID">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenNETCF.Win32.Win32Window.WindowStyleExtended">
            <summary>
            Specifies the extended style of the window. This parameter can be one of the values
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Win32Window.WindowStyleExtended.WS_EX_ACCEPTFILES">
            <summary>
            Specifies that a window created with this style accepts drag-drop files. 
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Win32Window.WindowStyleExtended.WS_EX_APPWINDOW">
            <summary>
            Forces a top-level window onto the taskbar when the window is visible.  
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Win32Window.WindowStyleExtended.WS_EX_CLIENTEDGE">
            <summary>
            Specifies that a window has a border with a sunken edge. 
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Win32Window.WindowStyleExtended.WS_EX_DLGMODALFRAME">
            <summary>
            Creates a window that has a double border; the window can, optionally, be created with a title bar by specifying the WS_CAPTION style in the dwStyle parameter. 
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Win32Window.WindowStyleExtended.WS_EX_LEFT">
            <summary>
            Creates a window that has generic "left-aligned" properties. This is the default. 
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Win32Window.WindowStyleExtended.WS_EX_LEFTSCROLLBAR">
            <summary>
            If the shell language is Hebrew, Arabic, or another language that supports reading order alignment, the vertical scroll bar (if present) is to the left of the client area. For other languages, the style is ignored. 
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Win32Window.WindowStyleExtended.WS_EX_LTRREADING">
            <summary>
            The window text is displayed using left-to-right reading-order properties. This is the default. 
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Win32Window.WindowStyleExtended.WS_EX_MDICHILD">
            <summary>
            Creates an MDI child window. 
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Win32Window.WindowStyleExtended.WS_EX_NOACTIVATE">
            <summary>
            A top-level window created with this style cannot be activated. If a child window has this style, tapping it does not cause its top-level parent to be activated. A window that has this style receives stylus events, but neither it nor its child windows can get the focus. Supported in Windows CE versions 2.0 and later. 
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Win32Window.WindowStyleExtended.WS_EX_NOANIMATION">
            <summary>
            A window created with this style does not show animated exploding and imploding rectangles, and does not have a button on the taskbar. Supported in Windows CE versions 2.0 and later. 
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Win32Window.WindowStyleExtended.WS_EX_NOPARENTNOTIFY">
            <summary>
            Specifies that a child window created with this style does not send the WM_PARENTNOTIFY message to its parent window when it is created or destroyed. 
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Win32Window.WindowStyleExtended.WS_EX_OVERLAPPEDWINDOW">
            <summary>
            Combines the WS_EX_CLIENTEDGE and WS_EX_WINDOWEDGE styles. 
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Win32Window.WindowStyleExtended.WS_EX_PALETTEWINDOW">
            <summary>
            Combines the WS_EX_WINDOWEDGE, WS_EX_TOOLWINDOW, and WS_EX_TOPMOST styles. 
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Win32Window.WindowStyleExtended.WS_EX_RIGHT">
            <summary>
            The window has generic "right-aligned" properties. This depends on the window class. This style has an effect only if the shell language is Hebrew, Arabic, or another language that supports reading-order alignment; otherwise, the style is ignored. 
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Win32Window.WindowStyleExtended.WS_EX_RIGHTSCROLLBAR">
            <summary>
            Vertical scroll bar (if present) is to the right of the client area. This is the default. 
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Win32Window.WindowStyleExtended.WS_EX_RTLREADING">
            <summary>
            If the shell language is Hebrew, Arabic, or another language that supports reading-order alignment, the window text is displayed using right-to-left reading-order properties. For other languages, the style is ignored. 
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Win32Window.WindowStyleExtended.WS_EX_STATICEDGE">
            <summary>
            Creates a window with a three-dimensional border style intended to be used for items that do not accept user input. 
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Win32Window.WindowStyleExtended.WS_EX_TOOLWINDOW">
            <summary>
            Creates a tool window; that is, a window intended to be used as a floating toolbar. A tool window has a title bar that is shorter than a normal title bar, and the window title is drawn using a smaller font. A tool window does not appear in the taskbar or in the dialog that appears when the user presses ALT+TAB. If a tool window has a system menu, its icon is not displayed on the title bar. However, you can display the system menu by right-clicking or by typing ALT+SPACE.  
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Win32Window.WindowStyleExtended.WS_EX_TOPMOST">
            <summary>
            Specifies that a window created with this style should be placed above all non-topmost windows and should stay above them, even when the window is deactivated. To add or remove this style, use the SetWindowPos function. 
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Win32Window.WindowStyleExtended.WS_EX_TRANSPARENT">
            <summary>
            Specifies that a window created with this style should not be painted until siblings beneath the window (that were created by the same thread) have been painted. The window appears transparent because the bits of underlying sibling windows have already been painted. To achieve transparency without these restrictions, use the SetWindowRgn function.
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Win32Window.WindowStyleExtended.WS_EX_WINDOWEDGE">
            <summary>
            Specifies that a window has a border with a raised edge. 
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Win32Window.WindowStyleExtended.WS_EX_NONE">
            <summary>
            Additional value for Completeness
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Win32Window.WindowStyle.WS_BORDER">
            <summary>
            Creates a window that has a thin-line border. 
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Win32Window.WindowStyle.WS_CAPTION">
            <summary>
            Creates a window that has a title bar (includes the WS_BORDER style). 
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Win32Window.WindowStyle.WS_CHILD">
            <summary>
            Creates a child window. This style cannot be used with the WS_POPUP style. 
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Win32Window.WindowStyle.WS_CHILDWINDOW">
            <summary>
            Same as the WS_CHILD style. 
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Win32Window.WindowStyle.WS_CLIPSIBLINGS">
            <summary>
            Clips child windows relative to each other; that is, when a particular child window receives a WM_PAINT message, the WS_CLIPSIBLINGS style clips all other overlapping child windows out of the region of the child window to be updated. If WS_CLIPSIBLINGS is not specified and child windows overlap, it is possible, when drawing within the client area of a child window, to draw within the client area of a neighboring child window. 
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Win32Window.WindowStyle.WS_DISABLED">
            <summary>
            Creates a window that is initially disabled. A disabled window cannot receive input from the user. 
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Win32Window.WindowStyle.WS_DLGFRAME">
            <summary>
            Creates a window that has a border of a style typically used with dialog boxes. A window with this style cannot have a title bar. 
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Win32Window.WindowStyle.WS_GROUP">
            <summary>
            Specifies the first control of a group of controls. The group consists of this first control and all controls defined after it, up to the next control with the WS_GROUP style. The first control in each group usually has the WS_TABSTOP style so that the user can move from group to group. The user can subsequently change the keyboard focus from one control in the group to the next control in the group by using the direction keys. 
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Win32Window.WindowStyle.WS_HSCROLL">
            <summary>
            Creates a window that has a horizontal scroll bar. 
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Win32Window.WindowStyle.WS_ICONIC">
            <summary>
            Creates a window that is initially minimized. Same as the WS_MINIMIZE style. 
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Win32Window.WindowStyle.WS_MAXIMIZE">
            <summary>
            Creates a window that is initially maximized. 
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Win32Window.WindowStyle.WS_MAXIMIZEBOX">
            <summary>
            Creates a window that has a Maximize button. Cannot be combined with the WS_EX_CONTEXTHELP style.  
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Win32Window.WindowStyle.WS_MINIMIZE">
            <summary>
            Creates a window that is initially minimized. Same as the WS_ICONIC style. 
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Win32Window.WindowStyle.WS_MINIMIZEBOX">
            <summary>
            Creates a window that has a Minimize button. Cannot be combined with the WS_EX_CONTEXTHELP style.  
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Win32Window.WindowStyle.WS_OVERLAPPED">
            <summary>
            Creates an overlapped window. An overlapped window has a title bar and a border. Same as the WS_TILED style. 
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Win32Window.WindowStyle.WS_OVERLAPPEDWINDOW">
            <summary>
            Creates an overlapped window with the WS_OVERLAPPED, WS_CAPTION, WS_SYSMENU, WS_THICKFRAME, WS_MINIMIZEBOX, and WS_MAXIMIZEBOX styles. Same as the WS_TILEDWINDOW style.  
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Win32Window.WindowStyle.WS_POPUP">
            <summary>
            Creates a pop-up window. This style cannot be used with the WS_CHILD style. 
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Win32Window.WindowStyle.WS_POPUPWINDOW">
            <summary>
            Creates a pop-up window with WS_BORDER, WS_POPUP, and WS_SYSMENU styles. The WS_CAPTION and WS_POPUPWINDOW styles must be combined to make the window menu visible. 
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Win32Window.WindowStyle.WS_SIZEBOX">
            <summary>
            Creates a window that has a sizing border. Same as the WS_THICKFRAME style. 
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Win32Window.WindowStyle.WS_SYSMENU">
            <summary>
            Creates a window that has a Close (X) button in the non-client area. 
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Win32Window.WindowStyle.WS_TABSTOP">
            <summary>
            Specifies a control that can receive the keyboard focus when the user presses the TAB key. Pressing the TAB key changes the keyboard focus to the next control with the WS_TABSTOP style. 
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Win32Window.WindowStyle.WS_THICKFRAME">
            <summary>
            Creates a window that has a sizing border. Same as the WS_SIZEBOX style. 
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Win32Window.WindowStyle.WS_TILED">
            <summary>
            Creates an overlapped window. An overlapped window has a title bar and a border. Same as the WS_OVERLAPPED style.  
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Win32Window.WindowStyle.WS_TILEDWINDOW">
            <summary>
            Creates an overlapped window with the WS_OVERLAPPED, WS_CAPTION, WS_SYSMENU, WS_THICKFRAME, WS_MINIMIZEBOX, and WS_MAXIMIZEBOX styles. Same as the WS_OVERLAPPEDWINDOW style.  
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Win32Window.WindowStyle.WS_VISIBLE">
            <summary>
            Creates a window that is initially visible. 
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.Win32Window.WindowStyle.WS_VSCROLL">
            <summary>
            Creates a window that has a vertical scroll bar. 
            </summary>
        </member>
        <member name="T:OpenNETCF.Win32.NMHDR">
            <summary>
            Notification header returned in WM_NOTIFY lParam
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.NMHDR.hwndFrom">
            <summary>
            Window that has sent WM_NOTIFY
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.NMHDR.idFrom">
            <summary>
            Control ID of the window that sent the notification
            </summary>
        </member>
        <member name="F:OpenNETCF.Win32.NMHDR.code">
            <summary>
            Notification code
            </summary>
        </member>
        <member name="T:OpenNETCF.BestPracticeViolationException">
            <summary>
            This exception is thrown in situations where calling code violates a "best practice".  If you get this exception, it is advised that you consider rearchitecting the calling code.
            <para><b>New in v1.1</b></para>
            </summary>
            <seealso cref="M:OpenNETCF.Threading.ThreadEx.Abort"/>
        </member>
        <member name="M:OpenNETCF.BestPracticeViolationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the BestPracticeViolationException class. 
            </summary>
            <param name="message">Message to set for the Exception</param>
        </member>
        <member name="T:OpenNETCF.EnumEx">
            <summary>
            Provides helper functions for Enumerations.
            </summary>
            <remarks>Extends the <see cref="T:System.Enum">System.Enum Class</see>.</remarks>
            <seealso cref="T:System.Enum">System.Enum Class</seealso>
        </member>
        <member name="M:OpenNETCF.EnumEx.GetName(System.Type,System.Object)">
            <summary>
            Retrieves the name of the constant in the specified enumeration that has the specified value.
            </summary>
            <param name="enumType">An enumeration type.</param>
            <param name="value">The value of a particular enumerated constant in terms of its underlying type.</param>
            <returns> A string containing the name of the enumerated constant in enumType whose value is value, or null if no such constant is found.</returns>
            <exception cref="T:System.ArgumentException"> enumType is not an System.Enum.  -or-  value is neither of type enumType nor does it have the same underlying type as enumType.</exception>
            <example>The following code sample illustrates the use of GetName (Based on the example provided with desktop .NET Framework):
            <code>[Visual Basic] 
            Imports System
            
            	Public Class GetNameTest
            
            		Enum Colors
            			Red
            			Green
            			Blue
            			Yellow
            		End Enum 'Colors
            
            		Enum Styles
            			Plaid
            			Striped
            			Tartan
            			Corduroy
            		End Enum 'Styles
            
            	Public Shared Sub Main() 
            		MessageBox.Show("The 4th value of the Colors Enum is " + [OpenNETCF.Enum].GetName(GetType(Colors), 3))
            		MessageBox.Show("The 4th value of the Styles Enum is " + [OpenNETCF.Enum].GetName(GetType(Styles), 3))
            	End Sub 'Main
            	
            End Class 'GetNameTest</code>
            <code>[C#] 
            using System;
            
            public class GetNameTest 
            {
            	enum Colors { Red, Green, Blue, Yellow };
            	enum Styles { Plaid, Striped, Tartan, Corduroy };
            
            	public static void Main() 
            	{
            		MessageBox.Show("The 4th value of the Colors Enum is " + OpenNETCF.Enum.GetName(typeof(Colors), 3));
            		MessageBox.Show("The 4th value of the Styles Enum is " + OpenNETCF.Enum.GetName(typeof(Styles), 3));
            	}
            }</code>
            </example>
            <seealso cref="M:System.Enum.GetName(System.Type,System.Object)">System.Enum.GetName Method</seealso>
        </member>
        <member name="M:OpenNETCF.EnumEx.GetNames(System.Type)">
            <summary>
            Retrieves an array of the names of the constants in a specified enumeration.
            </summary>
            <param name="enumType">An enumeration type.</param>
            <returns>A string array of the names of the constants in enumType. The elements of the array are sorted by the values of the enumerated constants.</returns>
            <exception cref="T:System.ArgumentException">enumType parameter is not an System.Enum</exception>
            <example>The follow example shows how to enumerate the members of the System.DayOfWeek enumeration by adding them to a ComboBox:-
            <code>[Visual Basic]
            Dim thisDOW As New DayOfWeek
            For Each thisDOW In OpenNETCF.Enum.GetValues(Type.GetType("System.DayOfWeek"))
            	ComboBox1.Items.Add(thisDOW)
            Next</code>
            <code>[C#]
            foreach(DayOfWeek thisdow in OpenNETCF.Enum.GetValues(typeof(DayOfWeek)))
            {
            	comboBox1.Items.Add(thisdow);
            }</code></example>
            <seealso cref="M:System.Enum.GetNames(System.Type)">System.Enum.GetNames Method</seealso>
        </member>
        <member name="M:OpenNETCF.EnumEx.GetUnderlyingType(System.Type)">
            <summary>
            Returns the underlying type of the specified enumeration.
            <para><b>New in v1.1</b></para>
            </summary>
            <param name="enumType">An enumeration type.</param>
            <returns>The underlying <see cref="T:System.Type"/> of <paramref>enumType</paramref>.</returns>
            <seealso cref="M:System.Enum.GetUnderlyingType(System.Type)">System.Enum.GetUnderlyingType Method</seealso>
        </member>
        <member name="M:OpenNETCF.EnumEx.GetValues(System.Type)">
            <summary>
            Retrieves an array of the values of the constants in a specified enumeration.
            </summary>
            <param name="enumType">An enumeration type.</param>
            <returns>An System.Array of the values of the constants in enumType. The elements of the array are sorted by the values of the enumeration constants.</returns>
            <exception cref="T:System.ArgumentException">enumType parameter is not an System.Enum</exception>
            <seealso cref="M:System.Enum.GetValues(System.Type)">System.Enum.GetValues Method</seealso>
        </member>
        <member name="M:OpenNETCF.EnumEx.IsDefined(System.Type,System.Object)">
            <summary>
            Returns an indication whether a constant with a specified value exists in a specified enumeration.
            <para><b>New in v1.1</b></para>
            </summary>
            <param name="enumType">An enumeration type.</param>
            <param name="value">The value or name of a constant in enumType.</param>
            <returns><b>true</b> if a constant in <paramref>enumType</paramref> has a value equal to value; otherwise, <b>false</b>.</returns>
            <seealso cref="M:System.Enum.IsDefined(System.Type,System.Object)">System.Enum.IsDefined Method</seealso>
        </member>
        <member name="M:OpenNETCF.EnumEx.Parse(System.Type,System.String)">
            <summary>
            Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.
            </summary>
            <param name="enumType">The <see cref="T:System.Type"/> of the enumeration.</param>
            <param name="value">A string containing the name or value to convert.</param>
            <returns>An object of type enumType whose value is represented by value.</returns>
        </member>
        <member name="M:OpenNETCF.EnumEx.Parse(System.Type,System.String,System.Boolean)">
            <summary>
            Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.
            A parameter specifies whether the operation is case-sensitive.
            </summary>
            <param name="enumType">The <see cref="T:System.Type"/> of the enumeration.</param>
            <param name="value">A string containing the name or value to convert.</param>
            <param name="ignoreCase">If true, ignore case; otherwise, regard case.</param>
            <returns>An object of type enumType whose value is represented by value.</returns>
            <exception cref="T:System.ArgumentException">enumType is not an <see cref="T:System.Enum"/>.
             -or-  value is either an empty string ("") or only contains white space.
             -or-  value is a name, but not one of the named constants defined for the enumeration.</exception>
             <seealso cref="M:System.Enum.Parse(System.Type,System.String,System.Boolean)">System.Enum.Parse Method</seealso>
        </member>
        <member name="M:OpenNETCF.EnumEx.ToObject(System.Type,System.Object)">
            <summary>
            Returns an instance of the specified enumeration set to the specified value.
            <para><b>New in v1.1</b></para>
            </summary>
            <param name="enumType">An enumeration.</param>
            <param name="value">The value.</param>
            <returns>An enumeration object whose value is <paramref>value</paramref>.</returns>
            <seealso cref="M:System.Enum.ToObject(System.Type,System.Object)">System.Enum.ToObject Method</seealso>
        </member>
        <member name="T:OpenNETCF.Enum">
            <summary>
            Obsolete. Provides helper functions for Enumerations.
            </summary>
            <remarks>Replaced with EnumEx to fit with naming schema.</remarks>
            <seealso cref="T:OpenNETCF.EnumEx"/>
        </member>
        <member name="M:OpenNETCF.Enum.GetName(System.Type,System.Object)">
            <summary>
            Retrieves the name of the constant in the specified enumeration that has the specified value.
            </summary>
            <param name="enumType">An enumeration type.</param>
            <param name="value">The value of a particular enumerated constant in terms of its underlying type.</param>
            <returns> A string containing the name of the enumerated constant in enumType whose value is value, or null if no such constant is found.</returns>
            <exception cref="T:System.ArgumentException"> enumType is not an System.Enum.  -or-  value is neither of type enumType nor does it have the same underlying type as enumType.</exception>
            <example>The following code sample illustrates the use of GetName (Based on the example provided with desktop .NET Framework):
            <code>[Visual Basic] 
            Imports System
            
            	Public Class GetNameTest
            
            		Enum Colors
            			Red
            			Green
            			Blue
            			Yellow
            		End Enum 'Colors
            
            		Enum Styles
            			Plaid
            			Striped
            			Tartan
            			Corduroy
            		End Enum 'Styles
            
            	Public Shared Sub Main() 
            		MessageBox.Show("The 4th value of the Colors Enum is " + [OpenNETCF.Enum].GetName(GetType(Colors), 3))
            		MessageBox.Show("The 4th value of the Styles Enum is " + [OpenNETCF.Enum].GetName(GetType(Styles), 3))
            	End Sub 'Main
            	
            End Class 'GetNameTest</code>
            <code>[C#] 
            using System;
            
            public class GetNameTest 
            {
            	enum Colors { Red, Green, Blue, Yellow };
            	enum Styles { Plaid, Striped, Tartan, Corduroy };
            
            	public static void Main() 
            	{
            		MessageBox.Show("The 4th value of the Colors Enum is " + OpenNETCF.Enum.GetName(typeof(Colors), 3));
            		MessageBox.Show("The 4th value of the Styles Enum is " + OpenNETCF.Enum.GetName(typeof(Styles), 3));
            	}
            }</code>
            </example>
            <seealso cref="M:System.Enum.GetName(System.Type,System.Object)">System.Enum.GetName Method</seealso>
        </member>
        <member name="M:OpenNETCF.Enum.GetNames(System.Type)">
            <summary>
            Retrieves an array of the names of the constants in a specified enumeration.
            </summary>
            <param name="enumType">An enumeration type.</param>
            <returns>A string array of the names of the constants in enumType. The elements of the array are sorted by the values of the enumerated constants.</returns>
            <exception cref="T:System.ArgumentException">enumType parameter is not an System.Enum</exception>
            <example>The follow example shows how to enumerate the members of the System.DayOfWeek enumeration by adding them to a ComboBox:-
            <code>[Visual Basic]
            Dim thisDOW As New DayOfWeek
            For Each thisDOW In OpenNETCF.Enum.GetValues(Type.GetType("System.DayOfWeek"))
            	ComboBox1.Items.Add(thisDOW)
            Next</code>
            <code>[C#]
            foreach(DayOfWeek thisdow in OpenNETCF.Enum.GetValues(typeof(DayOfWeek)))
            {
            	comboBox1.Items.Add(thisdow);
            }</code></example>
            <seealso cref="M:System.Enum.GetNames(System.Type)">System.Enum.GetNames Method</seealso>
        </member>
        <member name="M:OpenNETCF.Enum.GetUnderlyingType(System.Type)">
            <summary>
            Returns the underlying type of the specified enumeration.
            <para><b>New in v1.1</b></para>
            </summary>
            <param name="enumType">An enumeration type.</param>
            <returns>The underlying <see cref="T:System.Type"/> of <paramref>enumType</paramref>.</returns>
            <seealso cref="M:System.Enum.GetUnderlyingType(System.Type)">System.Enum.GetUnderlyingType Method</seealso>
        </member>
        <member name="M:OpenNETCF.Enum.GetValues(System.Type)">
            <summary>
            Retrieves an array of the values of the constants in a specified enumeration.
            </summary>
            <param name="enumType">An enumeration type.</param>
            <returns>An System.Array of the values of the constants in enumType. The elements of the array are sorted by the values of the enumeration constants.</returns>
            <exception cref="T:System.ArgumentException">enumType parameter is not an System.Enum</exception>
            <seealso cref="M:System.Enum.GetValues(System.Type)">System.Enum.GetValues Method</seealso>
        </member>
        <member name="M:OpenNETCF.Enum.IsDefined(System.Type,System.Object)">
            <summary>
            Returns an indication whether a constant with a specified value exists in a specified enumeration.
            <para><b>New in v1.1</b></para>
            </summary>
            <param name="enumType">An enumeration type.</param>
            <param name="value">The value or name of a constant in enumType.</param>
            <returns><b>true</b> if a constant in <paramref>enumType</paramref> has a value equal to value; otherwise, <b>false</b>.</returns>
            <seealso cref="M:System.Enum.IsDefined(System.Type,System.Object)">System.Enum.IsDefined Method</seealso>
        </member>
        <member name="M:OpenNETCF.Enum.Parse(System.Type,System.String)">
            <summary>
            Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.
            </summary>
            <param name="enumType">The <see cref="T:System.Type"/> of the enumeration.</param>
            <param name="value">A string containing the name or value to convert.</param>
            <returns>An object of type enumType whose value is represented by value.</returns>
        </member>
        <member name="M:OpenNETCF.Enum.Parse(System.Type,System.String,System.Boolean)">
            <summary>
            Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.
            A parameter specifies whether the operation is case-sensitive.
            </summary>
            <param name="enumType">The <see cref="T:System.Type"/> of the enumeration.</param>
            <param name="value">A string containing the name or value to convert.</param>
            <param name="ignoreCase">If true, ignore case; otherwise, regard case.</param>
            <returns>An object of type enumType whose value is represented by value.</returns>
            <exception cref="T:System.ArgumentException">enumType is not an <see cref="T:System.Enum"/>.
             -or-  value is either an empty string ("") or only contains white space.
             -or-  value is a name, but not one of the named constants defined for the enumeration.</exception>
             <seealso cref="M:System.Enum.Parse(System.Type,System.String,System.Boolean)">System.Enum.Parse Method</seealso>
        </member>
        <member name="M:OpenNETCF.Enum.ToObject(System.Type,System.Object)">
            <summary>
            Returns an instance of the specified enumeration set to the specified value.
            <para><b>New in v1.1</b></para>
            </summary>
            <param name="enumType">An enumeration.</param>
            <param name="value">The value.</param>
            <returns>An enumeration object whose value is <paramref>value</paramref>.</returns>
            <seealso cref="M:System.Enum.ToObject(System.Type,System.Object)">System.Enum.ToObject Method</seealso>
        </member>
        <member name="T:OpenNETCF.EnvironmentEx">
            <summary>
            Extends the functionality of <see cref="T:System.Environment"/>
            </summary>
            <seealso cref="T:System.Environment">System.Environment Class</seealso>
        </member>
        <member name="M:OpenNETCF.EnvironmentEx.GetFolderPath(OpenNETCF.EnvironmentEx.SpecialFolder)">
            <summary>
            Gets the path to the system special folder identified by the specified enumeration.
            </summary>
            <param name="folder">An enumerated constant that identifies a system special folder.</param>
            <returns>The path to the specified system special folder, if that folder physically exists on your computer; otherwise, the empty string ("").
            A folder will not physically exist if the operating system did not create it, the existing folder was deleted, or the folder is a virtual directory, such as My Computer, which does not correspond to a physical path.</returns>
            <seealso cref="M:System.Environment.GetFolderPath(System.Environment.SpecialFolder)">System.Environment.GetFolderPath Method</seealso>
        </member>
        <member name="M:OpenNETCF.EnvironmentEx.GetLogicalDrives">
            <summary>
            Returns an array of string containing the names of the logical drives on the current computer.
            <para><b>New in v1.2</b></para></summary>
            <returns>An array of string where each element contains the name of a logical drive.</returns>
        </member>
        <member name="P:OpenNETCF.EnvironmentEx.NewLine">
            <summary>
            Gets the newline string defined for this environment.
            </summary>
            <value>A string containing "\r\n".</value>
            <remarks>The property value is a constant customized specifically for the current platform.
            This value is automatically appended to text when using WriteLine methods, such as <see cref="M:T:System.Console.WriteLine(System.String)">Console.WriteLine</see>.</remarks>
            <seealso cref="P:System.Environment.NewLine">System.Environment.NewLine Property</seealso>
        </member>
        <member name="P:OpenNETCF.EnvironmentEx.SystemDirectory">
            <summary>
            Gets the fully qualified path of the system directory.
            </summary>
            <value>A string containing a directory path.</value>
            <remarks>An example of the value returned is the string "\Windows".</remarks>
            <seealso cref="P:System.Environment.SystemDirectory">System.Environment.SystemDirectory Property</seealso>
        </member>
        <member name="P:OpenNETCF.EnvironmentEx.PlatformName">
            <summary>
            Returns a string which identifies the device platform
            </summary>
            <remarks>Valid values include:-
            <list type="bullet">
            <item><term>PocketPC</term><description>Pocket PC device or Emulator</description></item>
            <item><term>SmartPhone</term><description>Smartphone 2003 Device or Emulator</description></item>
            <item><term>CEPC platform</term><description>Windows CE.NET Emulator</description></item></list>
            Additional platform types will have other names.
            Useful when writing library code targetted at multiple platforms.</remarks>
        </member>
        <member name="P:OpenNETCF.EnvironmentEx.MachineName">
            <summary>
            Gets the name of this local device.
            <para><b>New in v1.2</b></para></summary>
        </member>
        <member name="P:OpenNETCF.EnvironmentEx.UserName">
            <summary>
            Gets the user name of the person who started the current thread.
            <para><b>New in v1.2</b></para></summary>
            <remarks>Supported only on Pocket PC and Smartphone platforms.</remarks>
        </member>
        <member name="P:OpenNETCF.EnvironmentEx.OSVersion">
            <summary>
            Gets an <see cref="T:System.OperatingSystem"/> object that contains the current platform identifier and version number. 
            <para><b>New in v1.1</b></para>
            </summary>
        </member>
        <member name="P:OpenNETCF.EnvironmentEx.TickCount">
            <summary>
            Gets the number of milliseconds elapsed since the system started.
            <para><b>New in v1.1</b></para>
            </summary>
        </member>
        <member name="P:OpenNETCF.EnvironmentEx.Version">
            <summary>
            Gets a <see cref="T:System.Version"/> object that describes the major, minor, build, and revision numbers of the common language runtime.
            <para><b>New in v1.1</b></para>
            </summary>
        </member>
        <member name="T:OpenNETCF.EnvironmentEx.SpecialFolder">
            <summary>
            Specifies enumerated constants used to retrieve directory paths to system special folders.
            </summary>
            <remarks>Not all platforms support all of these constants.</remarks>
            <seealso cref="T:System.Environment.SpecialFolder">System.Environment.SpecialFolder Enumeration</seealso>
        </member>
        <member name="F:OpenNETCF.EnvironmentEx.SpecialFolder.Programs">
            <summary>
            The directory that contains the user's program groups.
            </summary>
        </member>
        <member name="F:OpenNETCF.EnvironmentEx.SpecialFolder.Personal">
            <summary>
            The directory that serves as a common repository for documents. (Not supported in Pocket PC and Pocket PC 2002 - "\My Documents").
            </summary>
        </member>
        <member name="F:OpenNETCF.EnvironmentEx.SpecialFolder.Favorites">
            <summary>
            The directory that serves as a common repository for the user's favorite items.
            </summary>
        </member>
        <member name="F:OpenNETCF.EnvironmentEx.SpecialFolder.Startup">
            <summary>
            The directory that corresponds to the user's Startup program group.   The system starts these programs whenever a user starts Windows CE.
            </summary>
        </member>
        <member name="F:OpenNETCF.EnvironmentEx.SpecialFolder.Recent">
            <summary>
            The directory that contains the user's most recently used documents.
            Not supported on Windows Mobile.
            </summary>
        </member>
        <member name="F:OpenNETCF.EnvironmentEx.SpecialFolder.StartMenu">
            <summary>
            The directory that contains the Start menu items.
            </summary>
        </member>
        <member name="F:OpenNETCF.EnvironmentEx.SpecialFolder.DesktopDirectory">
            <summary>
            The directory used to physically store file objects on the desktop.   Do not confuse this directory with the desktop folder itself, which is a virtual folder.
            Not supported on Windows Mobile.
            </summary>
        </member>
        <member name="F:OpenNETCF.EnvironmentEx.SpecialFolder.Fonts">
            <summary>
            The Fonts folder.
            </summary>
        </member>
        <member name="F:OpenNETCF.EnvironmentEx.SpecialFolder.ApplicationData">
            <summary>
            The directory that serves as a common repository for application-specific data for the current user.
            Not supported on Windows Mobile.
            </summary>
        </member>
        <member name="F:OpenNETCF.EnvironmentEx.SpecialFolder.Windows">
            <summary>
            The Windows folder.
            Not supported by Pocket PC and Pocket PC 2002.
            </summary>
        </member>
        <member name="F:OpenNETCF.EnvironmentEx.SpecialFolder.ProgramFiles">
            <summary>
            The program files directory.
            </summary>
        </member>
        <member name="T:OpenNETCF.Environment">
            <summary>
            Obsolete. Use <see cref="T:OpenNETCF.EnvironmentEx"/> instead.
            </summary>
            <seealso cref="T:OpenNETCF.EnvironmentEx"/>
        </member>
        <member name="M:OpenNETCF.Environment.GetFolderPath(OpenNETCF.Environment.SpecialFolder)">
            <summary>
            Gets the path to the system special folder identified by the specified enumeration.
            </summary>
            <param name="folder">An enumerated constant that identifies a system special folder.</param>
            <returns>The path to the specified system special folder, if that folder physically exists on your computer; otherwise, the empty string ("").  A folder will not physically exist if the operating system did not create it, the existing folder was deleted, or the folder is a virtual directory, such as My Computer, which does not correspond to a physical path.</returns>
            <seealso cref="M:System.Environment.GetFolderPath(System.Environment.SpecialFolder)">System.Environment.GetFolderPath Method</seealso>
        </member>
        <member name="P:OpenNETCF.Environment.NewLine">
            <summary>
            Gets the newline string defined for this environment.
            </summary>
            <value>A string containing "\r\n".</value>
            <remarks>The property value is a constant customized specifically for the current platform.
            This value is automatically appended to text when using WriteLine methods, such as <see cref="M:T:System.Console.WriteLine(System.String)">Console.WriteLine</see>.</remarks>
            <seealso cref="P:System.Environment.NewLine">System.Environment.NewLine Property</seealso>
        </member>
        <member name="P:OpenNETCF.Environment.SystemDirectory">
            <summary>
            Gets the fully qualified path of the system directory.
            </summary>
            <value>A string containing a directory path.</value>
            <remarks>An example of the value returned is the string "\Windows".</remarks>
            <seealso cref="P:System.Environment.SystemDirectory">System.Environment.SystemDirectory Property</seealso>
        </member>
        <member name="P:OpenNETCF.Environment.PlatformName">
            <summary>
            Returns a string which identifies the device platform
            </summary>
            <remarks>Valid values include:-
            <list type="bullet">
            <item><term>PocketPC</term><description>Pocket PC device or Emulator</description></item>
            <item><term>SmartPhone</term><description>Smartphone 2003 Device or Emulator</description></item>
            <item><term>CEPC platform</term><description>Windows CE.NET Emulator</description></item></list>
            Additional platform types will have other names.
            Useful when writing library code targetted at multiple platforms.</remarks>
        </member>
        <member name="P:OpenNETCF.Environment.OSVersion">
            <summary>
            Gets an <see cref="T:System.OperatingSystem"/> object that contains the current platform identifier and version number. 
            <para><b>New in v1.1</b></para>
            </summary>
        </member>
        <member name="P:OpenNETCF.Environment.TickCount">
            <summary>
            Gets the number of milliseconds elapsed since the system started.
            <para><b>New in v1.1</b></para>
            </summary>
        </member>
        <member name="P:OpenNETCF.Environment.Version">
            <summary>
            Gets a <see cref="T:System.Version"/> object that describes the major, minor, build, and revision numbers of the common language runtime.
            <para><b>New in v1.1</b></para>
            </summary>
        </member>
        <member name="T:OpenNETCF.Environment.SpecialFolder">
            <summary>
            Specifies enumerated constants used to retrieve directory paths to system special folders.
            </summary>
            <remarks>Not all platforms support all of these constants.</remarks>
            <seealso cref="T:System.Environment.SpecialFolder">System.Environment.SpecialFolder Enumeration</seealso>
        </member>
        <member name="F:OpenNETCF.Environment.SpecialFolder.Programs">
            <summary>
            The directory that contains the user's program groups.
            </summary>
        </member>
        <member name="F:OpenNETCF.Environment.SpecialFolder.Personal">
            <summary>
            The directory that serves as a common repository for documents. (Not supported in Pocket PC and Pocket PC 2002 - "\My Documents").
            </summary>
        </member>
        <member name="F:OpenNETCF.Environment.SpecialFolder.Favorites">
            <summary>
            The directory that serves as a common repository for the user's favorite items.
            </summary>
        </member>
        <member name="F:OpenNETCF.Environment.SpecialFolder.Startup">
            <summary>
            The directory that corresponds to the user's Startup program group.   The system starts these programs whenever a user starts Windows CE.
            </summary>
        </member>
        <member name="F:OpenNETCF.Environment.SpecialFolder.Recent">
            <summary>
            The directory that contains the user's most recently used documents.
            Not supported on Windows Mobile.
            </summary>
        </member>
        <member name="F:OpenNETCF.Environment.SpecialFolder.StartMenu">
            <summary>
            The directory that contains the Start menu items.
            </summary>
        </member>
        <member name="F:OpenNETCF.Environment.SpecialFolder.DesktopDirectory">
            <summary>
            The directory used to physically store file objects on the desktop.   Do not confuse this directory with the desktop folder itself, which is a virtual folder.
            Not supported on Windows Mobile.
            </summary>
        </member>
        <member name="F:OpenNETCF.Environment.SpecialFolder.Fonts">
            <summary>
            The Fonts folder.
            </summary>
        </member>
        <member name="F:OpenNETCF.Environment.SpecialFolder.ApplicationData">
            <summary>
            The directory that serves as a common repository for application-specific data for the current user.
            Not supported on Windows Mobile.
            </summary>
        </member>
        <member name="F:OpenNETCF.Environment.SpecialFolder.Windows">
            <summary>
            The Windows folder.
            Not supported by Pocket PC and Pocket PC 2002.
            </summary>
        </member>
        <member name="F:OpenNETCF.Environment.SpecialFolder.ProgramFiles">
            <summary>
            The program files directory.
            </summary>
        </member>
        <member name="T:OpenNETCF.GuidEx">
            <summary>
            Represents a globally unique identifier (GUID).
            </summary>
            <remarks>A GUID is a 128-bit integer (16 bytes) that can be used across all computers and networks wherever a unique identifier is required. Such an identifier has a very low probability of being duplicated.</remarks>
            <seealso cref="T:System.Guid"/>
        </member>
        <member name="F:OpenNETCF.GuidEx.Empty">
            <summary>
            	Initializes a new instance of the <see cref="T:OpenNETCF.GuidEx"/> class.
            </summary>
        </member>
        <member name="M:OpenNETCF.GuidEx.#ctor(System.Byte[])">
            <summary>
            	Initializes a new instance of the <see cref="T:OpenNETCF.GuidEx"/> class using the specified array of bytes.
            </summary>
            <param name="b">A 16 element byte array containing values with which to initialize the GUID.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="b"/> is <see langword="null"/> .
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="b "/> is not 16 bytes long.
            </exception>
        </member>
        <member name="M:OpenNETCF.GuidEx.#ctor(System.String)">
            <summary>
            	 Initializes a new instance of the <see cref="T:OpenNETCF.GuidEx"/> class using the value represented by the specified string.
            </summary>
            <param name="g">
            	A <see cref="T:OpenNETCF.String"/> that contains a GUID in one of the following formats('d' represents a hexadecimal digit whose case is ignored):
            	32 contiguous digits:
            	dddddddddddddddddddddddddddddddd 
            	 -or-
            	Groups of 8, 4, 4, 4, and 12 digits with hyphens between the groups. The entire GUID can optionally be enclosed in matching braces or parentheses:
            	dddddddd-dddd-dddd-dddd-dddddddddddd
            	-or-
            	{dddddddd-dddd-dddd-dddd-dddddddddddd}
            	-or-
            	(dddddddd-dddd-dddd-dddd-dddddddddddd)
            	 -or-
            	Groups of 8, 4, and 4 digits, and a subset of eight groups of 2 digits, with each group prefixed by "0x" or "0X", and separated by commas. The entire GUID, as well as the subset, is enclosed in matching braces:
            	{0xdddddddd, 0xdddd, 0xdddd,{0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd}}
            	 All braces, commas, and "0x" prefixes are required. All embedded spaces are ignored. All leading zeroes in a group are ignored. 
            	 The digits shown in a group are the maximum number of meaningful digits that can appear in that group. You can specify from 1 to the number of digits shown for a group. The specified digits are assumed to be the low order digits of the group. If you specify more digits for a group than shown, the high-order digits are ignored. 
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="g "/>is <see langword="null"/>.</exception>
            <exception cref="T:System.FormatException">
            	The format of <paramref name="g "/> is invalid.
            </exception>
        </member>
        <member name="M:OpenNETCF.GuidEx.#ctor(System.Int32,System.Int16,System.Int16,System.Byte[])">
            <summary>
            	Initializes a new instance of the <see cref="T:OpenNETCF.GuidEx"/> class using the specified integers and byte array.
            </summary>
            <param name=" a">The first 4 bytes of the GUID.</param>
            <param name=" b">The next 2 bytes of the GUID.</param>
            <param name=" c">The next 2 bytes of the GUID.</param>
            <param name=" d">The remaining 8 bytes of the GUID.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="d "/>is <see langword="null"/> .
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="d "/>is not 8 bytes long.
            </exception>
        </member>
        <member name="M:OpenNETCF.GuidEx.#ctor(System.Int32,System.Int16,System.Int16,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            	Initializes a new instance of the <see cref="T:OpenNETCF.GuidEx"/> class using the specified integers and bytes.
            </summary>
            <param name="a">The first 4 bytes of the GUID.</param>
            <param name="b">The next 2 bytes of the GUID.</param>
            <param name="c">The next 2 bytes of the GUID.</param>
            <param name="d">The next byte of the GUID.</param>
            <param name="e">The next byte of the GUID.</param>
            <param name="f">The next byte of the GUID.</param>
            <param name="g">The next byte of the GUID.</param>
            <param name="h">The next byte of the GUID.</param>
            <param name="i">The next byte of the GUID.</param>
            <param name="j">The next byte of the GUID.</param>
            <param name="k">The next byte of the GUID.</param>
        </member>
        <member name="M:OpenNETCF.GuidEx.#ctor(System.UInt32,System.UInt16,System.UInt16,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            	Initializes a new instance of the <see cref="T:OpenNETCF.GuidEx"/> class using the specified unsigned integers and bytes.
            </summary>
            <param name="a">The first 4 bytes of the GUID.</param>
            <param name="b">The next 2 bytes of the GUID.</param>
            <param name="c">The next 2 bytes of the GUID.</param>
            <param name="d">The next byte of the GUID.</param>
            <param name="e">The next byte of the GUID.</param>
            <param name="f">The next byte of the GUID.</param>
            <param name="g">The next byte of the GUID.</param>
            <param name="h">The next byte of the GUID.</param>
            <param name="i">The next byte of the GUID.</param>
            <param name="j">The next byte of the GUID.</param>
            <param name="k">The next byte of the GUID.</param>
        </member>
        <member name="M:OpenNETCF.GuidEx.CompareTo(System.Object)">
            <summary>
            Compares this instance to a specified object and returns an indication of their relative values.
            </summary>
            <param name="value">An object to compare, or null.</param>
            <returns>
            A signed number indicating the relative values of this instance and <paramref name="value"/>.
            <list type="table">
            <listheader>
            <term>Value</term>
            <description>Description</description>
            </listheader>
            <item>
            <term> A negative integer</term>
            <description>This instance is less than <paramref name="value"/>.</description>
            </item>
            <item>
            <term> Zero</term>
            <description>This instance is equal to <paramref name="value"/>.</description>
            </item>
            <item>
            <term> A positive integer</term>
            <description>
            This instance is greater than <paramref name="value"/>.
            -or-
            
            <paramref name="value"/> is <see langword="null"/>.
            </description>
            </item>
            </list>
            </returns>
            <exception cref="T:System.ArgumentException"><paramref name="value"/> is not a <see langword="GuidEx"/>.</exception>
        </member>
        <member name="M:OpenNETCF.GuidEx.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="o">The object to compare with this instance. </param>
            <returns> 
            <see langword="true" /> if <paramref name="o" /> is a <see langword="GuidEx" /> 
            that has the same value as this instance; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:OpenNETCF.GuidEx.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>The hash code for this instance.</returns>
        </member>
        <member name="M:OpenNETCF.GuidEx.NewGuid">
            <summary>
            Initializes a new instance of the <see langword="GuidEx" /> class.
            </summary>
            <returns>A new <see langword="GuidEx" /> object.</returns>
            <remarks>This is a convenient static (<see langword="Shared" /> in Visual Basic) 
            method that you can call to get a new <see langword="GuidEx" /></remarks>
        </member>
        <member name="M:OpenNETCF.GuidEx.ToByteArray">
            <summary>
            Returns a 16-element byte array that contains the value of the GUID.
            </summary>
            <returns>A 16-element byte array.</returns>
        </member>
        <member name="M:OpenNETCF.GuidEx.ToString">
            <summary>
            Returns a <see langword="String" /> representation of the value of this instance in registry format.
            </summary>
            <returns><para>A <see langword="String" /> formatted in this pattern:</para>
            <para>xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx</para>
            <para>where the value of the GUID is represented as a series of lower-case hexadecimal digits in groups of 8, 4, 4, 4, and 12 digits and separated by hyphens. An example of a return value is "382c74c3-721d-4f34-80e5-57657b6cbc27".</para>
            </returns>
        </member>
        <member name="M:OpenNETCF.GuidEx.ToString(System.String)">
            <summary>
            Returns a <see langword="String" /> representation of the value of this	<see langword="GuidEx" /> instance, according to the provided format specifier.
            </summary>
            <param name="format">A single format specifier that indicates how to format the value of this <see cref="T:OpenNETCF.GuidEx" />. The <paramref name="format" /> parameter can be "N", "D", "B", or "P". If <paramref name="format" /> is <see langword="null" /> or the empty string (""), "D" is used.</param>
            <returns>A <see cref="T:System.String" /> representation of the value of this <see cref="T:OpenNETCF.GuidEx" />.</returns>
            <exception cref="T:System.FormatException">The value of <paramref name="format" /> is not <see langword="null" />, the empty string (""), "N", "D", "B", or "P".</exception>
        </member>
        <member name="M:OpenNETCF.GuidEx.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String" /> representation of the value of this instance of the <see cref="T:OpenNETCF.GuidEx" /> class, according to the provided format specifier and culture-specific format information.
            </summary>
            <param name="format">A single format specifier that indicates how to format the value of this <see cref="T:OpenNETCF.GuidEx" />. The <paramref name="format" /> parameter can be "N", "D", "B", or "P". If <paramref name="format" /> is <see langword="null" /> or the empty string (""), "D" is used.</param>
            <param name="provider">(Reserved) An <see langword="IFormatProvider" /> reference that supplies culture-specific formatting services.</param>
            <returns>A <see cref="T:System.String" /> representation of the value of this <see cref="T:OpenNETCF.GuidEx" />.</returns>
            <exception cref="T:System.FormatException">The value of <paramref name="format" /> is not <see langword="null" />, the empty string (""), "N", "D", "B", or "P".</exception>
        </member>
        <member name="M:OpenNETCF.GuidEx.op_Equality(OpenNETCF.GuidEx,OpenNETCF.GuidEx)">
            <summary>
            Returns an indication whether the values of two specified <see langword="GuidEx" /> objects are equal.
            </summary>
            <param name="a">A <see langword="GuidEx" /> object.</param>
            <param name="b">A <see langword="GuidEx" /> object.</param>
            <returns><see langword="true" /> if <paramref name="a " />and <paramref name="b " />are equal; otherwise, <see langword="false" /> .</returns>
        </member>
        <member name="M:OpenNETCF.GuidEx.op_Inequality(OpenNETCF.GuidEx,OpenNETCF.GuidEx)">
            <summary>
            Returns an indication whether the values of two specified <see langword="GuidEx" /> objects are not equal.
            </summary>
            <param name="a">A <see langword="GuidEx" /> object.</param>
            <param name="b">A <see langword="GuidEx" /> object.</param>
            <returns><see langword="true" /> if <paramref name="a " />and <paramref name="b " />are not equal; otherwise, <see langword="false" /> .</returns>
        </member>
        <member name="T:OpenNETCF.Complex">
            <summary>
            Represents a complex number of the format real + (imaginary * sqrt(-1))
            <para><b>New in v1.2</b></para>
            </summary>
        </member>
        <member name="T:OpenNETCF.MathEx">
            <summary>
            Provides constants and static methods for trigonometric, logarithmic, and other common mathematical functions.
            <para><b>New in v1.2</b></para>
            </summary>
            <seealso cref="T:System.Math"/>
        </member>
        <member name="M:OpenNETCF.MathEx.Sinh(System.Double)">
            <summary>
            Returns the hyperbolic sine of the specified angle.
            </summary>
            <param name="angle"></param>
            <returns></returns>
        </member>
        <member name="M:OpenNETCF.MathEx.Cosh(System.Double)">
            <summary>
            Returns the hyperbolic cosine of the specified angle.
            </summary>
            <param name="angle"></param>
            <returns></returns>
        </member>
        <member name="M:OpenNETCF.MathEx.Tanh(System.Double)">
            <summary>
            Returns the hyperbolic tangent of the specified angle.
            </summary>
            <param name="angle"></param>
            <returns></returns>
        </member>
        <member name="M:OpenNETCF.MathEx.BigMul(System.Int32,System.Int32)">
            <summary>
            Produces the full product of two 32-bit numbers.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="P:OpenNETCF.MathEx.PI">
            <summary>
            Represents the ratio of the circumference of a circle to its diameter, specified by the constant, p.
            </summary>
        </member>
        <member name="P:OpenNETCF.MathEx.E">
            <summary>
            Represents the natural logarithmic base, specified by the constant, e.
            </summary>
        </member>
        <member name="T:OpenNETCF.MathEx.Constants">
            <summary>
            <para><b>New in v1.2</b></para>
            </summary>
        </member>
        <member name="P:OpenNETCF.MathEx.Constants.h">
            <summary>
            Planck's Constant (Js)
            </summary>
        </member>
        <member name="P:OpenNETCF.MathEx.Constants.L">
            <summary>
            Avogadro's Constant (1/mol)
            </summary>
        </member>
        <member name="P:OpenNETCF.MathEx.Constants.k">
            <summary>
            Boltzmann's Constant (J/K)
            </summary>
        </member>
        <member name="P:OpenNETCF.MathEx.Constants.m">
            <summary>
            Atomic Mass Constant (kg)
            </summary>
        </member>
        <member name="P:OpenNETCF.MathEx.Constants.G">
            <summary>
            Newtonian Constant of Gravitation (m3 kg^-1 s^-2)
            </summary>
        </member>
        <member name="P:OpenNETCF.MathEx.Constants.mSube">
            <summary>
            Electron mass (kg)
            </summary>
        </member>
        <member name="P:OpenNETCF.MathEx.Constants.mSubp">
            <summary>
            Proton mass (kg)
            </summary>
        </member>
        <member name="P:OpenNETCF.MathEx.Constants.eV">
            <summary>
            Electron Volt (J)
            </summary>
        </member>
        <member name="P:OpenNETCF.MathEx.Constants.F">
            <summary>
            Faraday Constant (C/mol)
            </summary>
        </member>
        <member name="P:OpenNETCF.MathEx.Constants.R">
            <summary>
            Molar Gas Constant (J /(mol*K))
            </summary>
        </member>
        <member name="P:OpenNETCF.MathEx.Constants.Rinf">
            <summary>
            Rydberg Constant (1 / m)
            </summary>
        </member>
        <member name="P:OpenNETCF.MathEx.Constants.sigma">
            <summary>
            Stefan-Boltzman Constant (W m^-2 K^-4)
            </summary>
        </member>
        <member name="P:OpenNETCF.MathEx.Constants.c">
            <summary>
            Speed of Light in vacuum (m/s)
            </summary>
        </member>
        <member name="P:OpenNETCF.MathEx.Constants.mu0">
            <summary>
            Magnetic constant (N A^-2)
            </summary>
        </member>
        <member name="P:OpenNETCF.MathEx.Constants.e">
            <summary>
            Elementaty Charge (C)
            </summary>
        </member>
        <member name="T:OpenNETCF.MathEx.FFTReal">
            <summary>
            An implementation of the Fast Fourier Transform based on the work of Laurent de Soras
            </summary>
        </member>
        <member name="M:OpenNETCF.MathEx.FFTReal.Compute(System.Double[])">
            <summary>
            Compute an FFT on a 2^n-length data set
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:OpenNETCF.MathEx.FFTReal.ComputeInverse(OpenNETCF.Complex[])">
            <summary>
            Compute an inverse FFT on a 2^n-length data set of complex numbers
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:OpenNETCF.TrigonometricLUT">
            <summary>
            Trigonometric Look-up Table.
            </summary>
        </member>
    </members>
</doc>
