<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OpenNETCF.Net.Bluetooth</name>
    </assembly>
    <members>
        <member name="T:OpenNETCF.Net.Bluetooth.Internal.BLOB">
            <summary>
            This structure is derived from a binary large object (BLOB) and contains information about a block of data.
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.Bluetooth.Internal.BTH_LOCAL_VERSION">
            <summary>
            Summary description for BTH_LOCAL_VERSION.
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.Bluetooth.Internal.BTHNS_BLOB">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.Bluetooth.Internal.BTHNS_BLOB.ToByteArray">
            <summary>
            Internal bytes
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenNETCF.Net.Bluetooth.Internal.BTHNS_BLOB.Length">
            <summary>
            Size of the structure.
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.Bluetooth.Internal.BTHNS_INQUIRYBLOB">
            <summary>
            This structure contains additional parameters for device inquiries.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.Bluetooth.Internal.BTHNS_INQUIRYBLOB.Lap">
            <summary>
            LAP from which the inquiry access code is derived when the inquiry procedure is made.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.Bluetooth.Internal.BTHNS_INQUIRYBLOB.Length">
            <summary>
            Amount of time allowed to perform the query.
            This value is measured in units of 1.28 seconds (time to query=length*1.28 seconds).
            The default value is 16.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.Bluetooth.Internal.BTHNS_INQUIRYBLOB.Responses">
            <summary>
            Maximum number of devices to retrieve information about before stopping the inquiry. The default value is 16.
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.Bluetooth.Internal.BTHNS_RESTRICTIONBLOB">
            <summary>
            This structure contains details about a query restriction.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.Bluetooth.Internal.BTHNS_RESTRICTIONBLOB.Type">
            <summary>
            Type of search to perform.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.Bluetooth.Internal.BTHNS_RESTRICTIONBLOB.ServiceHandle">
            <summary>
            Service handle on which to query the attributes in the pRange member.
            The serviceHandle member is used for attribute searches. 
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.Bluetooth.Internal.BTHNS_RESTRICTIONBLOB.Uuids">
            <summary>
            Used for service and service attribute searches.
            Specifies the UUIDs that a record must contain to match the search.
            If less than 12 UUIDs are to be queried, set the SdpQueryUuid element, immediately following the last valid UUID, to all zeros (Guid.Empty).
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.Bluetooth.Internal.BTHNS_RESTRICTIONBLOB.NumRange">
            <summary>
            Used for attribute and service attribute searches.
            Specifies the number of elements in pRange.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.Bluetooth.Internal.BTHNS_RESTRICTIONBLOB.pRange">
            <summary>
            Used for attribute and service attribute searches.
            Specifies the attribute values to retrieve for any matching records.
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.Bluetooth.Internal.BTHNS_SETBLOB">
            <summary>
            This structure is passed to the BthNsSetService function through the lpqsRegInfo->lpBlob member and contains information on the new service.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.Bluetooth.WSAESETSERVICEOP.RNRSERVICE_REGISTER">
            <summary>
            Register the service. For SAP, this means sending out a periodic broadcast.
            This is an NOP for the DNS namespace.
            For persistent data stores, this means updating the address information. 
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.Bluetooth.WSAESETSERVICEOP.RNRSERVICE_DEREGISTER">
            <summary>
             Remove the service from the registry.
             For SAP, this means stop sending out the periodic broadcast.
             This is an NOP for the DNS namespace.
             For persistent data stores this means deleting address information. 
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.Bluetooth.WSAESETSERVICEOP.RNRSERVICE_DELETE">
            <summary>
            Delete the service from dynamic name and persistent spaces.
            For services represented by multiple CSADDR_INFO structures (using the SERVICE_MULTIPLE flag), only the specified address will be deleted, and this must match exactly the corresponding CSADDR_INFO structure that was specified when the service was registered 
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.Bluetooth.Internal.WSAQuerySet">
            <summary>
            Summary description for WSAQuerySet.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.Bluetooth.Internal.WSAQuerySet.ServiceInstanceName">
            <summary>
            Returns name of device if specified in query.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.Bluetooth.Internal.WSAQuerySet.ServiceClassId">
            <summary>
            Identifies the services class in the form of a GUID.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.Bluetooth.Internal.WSAQuerySet.Blob">
            <summary>
            This context varies depending upon the function.
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.Bluetooth.Sdp.SdpRecordTemp">
            <summary>
            Summary description for SdpRecord.
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.Sockets.BluetoothClient">
            <summary>
             Provides client connections for Bluetooth network services.
            </summary>
            <remarks>This class currently only supports devices which use the Microsoft Bluetooth stack such as the Orange SPV E200, devices which use the WidComm stack will not work.</remarks>
        </member>
        <member name="M:OpenNETCF.Net.Sockets.BluetoothClient.#ctor">
            <summary>
            Creates a new instance of BluetoothClient.
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.Sockets.BluetoothClient.DiscoverDevices(System.Int32)">
            <summary>
            Discovers accessible Bluetooth devices and returns their names and addresses.
            </summary>
            <returns>An array of BluetoothDeviceInfo objects describing the devices discovered.</returns>
        </member>
        <member name="M:OpenNETCF.Net.Sockets.BluetoothClient.Connect(OpenNETCF.Net.BluetoothEndPoint)">
            <summary>
            Connects a client to a specified endpoint.
            </summary>
            <param name="ep">A <see cref="T:OpenNETCF.Net.BluetoothEndPoint"/> that represents the remote device.</param>
        </member>
        <member name="M:OpenNETCF.Net.Sockets.BluetoothClient.Close">
            <summary>
            Closes the socket of the connection.
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.Sockets.BluetoothClient.GetStream">
            <summary>
            Gets the underlying stream of data.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenNETCF.Net.Sockets.BluetoothClient.Authenticate">
            <summary>
            Triggers Authentication.
            </summary>
            <remarks>On connected socket, triggers authentication. On not connected socket, forces authentication on connection.
            For incoming connection this means that connection is rejected if authentication cannot be performed.</remarks>
        </member>
        <member name="M:OpenNETCF.Net.Sockets.BluetoothClient.SetPin(OpenNETCF.Net.BluetoothAddress,System.String)">
            <summary>
            Set or change the PIN to be used with a specific remote device.
            </summary>
            <param name="device">Address of Bluetooth device.</param>
            <param name="pin">PIN string consisting of 1-16 ASCII characters.</param>
        </member>
        <member name="M:OpenNETCF.Net.Sockets.BluetoothClient.RevokePin(OpenNETCF.Net.BluetoothAddress)">
            <summary>
            Revoke a previously assigned PIN for connecting to the specified device.
            </summary>
            <param name="device">Address of Bluetooth device.</param>
        </member>
        <member name="M:OpenNETCF.Net.Sockets.BluetoothClient.GetRemoteMachineName(System.Net.Sockets.Socket)">
            <summary>
            Gets the name of a device by a specified socket.
            </summary>
            <param name="s"> A <see cref="T:System.Net.Sockets.Socket"/>.</param>
            <returns>Returns a string value of the computer or device name.</returns>
        </member>
        <member name="M:OpenNETCF.Net.Sockets.BluetoothClient.Finalize">
            <summary>
            Frees resources used by the <see cref="T:OpenNETCF.Net.Sockets.BluetoothClient"/> class.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.Sockets.BluetoothClient.Client">
            <summary>
            Gets or sets the underlying <see cref="T:System.Net.Sockets.Socket"/>.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.Sockets.BluetoothClient.RadioMode">
            <summary>
            Gets or Sets the current mode of operation of the Bluetooth radio.
            </summary>
            <remarks>This setting will be persisted when the device is reset.
            An Icon will be displayed in the tray on the Home screen and the device will emit a blue LED when Bluetooth is enabled.</remarks>
        </member>
        <member name="P:OpenNETCF.Net.Sockets.BluetoothClient.QueryLength">
            <summary>
            Amount of time allowed to perform the query.
            </summary>
            <remarks>This value is measured in units of 1.28 seconds (time to query = length * 1.28 seconds).
            The default value is 16.</remarks>
        </member>
        <member name="P:OpenNETCF.Net.Sockets.BluetoothClient.BondedDevices">
            <summary>
            Returns details of all devices which have already been discovered and bonded.
            </summary>
            <remarks>Take care when using these for connections as the device may not be available at the current time.</remarks>
        </member>
        <member name="P:OpenNETCF.Net.Sockets.BluetoothClient.AuthenticationEnabled">
            <summary>
            Gets a value to indicated whether Authentication is enabled.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.Sockets.BluetoothClient.ClassOfDevice">
            <summary>
            Returns the Class of Device for the local device.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.Sockets.BluetoothClient.Encrypt">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.Sockets.BluetoothClient.HardwareStatus">
            <summary>
            Returns the current status of the Bluetooth radio hardware.
            </summary>
            <value>A member of the <see cref="T:OpenNETCF.Net.Bluetooth.HardwareStatus"/> enumeration.</value>
        </member>
        <member name="P:OpenNETCF.Net.Sockets.BluetoothClient.LinkKey">
            <summary>
            Returns link key associated with peer Bluetooth device.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.Sockets.BluetoothClient.LinkPolicy">
            <summary>
            Returns the Link Policy of the current connection.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.Sockets.BluetoothClient.LocalAddress">
            <summary>
            Returns the address of the local Bluetooth device.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.Sockets.BluetoothClient.Pin">
            <summary>
            Sets the PIN associated with the currently connected device.
            </summary>
            <value>PIN which must be composed of 1 to 16 ASCII characters.
            Assigning null (Nothing in VB) or an empty String will revoke the PIN.</value>
        </member>
        <member name="P:OpenNETCF.Net.Sockets.BluetoothClient.RemoteMachineName">
            <summary>
            Gets the name of the remote device.
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.Sockets.BluetoothListener">
            <summary>
            Listens for connections from Bluetooth network clients.
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.Sockets.BluetoothListener.#ctor(OpenNETCF.Net.BluetoothEndPoint)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenNETCF.Net.Sockets.BluetoothListener"/> class.
            </summary>
            <param name="ep">The device address to monitor for making a connection.</param>
        </member>
        <member name="M:OpenNETCF.Net.Sockets.BluetoothListener.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenNETCF.Net.Sockets.BluetoothListener"/> class.
            </summary>
            <param name="service">The Bluetooth service to listen for.</param>
        </member>
        <member name="M:OpenNETCF.Net.Sockets.BluetoothListener.Start">
            <summary>
            Starts the socket to listen for incoming connections.
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.Sockets.BluetoothListener.Stop">
            <summary>
            Stops the socket from monitoring connections.
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.Sockets.BluetoothListener.AcceptSocket">
            <summary>
            Creates a new socket for a connection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenNETCF.Net.Sockets.BluetoothListener.AcceptBluetoothClient">
            <summary>
            Creates a client object for a connection when the specified service or endpoint is detected by the listener component.
            </summary>
            <returns>A <see cref="T:OpenNETCF.Net.Sockets.BluetoothClient"/> component.</returns>
        </member>
        <member name="M:OpenNETCF.Net.Sockets.BluetoothListener.Pending">
            <summary>
            Determines if there is a connection pending.
            </summary>
            <returns>true if there is a connection pending; otherwise, false.</returns>
        </member>
        <member name="M:OpenNETCF.Net.Sockets.BluetoothListener.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.Sockets.BluetoothListener.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:OpenNETCF.Net.Sockets.BluetoothListener.Finalize">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.Sockets.BluetoothListener.LocalEndPoint">
            <summary>
            Gets a new instance of the <see cref="T:OpenNETCF.Net.Sockets.BluetoothListener"/> class.  
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.Sockets.BluetoothSocketOptionName">
            <summary>
            Defines <see cref="T:System.Net.Sockets.Socket"/> configuration option names for the <see cref="T:System.Net.Sockets.Socket"/> class when used with Bluetooth.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.Sockets.BluetoothSocketOptionName.Authenticate">
            <summary>
            On connected socket, triggers authentication.
            On not connected socket, forces authentication on connection.
            For incoming connection this means that connection is rejected if authentication cannot be performed.
            </summary>
            <remarks>The optval and optlen parameters are ignored; however, Winsock implementation on Windows CE requires optlen to be at least 4 and optval to point to at least an integer datum.</remarks>
        </member>
        <member name="F:OpenNETCF.Net.Sockets.BluetoothSocketOptionName.Encrypt">
            <summary>
            On a connected socket, this command turns encryption on or off.
            On an unconnected socket, this forces encryption to be on or off on connection.
            For an incoming connection, this means that the connection is rejected if the encryption cannot be turned on.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.Sockets.BluetoothSocketOptionName.SetPin">
            <summary>
            This sets or revokes PIN code to use with a connection or socket.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.Sockets.BluetoothSocketOptionName.SetLink">
            <summary>
            This sets or revokes link key to use with a connection or peer device.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.Sockets.BluetoothSocketOptionName.GetLink">
            <summary>
            Returns link key associated with peer Bluetooth device.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.Sockets.BluetoothSocketOptionName.SetMtu">
            <summary>
            This sets default MTU (maximum transmission unit) for connection negotiation.
            While allowed for connected socket, it has no effect if the negotiation has already completed.
            Setting it on listening socket will propagate the value for all incoming connections.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.Sockets.BluetoothSocketOptionName.GetMtu">
            <summary>
            Returns MTU (maximum transmission unit).
            For connected socket, this is negotiated value, for server (accepting) socket it is MTU proposed for negotiation on connection request.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.Sockets.BluetoothSocketOptionName.SetMtuMaximum">
            <summary>
            This sets maximum MTU for connection negotiation.
            While allowed for connected socket, it has no effect if the negotiation has already completed.
            Setting it on listening socket will propagate the value for all incoming connections.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.Sockets.BluetoothSocketOptionName.GetMtuMaximum">
            <summary>
            Returns maximum MTU acceptable MTU value for a connection on this socket.
            Because negotiation has already happened, has little meaning for connected socket.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.Sockets.BluetoothSocketOptionName.SetMtuMinimum">
            <summary>
            This sets minimum MTU for connection negotiation.
            While allowed for connected socket, it has no effect if the negotiation has already completed.
            Setting it on listening socket will propagate the value for all incoming connections.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.Sockets.BluetoothSocketOptionName.GetMtuMinimum">
            <summary>
            Returns minimum MTU acceptable MTU value for a connection on this socket.
            Because negotiation has already happened, has little meaning for connected socket. 
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.Sockets.BluetoothSocketOptionName.SetXOnLimit">
            <summary>
            This sets XON limit.
            Setting it on listening socket will propagate the value for all incoming connections.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.Sockets.BluetoothSocketOptionName.GetXOnLimit">
            <summary>
            Returns XON limit for a connection.
            XON limit is only used for peers that do not support credit-based flow control (mandatory in the Bluetooth Core Specification version 1.1).
            When amount of incoming data received, but not read by an application for a given connection grows past this limit, a flow control command is sent to the peer requiring suspension of transmission.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.Sockets.BluetoothSocketOptionName.SetXOffLimit">
            <summary>
            This sets XOFF limit.
            Setting it on listening socket will propagate the value for all incoming connections.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.Sockets.BluetoothSocketOptionName.GetXOffLimit">
            <summary>
            Returns XOFF limit for a connection.
            XOFF limit is only used for peers that do not support credit-based flow control (mandatory in the Bluetooth Core Specification 1.1).
            If flow has been suspended because of buffer run-up, when amount of incoming data received, but not read by an application for a given connection falls below this limit, a flow control command is sent to the peer allowing continuation of transmission.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.Sockets.BluetoothSocketOptionName.SetSendBuffer">
            <summary>
            Specifies maximum amount of data that can be buffered inside RFCOMM (this is amount of data before call to send blocks).
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.Sockets.BluetoothSocketOptionName.GetSendBuffer">
            <summary>
             Returns maximum amount of data that can be buffered inside RFCOMM (this is amount of data before call to send blocks).
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.Sockets.BluetoothSocketOptionName.SetReceiveBuffer">
            <summary>
            Specifies maximum amount of data that can be buffered for a connection.
            This buffer size is used to compute number of credits granted to peer device when credit-based flow control is implemented.
            This specifies the maximum amount of data that can be buffered.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.Sockets.BluetoothSocketOptionName.GetReceiveBuffer">
            <summary>
            Returns maximum amount of data that can be buffered for a connection.
            This buffer size is used to compute number of credits granted to peer device when credit-based flow control is implemented.
            This specifies the maximum amount of data that can be buffered.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.Sockets.BluetoothSocketOptionName.GetV24Break">
            <summary>
            Retrieves last v24 and break signals set through MSC command from peer device.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.Sockets.BluetoothSocketOptionName.GetRls">
            <summary>
            Retrieves last line status signals set through RLS command from peer device.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.Sockets.BluetoothSocketOptionName.SendMsc">
            <summary>
            Sends MSC command. V24 and breaks are as specified in RFCOMM Specification.
            Only modem signals and breaks can be controlled, RFCOMM reserved fields such as flow control are ignored and should be set to 0.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.Sockets.BluetoothSocketOptionName.SendRls">
            <summary>
            Sends RLS command.
            Argument is as specified in RFCOMM Specification.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.Sockets.BluetoothSocketOptionName.GetFlowType">
            <summary>
            Gets flow control type on the connected socket.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.Sockets.BluetoothSocketOptionName.SetPageTimeout">
            <summary>
            Sets the page timeout for the card.
            The socket does not have to be connected.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.Sockets.BluetoothSocketOptionName.GetPageTimeout">
            <summary>
            Gets the current page timeout.
            The socket does not have to be connected.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.Sockets.BluetoothSocketOptionName.SetScan">
            <summary>
            Sets the scan mode for the card.
            The socket does not have to be connected.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.Sockets.BluetoothSocketOptionName.GetScan">
            <summary>
            Gets the current scan mode.
            The socket does not have to be connected.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.Sockets.BluetoothSocketOptionName.SetCod">
            <summary>
            Sets the class of the device.
            The socket does not have to be connected.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.Sockets.BluetoothSocketOptionName.GetCod">
            <summary>
            Retrieve the Class of Device.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.Sockets.BluetoothSocketOptionName.GetLocalVersion">
            <summary>
            Get the version information from the Bluetooth adapter.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.Sockets.BluetoothSocketOptionName.GetRemoteVersion">
            <summary>
            Get the version of the remote adapter.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.Sockets.BluetoothSocketOptionName.GetAuthenticationEnabled">
            <summary>
            Retrieves the authentication settings.
            The socket does not have to be connected.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.Sockets.BluetoothSocketOptionName.SetAuthenticationEnabled">
            <summary>
            Sets the authentication policy of the device.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.Sockets.BluetoothSocketOptionName.ReadRemoteName">
            <summary>
            Reads the remote name of the device.
            The socket does not have to be connected.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.Sockets.BluetoothSocketOptionName.GetLinkPolicy">
            <summary>
            Retrieves the link policy of the device.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.Sockets.BluetoothSocketOptionName.SetLinkPolicy">
            <summary>
            Sets the link policy for an existing baseband connection.
            The socket must be connected.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.Sockets.BluetoothSocketOptionName.EnterHoldMode">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.Sockets.BluetoothSocketOptionName.EnterSniffMode">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.Sockets.BluetoothSocketOptionName.ExitSniffMode">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.Sockets.BluetoothSocketOptionName.EnterParkMode">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.Sockets.BluetoothSocketOptionName.ExitParkMode">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.Sockets.BluetoothSocketOptionName.GetMode">
            <summary>
            Gets the current mode of the connection.
            The mode can either be sniff, park, or hold. The socket must be connected.
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.Sockets.BluetoothSocketOptionLevel">
            <summary>
            Defines Bluetooth specific socket option levels for the <see cref="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)"/> and <see cref="M:System.Net.Sockets.Socket.GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName)"/> methods.   
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.Sockets.BluetoothSocketOptionLevel.RFComm">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.Sockets.BluetoothSocketOptionLevel.BthTdi">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.Sockets.BluetoothSocketOptionLevel.Sdp">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.Sockets.BluetoothProtocolType">
            <summary>
            Specifies the Bluetooth specific protocols that the <see cref="T:System.Net.Sockets.Socket"/> class supports.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.Sockets.BluetoothProtocolType.RFComm">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.Sockets.BluetoothProtocolType.L2Cap">
            <summary>
            
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.Sockets.BluetoothAddressFamily">
            <summary>
            Specifies the Bluetooth specific addressing scheme that an instance of the <see cref="T:System.Net.Sockets.Socket"/> class can use.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.Sockets.BluetoothAddressFamily.Bluetooth">
            <summary>
            Bluetooth address.
            </summary>
            <value>32</value>
        </member>
        <member name="T:OpenNETCF.Net.BluetoothAddress">
            <summary>
            Represents a Bluetooth device address.
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.BluetoothAddress.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OpenNETCF.Net.BluetoothAddress"/>.
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.BluetoothAddress.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenNETCF.Net.BluetoothAddress"/> class with the specified address.
            </summary>
            <param name="address"><see cref="T:System.Int64"/> representation of the address.</param>
        </member>
        <member name="M:OpenNETCF.Net.BluetoothAddress.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:OpenNETCF.Net.BluetoothAddress"/> class with the specified address.
            </summary>
            <param name="address">Address as 6 byte array.</param>
        </member>
        <member name="M:OpenNETCF.Net.BluetoothAddress.Parse(System.String)">
            <summary>
            Converts the string representation of a Bluetooth address to a new <see cref="T:OpenNETCF.Net.BluetoothAddress"/> instance.
            </summary>
            <param name="address">A string containing an address to convert.</param>
            <returns>New BluetoothAddress instance.</returns>
            <remarks>Address must be specified in hex format separated by the colon character e.g. 00:00:00:00:00:00, or as a long hex formatted integer.</remarks>
        </member>
        <member name="M:OpenNETCF.Net.BluetoothAddress.ToByteArray">
            <summary>
            Returns the internal byte array
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenNETCF.Net.BluetoothAddress.ToInt64">
            <summary>
            Returns the Bluetooth address as a long integer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenNETCF.Net.BluetoothAddress.ToString">
            <summary>
            Converts the address to its equivalent string representation.
            </summary>
            <returns>The string representation of this instance.</returns>
        </member>
        <member name="F:OpenNETCF.Net.BluetoothAddress.None">
            <summary>
            Provides a null Bluetooth address.
            This field is read-only.
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.Sockets.BluetoothDeviceInfo">
            <summary>
            Provides information about an available device obtained by the client during device discovery.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.Sockets.BluetoothDeviceInfo.DeviceID">
            <summary>
            Gets the device identifier.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.Sockets.BluetoothDeviceInfo.DeviceName">
            <summary>
            Gets a name of a device.
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.BluetoothEndPoint">
            <summary>
            Establishes connections to a peer device and provides Bluetooth port information.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.BluetoothEndPoint.MinPort">
            <summary>
            Specifies the minimum value that can be assigned to the Port property.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.BluetoothEndPoint.MaxPort">
            <summary>
            Specifies the maximum value that can be assigned to the Port property.
            </summary>
        </member>
        <member name="M:OpenNETCF.Net.BluetoothEndPoint.#ctor(OpenNETCF.Net.BluetoothAddress,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenNETCF.Net.BluetoothEndPoint"/> class with the specified address and service.
            </summary>
            <param name="address">The Bluetooth address of the device. A six byte array.</param>
            <param name="service">Guid representing the Bluetooth profile to use.</param>
        </member>
        <member name="M:OpenNETCF.Net.BluetoothEndPoint.#ctor(OpenNETCF.Net.BluetoothAddress,System.Guid,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenNETCF.Net.BluetoothEndPoint"/> class with the specified address, service and port number.
            </summary>
            <param name="address">The Bluetooth address of the device. A six byte array.</param>
            <param name="service">Guid representing the Bluetooth profile to use.</param>
            <param name="port">Radio channel to use, -1 for any.</param>
        </member>
        <member name="M:OpenNETCF.Net.BluetoothEndPoint.Serialize">
            <summary>
            Serializes endpoint information into a <see cref="T:System.Net.SocketAddress"/> instance.
            </summary>
            <returns>A <see cref="T:System.Net.SocketAddress"/> instance containing the socket address for the endpoint.</returns>
        </member>
        <member name="M:OpenNETCF.Net.BluetoothEndPoint.Create(System.Net.SocketAddress)">
            <summary>
            Creates an endpoint from a socket address.
            </summary>
            <param name="socketAddress">The <see cref="T:System.Net.SocketAddress"/> to use for the endpoint.</param>
            <returns>An <see cref="T:System.Net.EndPoint"/> instance using the specified socket address.</returns>
        </member>
        <member name="P:OpenNETCF.Net.BluetoothEndPoint.AddressFamily">
            <summary>
            Gets the address family of the Bluetooth address. 
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.BluetoothEndPoint.Address">
            <summary>
            Gets or sets the Bluetooth address of the endpoint.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.BluetoothEndPoint.Service">
            <summary>
            Gets or sets the Bluetooth service to use for the connection.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.BluetoothEndPoint.Port">
            <summary>
            Gets or sets the service channel number of the endpoint.
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.Bluetooth.BluetoothService">
            <summary>
            Standard Bluetooth Profile identifiers.
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.Bluetooth.BluetoothVersion">
            <summary>
            Summary description for BluetoothVersion.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.Bluetooth.BluetoothVersion.HciVersion">
            <summary>
            Version of the current Host Controller Interface (HCI) in the Bluetooth hardware.
            </summary>
            <remarks>This value changes only when new versions of the Bluetooth hardware are created for the new Bluetooth Special Interest Group (SIG) specifications.</remarks>
        </member>
        <member name="P:OpenNETCF.Net.Bluetooth.BluetoothVersion.LmpVersion">
            <summary>
            Version of the current Link Manager Protocol (LMP) in the Bluetooth hardware.
            </summary>
        </member>
        <member name="P:OpenNETCF.Net.Bluetooth.BluetoothVersion.Manufacturer">
            <summary>
            Name of the Bluetooth hardware manufacturer.
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.Bluetooth.HardwareStatus">
            <summary>
            Specifies the current status of the Bluetooth hardware.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.Bluetooth.HardwareStatus.Unknown">
            <summary>
            Status cannot be determined.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.Bluetooth.HardwareStatus.NotPresent">
            <summary>
            Bluetooth radio not present.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.Bluetooth.HardwareStatus.Initializing">
            <summary>
            Bluetooth radio is in the process of starting up.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.Bluetooth.HardwareStatus.Running">
            <summary>
            Bluetooth radio is active.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.Bluetooth.HardwareStatus.Shutdown">
            <summary>
            Bluetooth radio is in the process of shutting down.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.Bluetooth.HardwareStatus.Error">
            <summary>
            Bluetooth radio is in an error state.
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.Bluetooth.LinkPolicy">
            <summary>
            Flags to describe Link Policy.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.Bluetooth.LinkPolicy.Disabled">
            <summary>
            Disables all LAN Manager (LM) modes. 
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.Bluetooth.LinkPolicy.MasterSlave">
            <summary>
            Enables the master slave switch.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.Bluetooth.LinkPolicy.Hold">
            <summary>
            Enables Hold mode.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.Bluetooth.LinkPolicy.Sniff">
            <summary>
            Enables Sniff Mode.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.Bluetooth.LinkPolicy.Park">
            <summary>
            Enables Park Mode.
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.Bluetooth.Manufacturer">
            <summary>
            Manufacturer codes.
            </summary>
            <remarks>Defined in Bluetooth Specifications <a href="https://www.bluetooth.org/foundry/assignnumb/document/company_identifiers">Assigned Numbers</a>.</remarks>
        </member>
        <member name="F:OpenNETCF.Net.Bluetooth.Manufacturer.InternalUse">
            <summary>
            For use in internal and interoperability tests before a Company ID has been assigned.
            May not be used in products.
            Only used in Link Manager testing.
            </summary>
        </member>
        <member name="T:OpenNETCF.Net.Bluetooth.RadioMode">
            <summary>
            Determine all the possible modes of operation of the Bluetooth radio.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.Bluetooth.RadioMode.PowerOff">
            <summary>
            Bluetooth is disabled on the device.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.Bluetooth.RadioMode.Connectable">
            <summary>
            Bluetooth is connectable but your device cannot be discovered by other devices.
            </summary>
        </member>
        <member name="F:OpenNETCF.Net.Bluetooth.RadioMode.Discoverable">
            <summary>
            Bluetooth is activated and fully discoverable.
            </summary>
        </member>
    </members>
</doc>
