<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="txtcalendar.Text" xml:space="preserve">
    <value>BEGIN:VCALENDAR
VERSION:1.0
BEGIN:VEVENT
DESCRIPTION;CHARSET=UTF-8:School
SUMMARY;CHARSET=utf-8:School
CLASS:PUBLIC
DTSTART:20110204T200000Z
DTSTART:20110205T082517ZZ00
DTEND:20110205T084917ZZ00
RRULE:D1 #0
DALARM:20110201T083017ZZ00;PT5M;1;
END:VEVENT
END:VCALENDAR</value>
  </data>
  <data name="label25.Text" xml:space="preserve">
    <value>Notes:

1. You can either send MMS by providing all the details or use the MMS slide feature.

2. If you need more control over MMS sending, e.g. setting the presentation id, transaction id, then you can construct
the message using the MMS class.

3. To make MMS sending easier, alternatively you can use the MMS slide feature.

4. For both functionalities, you can make use of the queueing feature by checking "Send to Queue" check box.

5. To receive MMS, it will NOT work for GPRS/3G phones since the MMS notification is forwarded to the phone software
directly. You should use a proper GPRS/3G modem.
</value>
  </data>
  <metadata name="openFileDialog1MMS.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>7, 7</value>
  </metadata>
  <metadata name="saveFileDialog1MMS.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>149, 5</value>
  </metadata>
  <data name="txtSmartSmsRingtone.Text" xml:space="preserve">
    <value>7C0C7A00424547494E3A494D454C4F44590D0A56455253494F4E3A312E320D0A464F524D41543A434C415353312E300D0A4D454C4F44593A6433236333643323633364337232643323633364336533236633653323663367336133236733613323673361337232613323673361330D0A454E443A494D454C4F44590D0A</value>
  </data>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="picOtaBitmap.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAEgAAAANCAIAAACFGr/PAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAgY0hSTQAAeiYAAICEAAD6AAAAgOgAAHUwAADqYAAAOpgAABdwnLpRPAAAAAlwSFlzAAAK+wAA
        CvsBy58dkAAAAmFJREFUSEvdVb+r6WEYP3dQiDJQNoNJKX+BwSIGBguzQRmUQRbKHUw2JrtTBkVRV4qU
        xaKQUjryu5BI+ZEyuJ9zn3Pe3nu+3YtzO8P1TO/zfN7ned/P9/k87/fb5XJ5ekgDsYe0p4dk9SpDInY8
        Hn8IrNPpAOr3+0Jos9lQYrVaZWi5XKbgdrsVpvR6PUDdbpegxWIBt16vk4sLwC2VSlizOois12u+FNJv
        7MQbsdFoJBw0j8eDKtFoVAjVajVA+XxeqVQyVC6X53I5xBuNhjAlFAoB8vv9BGWzWbhGo5HceDx+Op2k
        UinWKpWKbg9W4XCYL2W1Wlut1i3c3oihhM/nczqdVEWr1cJNp9M8MZPJhCAZ2ghIp9PRfq/XS/FIJIL4
        ZDLB2m63E6rX6+EWCoW/EMO21WrFE8OVAoEA4hqNBulms5mq0Qe6ar/NGPvSDoeDZbKO2Wy27+82Ho95
        YjgMSCwW488rFot0Feo82Z86hm3BYFAkErGOQXWUbrFYkNhut/HVYJVK5SorbLiDGC8JkmIqlUokEjKZ
        jCCJREIdI7uXGKtPUuSJQX5MLNT5q3YHMbfb/fxuy+WSlc5kMgjTtSCbzxHDjGFEqYiQGLQNtX+VFDEq
        mF0yejChMRb5R2LQNnuHiNhutwNb4olTDAbDVxETShG6V6vVLK5QKJrN5uc6BmKYcLFYzDqGOvv9PplM
        8ue6XK7pdHpVhx9nDA/uyy+bz+csGb8sCvJGvx3YcDhk8cFgwB95OBwI4nWLp4+CuDQ2z2Yzcs/nM1w8
        tljzdXAQfy7Sb2H1kdiNOf/Ftp+zsTI75LyPFAAAAABJRU5ErkJggg==
</value>
  </data>
  <data name="picPictureSms.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        Qk2OAQAAAAAAAD4AAAAoAAAASAAAABwAAAABAAEAAAAAAAAAAAB4AAAAeAAAAAIAAAACAAAAAAAA////
        //99re316/dr8fTG8w69den45/tn6/vG8w6+ceYD5/wH1/fG8w7Mjhf4x/75w+fG8w7z//jHOPH+MBzG
        8w7///8//w///gPG8w7////////////G8w7H8Bh/8P+Ph4HG8w7n+ZI45n/PIxPG8w7n+YM4x//OMzPG
        8w7n+YM4x//OMzPG8w7n+ecwT//OczPG8w7n+eMyQH/OMzPG8w7n+eMyRn/OMzPG8w7n+fIiZH+HIzPG
        8w7n+fhAMP+HhiPG8w7n+f////8T///G8w7n+f////8z///G8w7n+f////8z///G8w7H8f////wh///G
        8w7////////////G8w7//if//n/////G8w7/+cuPmZ/////G8w6w97RwY9//B8PG8w5PD7n98+Bg+b3G
        8w7PJ7n69e+d/XLG8w7Os7H6+d+a/mzG8w5Oecn9+Y+88A3G8w4=
</value>
  </data>
  <metadata name="openFileDialog1SMS.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>301, 5</value>
  </metadata>
</root>